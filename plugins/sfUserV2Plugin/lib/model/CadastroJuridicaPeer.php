<?php


/**
 * Skeleton subclass for performing query and update operations on the 'cadastro_juridica' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 08/03/2013 21:37:42
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.sgws
 */
class CadastroJuridicaPeer extends BaseCadastroJuridicaPeer {
    
    public static function getAll()
    {
        $c = new Criteria();
        return self::doSelect($c);
    }
    
    public static function getCodigoVelhio($id)
    {
        $c = new Criteria();
        $c->add(self::CODIGO_VELHIO, $id);
        return self::doSelectOne($c);
    }
    
    public static function getCodigoCliente($id)
    {
        $c = new Criteria();
        $c->add(self::CODIGO_CLIENTE, $id);
        return self::doSelectOne($c);
    }
    /**
     * Retorna el id ppal del usuario juridica
     * @param integer $idUser
     * @return array
     */
    public static function getIdPPal($idUser)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_EMPRESA);        
        $c->add(self::ID_USER, $idUser, Criteria::EQUAL);        
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo            
        while($res = $rs->fetch())
        {
            $dato['id'] = $res['ID_EMPRESA'];            
        }            
        if (!empty($dato)){
            return $dato;
        }else{
            return false;
        }
    }
    /**
     * Retorna el nombre del usuario juridico
     * @param integer $idUser
     * @return array
     */
    public static function getNameJuridico($idUser)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::CODIGO_CLIENTE);
        $c->addSelectColumn(self::NOME_FANTASIA);
        $c->addSelectColumn(self::DDD_TELEFONE);
        $c->addSelectColumn(self::DDD_CELULAR);
        $c->addSelectColumn(self::TELEFONE);
        $c->addSelectColumn(self::CELULAR);
        $c->addSelectColumn(self::ENDERECO);
        
        $c->add(self::ID_EMPRESA, $idUser, Criteria::EQUAL);
        
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo            
        while($res = $rs->fetch())
        {
            $dato['id']             = $res['CODIGO_CLIENTE']; 
            $dato['nome']           = $res['NOME_FANTASIA'];            
            $dato['ddd_telefone']   = $res['DDD_TELEFONE'];            
            $dato['ddd_celular']    = $res['DDD_CELULAR'];            
            $dato['telefone']       = $res['TELEFONE'];            
            $dato['celular']        = $res['CELULAR'];            
            $dato['endereco']        = $res['ENDERECO'];            
        }            
        if (!empty($dato)){
            return $dato;
        }else{
            return false;
        }
    }
    
    /**
     * Retorna los nombres de los usuarios juridicos
     * @return array
     */
    public static function getClientsNameJuridico()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::NOME_FANTASIA); 
        $c->addSelectColumn(self::ID_EMPRESA); 
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo  
        while($res = $rs->fetch())
        {
            $datos[$res['ID_EMPRESA']] = $res['NOME_FANTASIA'];  
        }            
        if (!empty($datos)){
            return $datos;
        }else{
            return false;
        }
    }
    /**
     * Retorna el nombre del usuario juridico
     * @param integer $idUser
     * @return array
     */
    public static function getDataByCnpj($cnpj)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NOME_FANTASIA);
        $c->addSelectColumn(self::DDD_TELEFONE);
        $c->addSelectColumn(self::DDD_CELULAR);
        $c->addSelectColumn(self::TELEFONE);
        $c->addSelectColumn(self::CELULAR);
        
        $c->add(self::CNPJ, $cnpj, Criteria::EQUAL);
        
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo            
        while($res = $rs->fetch())
        {
            $dato['id_user']        = $res['ID_USER'];            
            $dato['nome']           = $res['NOME_FANTASIA'];            
            $dato['ddd_telefone']   = $res['DDD_TELEFONE'];            
            $dato['ddd_celular']    = $res['DDD_CELULAR'];            
            $dato['telefone']       = $res['TELEFONE'];            
            $dato['celular']        = $res['CELULAR'];            
        }            
        if (!empty($dato)){
            return $dato;
        }else{
            return false;
        }
    }
    
        
    public static function getListClientes($tipo = '')
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_EMPRESA);
        $c->addSelectColumn(self::NOME_FANTASIA);        
        if($tipo)
        {
            $c->add(self::TIPO_CADASTRO, $tipo, Criteria::EQUAL);
        }
        //Ejecucion de consulta
        $c->addAscendingOrderByColumn(self::NOME_FANTASIA);
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $sections[0] = '';
        while($res = $rs->fetch())
        {
            $sections[$res['ID_EMPRESA']] = $res['NOME_FANTASIA'];            
        }
        if(!empty($sections)){
            return $sections;
        }else{
            return false;
        }
    }
    
    public static function validateEmail($email, $idUser = 0)
    {
        $c = new Criteria();
        
        $c->add(self::EMAIL, $email);
        if($idUser)
        {
            $c->add(self::ID_EMPRESA, $idUser, Criteria::NOT_EQUAL);
        }
        return self::doCount($c);
    }
    
                /**
      * Recupera la contrasena actual de un usuario
      *
      * @param integer $idUser
      * @return array
      */
    public static function getListClientsNames($name)
    {
        $c = new Criteria();
        $c->add(self::NOME_FANTASIA, '%'.$name.'%',  Criteria::LIKE);
        return self::doSelect($c);
        //Cambiar por return !empty($profiles) ? $profiles : false;
    }
    
      public static function lastCodigoCliente(){
        $c = new Criteria();
        $c->add(CadastroJuridicaPeer::TIPO_CADASTRO, 'Cliente', Criteria::EQUAL);
        $c->addAnd(CadastroJuridicaPeer::CODIGO_CLIENTE,'env2014', Criteria::NOT_EQUAL);
        $c->addDescendingOrderByColumn(CadastroJuridicaPeer::CODIGO_CLIENTE);
        
        $rs = self::doSelectOne($c);
        if($rs)
        {
            return $rs->getCodigoCliente();
        }else{
            return false;
        }    
    }


} // CadastroJuridicaPeer
