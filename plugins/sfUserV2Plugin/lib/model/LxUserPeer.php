<?php


/**
 * Skeleton subclass for performing query and update operations on the 'lx_user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Tue Mar  9 09:57:10 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.lynx
 */
class LxUserPeer extends BaseLxUserPeer {

    /**
     * Funcion para validar si los datos ingresado son correctos
     *
     * @param string $login
     * @param string $clave
     * @return array
     */
    public static function validateUserPanel($login, $clave)
    {
        $c = new Criteria();
        $c->add(self::LOGIN, $login);
        $c->add(self::PASSWORD, $clave);
        $c->add(self::STATUS, 1);
        
        return self::doSelectOne($c);
    }
    /**
      * Recupera la contrasena actual de un usuario
      *
      * @param integer $idUser
      * @return array
      */
    public static function getCurrentPassword($idUser)
    {
        $c = new Criteria();
        $c->add(self::ID_USER, $idUser);
        return self::doSelectOne($c);
        //Cambiar por return !empty($profiles) ? $profiles : false;
    }
    /**
     * Valida que el login no este duplicado
     * @param string $login
     * @param integer $idUser
     * @return integer
     */
    public static function validateLogin($login, $idUser = 0)
    {
        $c = new Criteria();
        
        $c->add(self::LOGIN, $login);
        if($idUser)
        {
            $c->add(self::ID_USER, $idUser, Criteria::NOT_EQUAL);
        }
        return self::doCount($c);
        
    }
    /**
     * Valida que no este duplicado el email do usuario
     * @param string $email
     * @param integer $idUser
     * @return integer
     */
    public static function validateEmail($email, $idUser = 0)
    {
        $c = new Criteria();
        
        $c->add(self::LOGIN, $email);
        if($idUser)
        {
            $c->add(self::ID_USER, $idUser, Criteria::NOT_EQUAL);
        }
        return self::doCount($c);
    }
    
    /**
     * Obtengo el perfil del usuario
     */
    public static function getPerfilActual($id_user) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::ID_PROFILE);
        //Condicion
        $c->add(self::ID_USER,$id_user,Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['id_profile'] = $res['ID_PROFILE'];            
        }        
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    /**
     * Obtengo el idusuario dado su codigo
     */
    public static function getIdUser($codigo_user) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::ID_USER);
        //Condicion
        $c->add(self::CODIGO, $codigo_user, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['id_user'] = $res['ID_USER'];            
        }        
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    /**
     * Datos del usuario
     */
    public static function getDataUser($id_user) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::EMAIL);
        $c->addSelectColumn(self::ID_TIPO_USUARIO);
        //Condicion
        $c->add(self::ID_USER,$id_user,Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['email'] = $res['EMAIL'];            
            $dato['id_tipo'] = 0;            
            $dato['id_tipo_usuario'] = $res['ID_TIPO_USUARIO'];            
            $dato['tipo'] = '';            
                  
        }        
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
    public static function getNomeUser($id_user) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::NAME);
        //Condicion
        $c->add(self::ID_USER,$id_user,Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['nome'] = $res['NAME'];      
        }        
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
        public static function getNomeUserViejo($id_user) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::NAME);
        //Condicion
        $c->add(self::CODIGO_VELHIO,$id_user,Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['nome'] = $res['NAME'];      
        }        
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
    
    /**
     * Datos del usuario
     */
    public static function getDataUserComplete($id_user) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::EMAIL);
        $c->addSelectColumn(self::ID_TIPO_USUARIO);
        
        //Condicion
        //$c->addJoin(self::ID_TIPO_CADASTRO, TipoCadastroPeer::ID_TIPO_CADASTRO, Criteria::INNER_JOIN);        
        $c->add(self::ID_USER,$id_user,Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['email'] = $res['EMAIL'];            
            $dato['id_tipo_usuario'] = $res['ID_TIPO_USUARIO'];            
                    
                  
        }        
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    /**
     * Retorna los usuarios 
     * @param type $idUser
     * @return array
     */
    public static function getOtrosUsuarios($idUser)
    {
        $c = new Criteria();
        $c->add(self::ID_TIPO_USUARIO, 1, Criteria::GREATER_THAN);
        $c->add(self::ID_USER, $idUser, Criteria::NOT_EQUAL);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        $c->addAscendingOrderByColumn(self::NAME);
        return self::doSelect($c);
    }
    
    /**
     * Retorna los usuarios 
     * @param type $idUser
     * @return array
     */
    public static function getFuncionarios($idUser)
    {
        $c = new Criteria();
        //$c->add(self::ID_TIPO_USUARIO, 2, Criteria::EQUAL);
        $c->add(self::ID_PROFILE, 2, Criteria::GREATER_THAN);
        $c->addAnd(self::ID_PROFILE, 6, Criteria::NOT_EQUAL);
        
        $c->add(self::ID_USER, $idUser, Criteria::NOT_EQUAL);
        $c->add(self::STATUS, 1, Criteria::EQUAL);
        $c->addAscendingOrderByColumn(self::NAME);
        return self::doSelect($c);
    }
    /**
     * Retorna los usuarios 
     * @param type $idUser
     * @return array
     */
    public static function getGerentes()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NAME);
        $c->add(self::ID_PROFILE, 3, Criteria::EQUAL);
        $c->addOr(self::ID_PROFILE, 7, Criteria::EQUAL);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        $c->addAscendingOrderByColumn(self::NAME);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato[$res['ID_USER']] = $res['NAME'];            
        }
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
    public static function getGerentesYFinancieroYSocios()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NAME);
        // Perfil Comercial
        $c->add(self::ID_PROFILE, 10, Criteria::EQUAL);
        // Perfil Socio
        $c->addOr(self::ID_PROFILE, 7, Criteria::EQUAL);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        $c->addAscendingOrderByColumn(self::NAME);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato[$res['ID_USER']] = $res['NAME'];            
        }
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
    public static function getGerentesResponsable()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NAME);
        $c->add(self::ID_USER, 2, Criteria::GREATER_THAN);
        // Perfil Gerente e Responsável Técnico
        $c->add(self::ID_PROFILE, 9, Criteria::EQUAL);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        $c->addAscendingOrderByColumn(self::NAME);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato[$res['ID_USER']] = $res['NAME'];            
        }
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
    
    public static function getGerentesYAdmnistradoresYSocios()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NAME);
        $c->add(self::ID_USER, 2, Criteria::GREATER_THAN);
        // Perfil Gerente
        $c->add(self::ID_PROFILE, 3, Criteria::EQUAL);
        // Perfil Administradores
        $c->addOr(self::ID_PROFILE, 2, Criteria::EQUAL);
        // Perfil Socio
        $c->addOr(self::ID_PROFILE, 7, Criteria::EQUAL);
        $c->addOr(self::ID_PROFILE, 9, Criteria::EQUAL);
        $c->addOr(self::ID_PROFILE, 10, Criteria::EQUAL);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        $c->addAscendingOrderByColumn(self::NAME);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato[$res['ID_USER']] = $res['NAME'];            
        }
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
    /**
     * Retorna los usuarios 
     * @param type $idUser
     * @return array
     */
    public static function getFuncionariosTarefa($idUser, $id)
    {
        $c = new Criteria();
        $c->add(self::ID_TIPO_USUARIO, 2, Criteria::EQUAL);
        $c->add(self::ID_USER, $idUser, Criteria::NOT_EQUAL);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        //echo $id;exit();
        if($id)
        {
            $c->addJoin(EquipeTarefaPeer::CODIGOFUNCIONARIO, self::ID_USER, Criteria::INNER_JOIN);
            $c->add(EquipeTarefaPeer::CODIGOTAREFA, $id, Criteria::EQUAL);            
            $c->add(self::ID_USER, EquipeTarefaPeer::CODIGOFUNCIONARIO, Criteria::NOT_EQUAL);            
        }
        return self::doSelect($c);
    }

    
    public static function getPesquisaUsuarios($word, $id_tipo_cadastro, $id_subtipo) 
    {
        $valida = new lynxValida();
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::EMAIL);
        
        $c->addJoin(self::ID_USER, CadastroFisicaPeer::ID_USER, Criteria::LEFT_JOIN);
        $c->addJoin(self::ID_USER, CadastroJuridicaPeer::ID_USER, Criteria::LEFT_JOIN);
        
        
        if($id_tipo_cadastro && !$id_subtipo)
        {
            $c->addJoin(self::ID_USER, VinculoUserTipoCadastroPeer::ID_USER, Criteria::LEFT_JOIN);
            $c->add(VinculoUserTipoCadastroPeer::ID_TIPO_CADASTRO, $id_tipo_cadastro, Criteria::EQUAL);
        }elseif($id_tipo_cadastro && $id_subtipo){
            $c->addJoin(self::ID_USER, VinculoUserSubtipoPeer::ID_USER, Criteria::LEFT_JOIN);
            $c->add(VinculoUserSubtipoPeer::ID_TIPO_CADASTRO, $id_tipo_cadastro, Criteria::EQUAL);
            $c->add(VinculoUserSubtipoPeer::ID_SUBTIPO, $id_subtipo, Criteria::EQUAL);
        }
        
        $criterio = $c->getNewCriterion(CadastroFisicaPeer::NOME, '%'.$word.'%', Criteria::LIKE);
        $criterio->addOr($c->getNewCriterion(CadastroJuridicaPeer::NOME_FANTASIA, '%'.$word.'%', Criteria::LIKE));
        $c->add($criterio);
        $c->setLimit(10);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato['id_user'] = $res['ID_USER'];
            $datausuario = $valida->datosTipoUsuario($res['ID_USER']);
            $dato['nome'] = $datausuario['nome'];
            $datos[] = $dato;
            array_push($result,array(
                "id"            => $res['ID_USER'], 
                "label"         => $datausuario['nome'] , 
                "value"         => $datausuario['nome'],
                "telefone"      => $datausuario['ddd_telefone'].' '.$datausuario['telefone'],
                "celular"       => $datausuario['ddd_celular'].' '.$datausuario['celular'],
                "endereco"       => $datausuario['endereco'],
                "email"         => $res['EMAIL']
            ));
        }
        return $result;        
    }
    
    public static function getDataUsuarioSelected($idUser) 
    {
        $valida = new lynxValida();
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::EMAIL);
        $c->add(self::ID_USER, $idUser, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato['id_user'] = $res['ID_USER'];
            $dato['email'] = $res['EMAIL'];
            $datausuario = $valida->datosTipoUsuario($res['ID_USER']);
            $dato['nome'] = $datausuario['nome'];
            $dato['ddd_telefone']   = $datausuario['ddd_telefone'];
            $dato['ddd_celular']    = $datausuario['ddd_celular'];
            $dato['telefone']       = $datausuario['telefone'];
            $dato['celular']        = $datausuario['celular'];
            $dato['endereco']        = $datausuario['endereco'];                   
        }
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
    public static function getTipoUsuario($idUser) 
    {
        $valida = new lynxValida();
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_TIPO_USUARIO);
        $c->add(self::ID_USER, $idUser, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato['tipo'] = $res['ID_TIPO_USUARIO'];            
        }
        if (!empty($dato)) {
            return $dato['tipo'];
        }else {
            return false;
        }
    }
    
    public static function getCodigoVelhio($id)
    {
        $c = new Criteria();
        $c->add(self::CODIGO_VELHIO, $id);
        return self::doSelectOne($c);
    }
    
    public static function getDataCodigoVelhio($id)
    {
        $c = new Criteria();
        $c->add(self::ID_USER, $id);
        return self::doSelectOne($c);
    }
    
    public static function getUsuariosFuncionarios()
    {
        //$perfilFuncionario = LxProfilePeer::getDataByPermalink('funcionario');
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NAME);
        
        //$c->add(self::ID_PROFILE, 1, Criteria::GREATER_THAN);
        $c->add(self::ID_PROFILE, 6 , Criteria::NOT_EQUAL);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        $c->addAscendingOrderByColumn(self::NAME);
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato['id'] = $res['ID_USER'];
            $dato['nome'] = $res['NAME'];
            $datos[] = $dato;
        }
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
    
    public static function getComboUsuariosFuncionarios()
    {
        //$perfilFuncionario = LxProfilePeer::getDataByPermalink('funcionario');
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NAME);
        
        $c->add(self::ID_PROFILE, 2, Criteria::GREATER_EQUAL);
        $c->addAnd(self::ID_PROFILE, 6 , Criteria::NOT_EQUAL);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        $c->addAscendingOrderByColumn(self::NAME);
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato[$res['ID_USER']] = $res['NAME'];
            
            //$datos[] = $dato;
        }
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
    public static function getAdministradores()
    {
        //$perfilFuncionario = LxProfilePeer::getDataByPermalink('funcionario');
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NAME);
        $c->add(self::ID_PROFILE, 2, Criteria::EQUAL);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato['id']     = $res['ID_USER'];
            $dato['nome']   = $res['NAME'];
            $datos[] = $dato;
        }
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
    
    public static function getListaFuncionarios()
    {
        //$perfilFuncionario = LxProfilePeer::getDataByPermalink('funcionario');
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NAME);
        $c->addSelectColumn(CargosPeer::NOME);
        $c->addSelectColumn(RatePeer::RATE);
        //$c->add(self::ID_PROFILE, $perfilFuncionario->getIdProfile(), Criteria::EQUAL);
        $c->addJoin(self::ID_USER, RatePeer::FUNCIONARIO, Criteria::INNER_JOIN);
        $c->addJoin(self::ID_USER, CadastroFisicaPeer::ID_USER, Criteria::INNER_JOIN);
        $c->addJoin(CadastroFisicaPeer::CARGO, CargosPeer::ID, Criteria::INNER_JOIN);
        $c->add(RatePeer::CODIGOPROJETO, 0, Criteria::EQUAL);
        $c->add(self::ID_PROFILE, 2, Criteria::GREATER_THAN);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        $c->addGroupByColumn(self::ID_USER);
        // $c->addDescendingOrderByColumn(RatePeer::RATE);
        // $c->addAscendingOrderByColumn(CargosPeer::NOME);
        $c->addAscendingOrderByColumn(LxUserPeer::NAME);
        
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato['id'] = $res['ID_USER'];
            $dato['nome'] = $res['NAME'];
            $dato['cargo'] = $res['NOME'];
            $dato['preco'] = $res['RATE'];
            $datos[] = $dato;
        }
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
    
    public static function getFuncionariosByBilability($sort, $by)
    {
        
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NAME);
        $c->addSelectColumn(CargosPeer::NOME);
        $c->addSelectColumn(CargosPeer::META);
        
        $c->addJoin(self::ID_USER, CadastroFisicaPeer::ID_USER, Criteria::INNER_JOIN);
        $c->addJoin(CadastroFisicaPeer::CARGO, CargosPeer::ID, Criteria::INNER_JOIN);
        $c->add(self::ID_PROFILE, 2, Criteria::GREATER_THAN);
        $c->add(self::STATUS, 1 ,Criteria::EQUAL);
        
        if($sort)
        {
                // var_dump('by: '.$by);
            switch ($by) {
                case 'desc':
                    // var_dump('case: desc');
                    if($sort == 'name')
                    {
                        $c->addDescendingOrderByColumn(self::NAME);
                    }else if($sort == 'cargo'){
                        $c->addDescendingOrderByColumn(CargosPeer::NOME);
                    }
                    
                    break;
                case 'asc':
                    // var_dump('case: asc');
                    if($sort == 'name')
                    {
                        $c->addAscendingOrderByColumn(self::NAME);
                    }else if($sort == 'cargo'){
                        $c->addAscendingOrderByColumn(CargosPeer::NOME);
                    }
                    
                    break;
                default:
                    // var_dump('default');
                    $c->addAscendingOrderByColumn(self::NAME);
                    break;
            }
        }else{
            // var_dump('else');
            $c->addAscendingOrderByColumn(self::NAME);
        }
        
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $result = array();
        while($res = $rs->fetch())
        {
            $dato['id'] = $res['ID_USER'];
            $dato['nome'] = $res['NAME'];
            $dato['cargo'] = $res['NOME'];
            $dato['meta'] = $res['META'];
            
            $datos[] = $dato;
        }
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
    
    public static function getMetaByBilability($id)
    {
        
        $c = new Criteria();
        $c->clearSelectColumns();
        
        $c->addSelectColumn(CargosPeer::META);
        
        $c->addJoin(self::ID_USER, CadastroFisicaPeer::ID_USER, Criteria::INNER_JOIN);
        $c->addJoin(CadastroFisicaPeer::CARGO, CargosPeer::ID, Criteria::INNER_JOIN);
        
        $c->add(self::ID_USER, $id, Criteria::EQUAL);
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        
        while($res = $rs->fetch())
        {
            $dato['meta'] = $res['META'];
        }
        if (!empty($dato)) {
            return $dato['meta'];
        }else {
            return 0;
        }
    }
    
        /**
      * Recupera la contrasena actual de un usuario
      *
      * @param integer $idUser
      * @return array
      */
    public static function getListUserNames($name)
    {
        $c = new Criteria();
        $c->add(self::NAME, '%'.$name.'%',  Criteria::LIKE);
        return self::doSelect($c);
        //Cambiar por return !empty($profiles) ? $profiles : false;
    }
    

} // LxUserPeer
