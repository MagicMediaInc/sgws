<?php


/**
 * Skeleton subclass for performing query and update operations on the 'lx_profile_module' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Tue Mar  9 09:57:10 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.lynx
 */
class LxProfileModulePeer extends BaseLxProfileModulePeer {

    /**
     *  Lista las credenciales del usuario segun su perfil
     */
    public static function getCredencialUser($id_perfil) {
            $c =  new Criteria();

            //Eliminamos la columnas de seleccion en caso de que esten definidas
            $c->clearSelectColumns();

            //Selecciona las columnas
            $c->addSelectColumn(LxModulePeer::CREDENTIAL);
            $c->addSelectColumn(LxPrivilegePeer::SF_PRIVILEGE);

            $c->addJoin(LxModulePeer::ID_MODULE,self::ID_MODULE,Criteria::INNER_JOIN);
            $c->addJoin(self::ID_PROFILE,LxProfilePeer::ID_PROFILE,Criteria::INNER_JOIN);
            $c->addJoin(self::ID_PRIVILEGE,LxPrivilegePeer::ID_PRIVILEGE,Criteria::INNER_JOIN);

            //Condicion
            $c->add(LxModulePeer::STATUS, 1, Criteria::EQUAL);
            $c->add(LxProfilePeer::STATUS, 1, Criteria::EQUAL);
            $c->add(self::ID_PROFILE, $id_perfil, Criteria::EQUAL);
            //Ejecucion de consulta
            $rs = self::doSelectStmt($c);
            //Se recuperan los registros y se genera arreglo
            while($res = $rs->fetch())
            {
                    $credencial['credential'] = $res['CREDENTIAL']."_".$res['SF_PRIVILEGE'];
                    $credentials[] = $credencial;
            }
            
            if (!empty($credentials)){
                    return $credentials;
            }else{
                    return false;
            }
    }
    /**
     *
     * @param <integer> $id_privelege
     * @param <integer> $id_profile
     * @param <integer> $id_module
     */
    public static function newPermission($id_privelege, $id_profile, $id_module)
    {
        $new = new LxProfileModule();
        $new->setIdPrivilege($id_privelege);
        $new->setIdProfile($id_profile);
        $new->setIdModule($id_module);
        $new->save();
    }
    /**
     * Valida si la permisologia existe
     * @param <integer> $id_privelege
     * @param <integer> $id_profile
     * @param <integer> $id_module
     * @return <integer>
     */
    public static function valPrivilege($id_privelege, $id_profile, $id_module)
    {
        $c = new Criteria();
        $c->add(self::ID_PRIVILEGE, $id_privelege, Criteria::EQUAL);
        $c->add(self::ID_MODULE, $id_module, Criteria::EQUAL);
        $c->add(self::ID_PROFILE, $id_profile, Criteria::EQUAL);
        return self::doCount($c);
    }
    /**
     * Elimina todos los permisos del perfil asociado al modulo
     * @param <integer> $id_profile
     * @param <integer> $id_module
     */
    public static function deleteAllPermissions($id_profile, $id_module)
    {
        $con = Propel::getConnection();
	// select from...
	$c1 = new Criteria();
	$c1->add(self::ID_MODULE, $id_module, Criteria::EQUAL);
        $c1->add(self::ID_PROFILE, $id_profile, Criteria::EQUAL);
	// delete
        BasePeer::doDelete($c1, $con);
    }
    /**
     * Elimina un permiso
     * @param <integer> $id_privelege
     * @param <integer> $id_profile
     * @param <integer> $id_module
     */
    public static function deletePermission($id_privelege, $id_profile, $id_module)
    {
        $con = Propel::getConnection();
	// select from...
	$c1 = new Criteria();
        $c1->add(self::ID_PRIVILEGE, $id_privelege, Criteria::EQUAL);
        $c1->add(self::ID_PROFILE, $id_profile, Criteria::EQUAL);
	$c1->add(self::ID_MODULE, $id_module, Criteria::EQUAL);        
	// delete
        BasePeer::doDelete($c1, $con);
    }
    
    public static function getModuleByProfile($id_perfil) {
            $c =  new Criteria();

            //Eliminamos la columnas de seleccion en caso de que esten definidas
            $c->clearSelectColumns();
            //Selecciona las columnas
            $c->addSelectColumn(LxModulePeer::ID_MODULE);
            $c->addSelectColumn(LxModulePeer::NAME_MODULE);

            $c->addJoin(LxModulePeer::ID_MODULE, self::ID_MODULE, Criteria::INNER_JOIN);
            //Condicion
            $c->add(LxModulePeer::STATUS, 1, Criteria::EQUAL);
            $c->add(LxProfilePeer::STATUS, 1, Criteria::EQUAL);
            $c->add(self::ID_PROFILE, $id_perfil, Criteria::EQUAL);
            $c->add(self::ID_PRIVILEGE, 1, Criteria::EQUAL);
            $c->setDistinct(self::ID_MODULE);
            //Ejecucion de consulta
            $rs = self::doSelectStmt($c);
            //Se recuperan los registros y se genera arreglo
            while($res = $rs->fetch())
            {
                    $dato['id_module']    = $res['ID_MODULE'];
                    $dato['name_module']  = $res['NAME_MODULE'];
                    $datos[] = $dato;
            }
            
            if (!empty($datos)){
                    return $datos;
            }else{
                    return false;
            }
    }
    
    public static function getParentsMenu($id_profile) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas

        $c->addSelectColumn(self::ID_MODULE);
        $c->addSelectColumn(LxModulePeer::NAME_MODULE);
        $c->addSelectColumn(LxModulePeer::SF_MODULE);
        $c->addSelectColumn(LxModulePeer::ID_PARENT);

        //Condicion
        $c->addJoin(LxModulePeer::ID_MODULE, self::ID_MODULE, Criteria::LEFT_JOIN);
        $c->add(self::ID_PROFILE, $id_profile, Criteria::EQUAL);
        $c->add(LxModulePeer::STATUS, 1, Criteria::EQUAL);
        $c->add(LxModulePeer::ID_PARENT, 0, Criteria::EQUAL);
        if(aplication_system::getUser() > 2)
        {
            $c->add(LxModulePeer::ID_MODULE, 7, Criteria::NOT_EQUAL);
            $c->addAnd(LxModulePeer::ID_MODULE, 1, Criteria::NOT_EQUAL);
        }
        
        $c->addAscendingOrderByColumn(LxModulePeer::POSITION);
        $c->addGroupByColumn(self::ID_MODULE);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['module_id'] = $res['ID_MODULE'];
            $dato['module_name'] = $res['NAME_MODULE'];
            $dato['module_sf'] = $res['SF_MODULE'];
            $dato['parent_id'] = $res['ID_PARENT'];
            $datos[] = $dato;
        }
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
} // LxProfileModulePeer
