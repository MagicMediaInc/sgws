<?php


/**
 * Skeleton subclass for performing query and update operations on the 'lx_profile' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Tue Mar  9 09:57:09 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.lynx
 */
class LxProfilePeer extends BaseLxProfilePeer {
    public static function getProfileWithoutAdmin() {
        $c =  new Criteria();
        $c->add(self::ID_PROFILE,2, Criteria::GREATER_EQUAL);
        $c->add(self::STATUS, 1, Criteria::EQUAL);
        return self::doSelect($c);
    }
    
    public static function getProfileWithoutAdminAndRoot() {
        $c =  new Criteria();
        $c->add(self::ID_PROFILE,2, Criteria::GREATER_THAN);
        $c->add(self::STATUS, 1, Criteria::EQUAL);
        return self::doSelect($c);
    }

    public static function getIdSecretariaProfile($idProfile)
    {
        $c =  new Criteria();
        $c->add(self::ID_PROFILE,$idProfile, Criteria::EQUAL);        
        return self::doSelectOne($c);
    }
    
    //Retorna el perfil base del usuario autenticado
    public static function getUserPerfilBase() {
        $user = sfContext::getInstance()->getUser();
        $pf = $user->getAttribute('idProfile');
        $pf = LxProfilePeer::retrieveByPK($pf);
        return $pf->getIdProfile();
        /*if (!$pf->getPadre()) {
          return $pf->getIdProfile();
        } else {
          return $pf->getPadre();
        }*/
    }

    
    public static function getNameProfile($idProfile)
    {
        $c =  new Criteria();
        $c->add(self::ID_PROFILE,$idProfile, Criteria::EQUAL);        
        return self::doSelectOne($c);
    }
    
    public static function checkPermalink($permalink)
    {
        $c =  new Criteria();
        $c->add(self::PERMALINK,$permalink, Criteria::EQUAL);        
        return self::doCount($c);
    }
    
    public static function getDataByPermalink($permalink)
    {
        $c =  new Criteria();
        $c->add(self::PERMALINK,$permalink, Criteria::EQUAL);        
        return self::doSelectOne($c);
    }
    
    public static function findProfiles()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_PROFILE);
        $c->addSelectColumn(self::NAME_PROFILE);
        $c->add(self::ID_PROFILE,2, Criteria::GREATER_THAN);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $sections[0] = 'None';
        while($res = $rs->fetch())
        {
            $sections[$res['ID_PROFILE']] = $res['NAME_PROFILE'];
        }
        if(!empty($sections)){
            return $sections;
        }else{
            return false;
        }
    }
    public static function findProfilesCombo()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_PROFILE);
        $c->addSelectColumn(self::NAME_PROFILE);
        $c->add(self::ID_PROFILE,2, Criteria::GREATER_THAN);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        
        while($res = $rs->fetch())
        {
            $sections[$res['ID_PROFILE']] = $res['NAME_PROFILE'];
        }
        if(!empty($sections)){
            return $sections;
        }else{
            return false;
        }
    }
    public static function findProfilesById($idProfile)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_PROFILE);
        $c->addSelectColumn(self::NAME_PROFILE);
        $c->add(self::ID_PROFILE,$idProfile, Criteria::EQUAL);        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $sections[$res['ID_PROFILE']] = $res['NAME_PROFILE'];
        }
        if(!empty($sections)){
            return $sections;
        }else{
            return false;
        }
    }
    
    
    
} // LxProfilePeer
