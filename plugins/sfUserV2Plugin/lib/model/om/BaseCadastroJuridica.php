<?php

/**
 * Base class that represents a row from the 'cadastro_juridica' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 03/04/2014 12:04:39
 *
 * @package    plugins.sfUserV2Plugin.lib.model.om
 */
abstract class BaseCadastroJuridica extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CadastroJuridicaPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_empresa field.
	 * @var        int
	 */
	protected $id_empresa;

	/**
	 * The value for the codigo_velhio field.
	 * @var        int
	 */
	protected $codigo_velhio;

	/**
	 * The value for the status field.
	 * @var        string
	 */
	protected $status;

	/**
	 * The value for the id_user field.
	 * @var        int
	 */
	protected $id_user;

	/**
	 * The value for the codigo_cliente field.
	 * @var        string
	 */
	protected $codigo_cliente;

	/**
	 * The value for the tipo_cadastro field.
	 * @var        string
	 */
	protected $tipo_cadastro;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the nome_fantasia field.
	 * @var        string
	 */
	protected $nome_fantasia;

	/**
	 * The value for the razao_social field.
	 * @var        string
	 */
	protected $razao_social;

	/**
	 * The value for the cnpj field.
	 * @var        string
	 */
	protected $cnpj;

	/**
	 * The value for the incripcao_estadual field.
	 * @var        string
	 */
	protected $incripcao_estadual;

	/**
	 * The value for the incripcao_ccm field.
	 * @var        string
	 */
	protected $incripcao_ccm;

	/**
	 * The value for the site field.
	 * @var        string
	 */
	protected $site;

	/**
	 * The value for the ddi_telefone field.
	 * @var        string
	 */
	protected $ddi_telefone;

	/**
	 * The value for the ddd_telefone field.
	 * @var        string
	 */
	protected $ddd_telefone;

	/**
	 * The value for the telefone field.
	 * @var        string
	 */
	protected $telefone;

	/**
	 * The value for the ddi_fax field.
	 * @var        string
	 */
	protected $ddi_fax;

	/**
	 * The value for the ddd_fax field.
	 * @var        string
	 */
	protected $ddd_fax;

	/**
	 * The value for the fax field.
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the ddi_celular field.
	 * @var        string
	 */
	protected $ddi_celular;

	/**
	 * The value for the ddd_celular field.
	 * @var        string
	 */
	protected $ddd_celular;

	/**
	 * The value for the celular field.
	 * @var        string
	 */
	protected $celular;

	/**
	 * The value for the endereco field.
	 * @var        string
	 */
	protected $endereco;

	/**
	 * The value for the numero field.
	 * @var        string
	 */
	protected $numero;

	/**
	 * The value for the complemento field.
	 * @var        string
	 */
	protected $complemento;

	/**
	 * The value for the pais field.
	 * @var        string
	 */
	protected $pais;

	/**
	 * The value for the id_uf field.
	 * @var        int
	 */
	protected $id_uf;

	/**
	 * The value for the id_municipio field.
	 * @var        int
	 */
	protected $id_municipio;

	/**
	 * The value for the barrio field.
	 * @var        string
	 */
	protected $barrio;

	/**
	 * The value for the cep field.
	 * @var        string
	 */
	protected $cep;

	/**
	 * The value for the observacoes field.
	 * @var        string
	 */
	protected $observacoes;

	/**
	 * @var        array FornecedorSubtipo[] Collection to store aggregation of FornecedorSubtipo objects.
	 */
	protected $collFornecedorSubtipos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFornecedorSubtipos.
	 */
	private $lastFornecedorSubtipoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'CadastroJuridicaPeer';

	/**
	 * Get the [id_empresa] column value.
	 * 
	 * @return     int
	 */
	public function getIdEmpresa()
	{
		return $this->id_empresa;
	}

	/**
	 * Get the [codigo_velhio] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoVelhio()
	{
		return $this->codigo_velhio;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     string
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [id_user] column value.
	 * 
	 * @return     int
	 */
	public function getIdUser()
	{
		return $this->id_user;
	}

	/**
	 * Get the [codigo_cliente] column value.
	 * 
	 * @return     string
	 */
	public function getCodigoCliente()
	{
		return $this->codigo_cliente;
	}

	/**
	 * Get the [tipo_cadastro] column value.
	 * 
	 * @return     string
	 */
	public function getTipoCadastro()
	{
		return $this->tipo_cadastro;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [nome_fantasia] column value.
	 * 
	 * @return     string
	 */
	public function getNomeFantasia()
	{
		return $this->nome_fantasia;
	}

	/**
	 * Get the [razao_social] column value.
	 * 
	 * @return     string
	 */
	public function getRazaoSocial()
	{
		return $this->razao_social;
	}

	/**
	 * Get the [cnpj] column value.
	 * 
	 * @return     string
	 */
	public function getCnpj()
	{
		return $this->cnpj;
	}

	/**
	 * Get the [incripcao_estadual] column value.
	 * 
	 * @return     string
	 */
	public function getIncripcaoEstadual()
	{
		return $this->incripcao_estadual;
	}

	/**
	 * Get the [incripcao_ccm] column value.
	 * 
	 * @return     string
	 */
	public function getIncripcaoCcm()
	{
		return $this->incripcao_ccm;
	}

	/**
	 * Get the [site] column value.
	 * 
	 * @return     string
	 */
	public function getSite()
	{
		return $this->site;
	}

	/**
	 * Get the [ddi_telefone] column value.
	 * 
	 * @return     string
	 */
	public function getDdiTelefone()
	{
		return $this->ddi_telefone;
	}

	/**
	 * Get the [ddd_telefone] column value.
	 * 
	 * @return     string
	 */
	public function getDddTelefone()
	{
		return $this->ddd_telefone;
	}

	/**
	 * Get the [telefone] column value.
	 * 
	 * @return     string
	 */
	public function getTelefone()
	{
		return $this->telefone;
	}

	/**
	 * Get the [ddi_fax] column value.
	 * 
	 * @return     string
	 */
	public function getDdiFax()
	{
		return $this->ddi_fax;
	}

	/**
	 * Get the [ddd_fax] column value.
	 * 
	 * @return     string
	 */
	public function getDddFax()
	{
		return $this->ddd_fax;
	}

	/**
	 * Get the [fax] column value.
	 * 
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [ddi_celular] column value.
	 * 
	 * @return     string
	 */
	public function getDdiCelular()
	{
		return $this->ddi_celular;
	}

	/**
	 * Get the [ddd_celular] column value.
	 * 
	 * @return     string
	 */
	public function getDddCelular()
	{
		return $this->ddd_celular;
	}

	/**
	 * Get the [celular] column value.
	 * 
	 * @return     string
	 */
	public function getCelular()
	{
		return $this->celular;
	}

	/**
	 * Get the [endereco] column value.
	 * 
	 * @return     string
	 */
	public function getEndereco()
	{
		return $this->endereco;
	}

	/**
	 * Get the [numero] column value.
	 * 
	 * @return     string
	 */
	public function getNumero()
	{
		return $this->numero;
	}

	/**
	 * Get the [complemento] column value.
	 * 
	 * @return     string
	 */
	public function getComplemento()
	{
		return $this->complemento;
	}

	/**
	 * Get the [pais] column value.
	 * 
	 * @return     string
	 */
	public function getPais()
	{
		return $this->pais;
	}

	/**
	 * Get the [id_uf] column value.
	 * 
	 * @return     int
	 */
	public function getIdUf()
	{
		return $this->id_uf;
	}

	/**
	 * Get the [id_municipio] column value.
	 * 
	 * @return     int
	 */
	public function getIdMunicipio()
	{
		return $this->id_municipio;
	}

	/**
	 * Get the [barrio] column value.
	 * 
	 * @return     string
	 */
	public function getBarrio()
	{
		return $this->barrio;
	}

	/**
	 * Get the [cep] column value.
	 * 
	 * @return     string
	 */
	public function getCep()
	{
		return $this->cep;
	}

	/**
	 * Get the [observacoes] column value.
	 * 
	 * @return     string
	 */
	public function getObservacoes()
	{
		return $this->observacoes;
	}

	/**
	 * Set the value of [id_empresa] column.
	 * 
	 * @param      int $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setIdEmpresa($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_empresa !== $v) {
			$this->id_empresa = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::ID_EMPRESA;
		}

		return $this;
	} // setIdEmpresa()

	/**
	 * Set the value of [codigo_velhio] column.
	 * 
	 * @param      int $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setCodigoVelhio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigo_velhio !== $v) {
			$this->codigo_velhio = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::CODIGO_VELHIO;
		}

		return $this;
	} // setCodigoVelhio()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [id_user] column.
	 * 
	 * @param      int $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setIdUser($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_user !== $v) {
			$this->id_user = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::ID_USER;
		}

		return $this;
	} // setIdUser()

	/**
	 * Set the value of [codigo_cliente] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setCodigoCliente($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigo_cliente !== $v) {
			$this->codigo_cliente = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::CODIGO_CLIENTE;
		}

		return $this;
	} // setCodigoCliente()

	/**
	 * Set the value of [tipo_cadastro] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setTipoCadastro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo_cadastro !== $v) {
			$this->tipo_cadastro = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::TIPO_CADASTRO;
		}

		return $this;
	} // setTipoCadastro()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [nome_fantasia] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setNomeFantasia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nome_fantasia !== $v) {
			$this->nome_fantasia = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::NOME_FANTASIA;
		}

		return $this;
	} // setNomeFantasia()

	/**
	 * Set the value of [razao_social] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setRazaoSocial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->razao_social !== $v) {
			$this->razao_social = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::RAZAO_SOCIAL;
		}

		return $this;
	} // setRazaoSocial()

	/**
	 * Set the value of [cnpj] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setCnpj($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cnpj !== $v) {
			$this->cnpj = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::CNPJ;
		}

		return $this;
	} // setCnpj()

	/**
	 * Set the value of [incripcao_estadual] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setIncripcaoEstadual($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->incripcao_estadual !== $v) {
			$this->incripcao_estadual = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::INCRIPCAO_ESTADUAL;
		}

		return $this;
	} // setIncripcaoEstadual()

	/**
	 * Set the value of [incripcao_ccm] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setIncripcaoCcm($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->incripcao_ccm !== $v) {
			$this->incripcao_ccm = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::INCRIPCAO_CCM;
		}

		return $this;
	} // setIncripcaoCcm()

	/**
	 * Set the value of [site] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setSite($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->site !== $v) {
			$this->site = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::SITE;
		}

		return $this;
	} // setSite()

	/**
	 * Set the value of [ddi_telefone] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setDdiTelefone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ddi_telefone !== $v) {
			$this->ddi_telefone = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::DDI_TELEFONE;
		}

		return $this;
	} // setDdiTelefone()

	/**
	 * Set the value of [ddd_telefone] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setDddTelefone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ddd_telefone !== $v) {
			$this->ddd_telefone = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::DDD_TELEFONE;
		}

		return $this;
	} // setDddTelefone()

	/**
	 * Set the value of [telefone] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setTelefone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefone !== $v) {
			$this->telefone = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::TELEFONE;
		}

		return $this;
	} // setTelefone()

	/**
	 * Set the value of [ddi_fax] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setDdiFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ddi_fax !== $v) {
			$this->ddi_fax = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::DDI_FAX;
		}

		return $this;
	} // setDdiFax()

	/**
	 * Set the value of [ddd_fax] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setDddFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ddd_fax !== $v) {
			$this->ddd_fax = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::DDD_FAX;
		}

		return $this;
	} // setDddFax()

	/**
	 * Set the value of [fax] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v) {
			$this->fax = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Set the value of [ddi_celular] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setDdiCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ddi_celular !== $v) {
			$this->ddi_celular = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::DDI_CELULAR;
		}

		return $this;
	} // setDdiCelular()

	/**
	 * Set the value of [ddd_celular] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setDddCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ddd_celular !== $v) {
			$this->ddd_celular = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::DDD_CELULAR;
		}

		return $this;
	} // setDddCelular()

	/**
	 * Set the value of [celular] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celular !== $v) {
			$this->celular = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::CELULAR;
		}

		return $this;
	} // setCelular()

	/**
	 * Set the value of [endereco] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setEndereco($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->endereco !== $v) {
			$this->endereco = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::ENDERECO;
		}

		return $this;
	} // setEndereco()

	/**
	 * Set the value of [numero] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setNumero($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numero !== $v) {
			$this->numero = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::NUMERO;
		}

		return $this;
	} // setNumero()

	/**
	 * Set the value of [complemento] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setComplemento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->complemento !== $v) {
			$this->complemento = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::COMPLEMENTO;
		}

		return $this;
	} // setComplemento()

	/**
	 * Set the value of [pais] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setPais($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pais !== $v) {
			$this->pais = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::PAIS;
		}

		return $this;
	} // setPais()

	/**
	 * Set the value of [id_uf] column.
	 * 
	 * @param      int $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setIdUf($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_uf !== $v) {
			$this->id_uf = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::ID_UF;
		}

		return $this;
	} // setIdUf()

	/**
	 * Set the value of [id_municipio] column.
	 * 
	 * @param      int $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setIdMunicipio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_municipio !== $v) {
			$this->id_municipio = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::ID_MUNICIPIO;
		}

		return $this;
	} // setIdMunicipio()

	/**
	 * Set the value of [barrio] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setBarrio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->barrio !== $v) {
			$this->barrio = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::BARRIO;
		}

		return $this;
	} // setBarrio()

	/**
	 * Set the value of [cep] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setCep($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cep !== $v) {
			$this->cep = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::CEP;
		}

		return $this;
	} // setCep()

	/**
	 * Set the value of [observacoes] column.
	 * 
	 * @param      string $v new value
	 * @return     CadastroJuridica The current object (for fluent API support)
	 */
	public function setObservacoes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->observacoes !== $v) {
			$this->observacoes = $v;
			$this->modifiedColumns[] = CadastroJuridicaPeer::OBSERVACOES;
		}

		return $this;
	} // setObservacoes()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_empresa = (isset($row[$startcol + 0]) && $row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->codigo_velhio = (isset($row[$startcol + 1]) && $row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->status = (isset($row[$startcol + 2]) && $row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->id_user = (isset($row[$startcol + 3]) && $row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->codigo_cliente = (isset($row[$startcol + 4]) && $row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->tipo_cadastro = (isset($row[$startcol + 5]) && $row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->email = (isset($row[$startcol + 6]) && $row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->nome_fantasia = (isset($row[$startcol + 7]) && $row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->razao_social = (isset($row[$startcol + 8]) && $row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->cnpj = (isset($row[$startcol + 9]) && $row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->incripcao_estadual = (isset($row[$startcol + 10]) && $row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->incripcao_ccm = (isset($row[$startcol + 11]) && $row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->site = (isset($row[$startcol + 12]) && $row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->ddi_telefone = (isset($row[$startcol + 13]) && $row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->ddd_telefone = (isset($row[$startcol + 14]) && $row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->telefone = (isset($row[$startcol + 15]) && $row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->ddi_fax = (isset($row[$startcol + 16]) && $row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->ddd_fax = (isset($row[$startcol + 17]) && $row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->fax = (isset($row[$startcol + 18]) && $row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->ddi_celular = (isset($row[$startcol + 19]) && $row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->ddd_celular = (isset($row[$startcol + 20]) && $row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->celular = (isset($row[$startcol + 21]) && $row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->endereco = (isset($row[$startcol + 22]) && $row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->numero = (isset($row[$startcol + 23]) && $row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->complemento = (isset($row[$startcol + 24]) && $row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->pais = (isset($row[$startcol + 25]) && $row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->id_uf = (isset($row[$startcol + 26]) && $row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->id_municipio = (isset($row[$startcol + 27]) && $row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->barrio = (isset($row[$startcol + 28]) && $row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->cep = (isset($row[$startcol + 29]) && $row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->observacoes = (isset($row[$startcol + 30]) && $row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 31; // 31 = CadastroJuridicaPeer::NUM_COLUMNS - CadastroJuridicaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating CadastroJuridica object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CadastroJuridicaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CadastroJuridicaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collFornecedorSubtipos = null;
			$this->lastFornecedorSubtipoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CadastroJuridicaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCadastroJuridica:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				CadastroJuridicaPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCadastroJuridica:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CadastroJuridicaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCadastroJuridica:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCadastroJuridica:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				CadastroJuridicaPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CadastroJuridicaPeer::ID_EMPRESA;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CadastroJuridicaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdEmpresa($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CadastroJuridicaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collFornecedorSubtipos !== null) {
				foreach ($this->collFornecedorSubtipos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = CadastroJuridicaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collFornecedorSubtipos !== null) {
					foreach ($this->collFornecedorSubtipos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CadastroJuridicaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdEmpresa();
				break;
			case 1:
				return $this->getCodigoVelhio();
				break;
			case 2:
				return $this->getStatus();
				break;
			case 3:
				return $this->getIdUser();
				break;
			case 4:
				return $this->getCodigoCliente();
				break;
			case 5:
				return $this->getTipoCadastro();
				break;
			case 6:
				return $this->getEmail();
				break;
			case 7:
				return $this->getNomeFantasia();
				break;
			case 8:
				return $this->getRazaoSocial();
				break;
			case 9:
				return $this->getCnpj();
				break;
			case 10:
				return $this->getIncripcaoEstadual();
				break;
			case 11:
				return $this->getIncripcaoCcm();
				break;
			case 12:
				return $this->getSite();
				break;
			case 13:
				return $this->getDdiTelefone();
				break;
			case 14:
				return $this->getDddTelefone();
				break;
			case 15:
				return $this->getTelefone();
				break;
			case 16:
				return $this->getDdiFax();
				break;
			case 17:
				return $this->getDddFax();
				break;
			case 18:
				return $this->getFax();
				break;
			case 19:
				return $this->getDdiCelular();
				break;
			case 20:
				return $this->getDddCelular();
				break;
			case 21:
				return $this->getCelular();
				break;
			case 22:
				return $this->getEndereco();
				break;
			case 23:
				return $this->getNumero();
				break;
			case 24:
				return $this->getComplemento();
				break;
			case 25:
				return $this->getPais();
				break;
			case 26:
				return $this->getIdUf();
				break;
			case 27:
				return $this->getIdMunicipio();
				break;
			case 28:
				return $this->getBarrio();
				break;
			case 29:
				return $this->getCep();
				break;
			case 30:
				return $this->getObservacoes();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CadastroJuridicaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdEmpresa(),
			$keys[1] => $this->getCodigoVelhio(),
			$keys[2] => $this->getStatus(),
			$keys[3] => $this->getIdUser(),
			$keys[4] => $this->getCodigoCliente(),
			$keys[5] => $this->getTipoCadastro(),
			$keys[6] => $this->getEmail(),
			$keys[7] => $this->getNomeFantasia(),
			$keys[8] => $this->getRazaoSocial(),
			$keys[9] => $this->getCnpj(),
			$keys[10] => $this->getIncripcaoEstadual(),
			$keys[11] => $this->getIncripcaoCcm(),
			$keys[12] => $this->getSite(),
			$keys[13] => $this->getDdiTelefone(),
			$keys[14] => $this->getDddTelefone(),
			$keys[15] => $this->getTelefone(),
			$keys[16] => $this->getDdiFax(),
			$keys[17] => $this->getDddFax(),
			$keys[18] => $this->getFax(),
			$keys[19] => $this->getDdiCelular(),
			$keys[20] => $this->getDddCelular(),
			$keys[21] => $this->getCelular(),
			$keys[22] => $this->getEndereco(),
			$keys[23] => $this->getNumero(),
			$keys[24] => $this->getComplemento(),
			$keys[25] => $this->getPais(),
			$keys[26] => $this->getIdUf(),
			$keys[27] => $this->getIdMunicipio(),
			$keys[28] => $this->getBarrio(),
			$keys[29] => $this->getCep(),
			$keys[30] => $this->getObservacoes(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CadastroJuridicaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdEmpresa($value);
				break;
			case 1:
				$this->setCodigoVelhio($value);
				break;
			case 2:
				$this->setStatus($value);
				break;
			case 3:
				$this->setIdUser($value);
				break;
			case 4:
				$this->setCodigoCliente($value);
				break;
			case 5:
				$this->setTipoCadastro($value);
				break;
			case 6:
				$this->setEmail($value);
				break;
			case 7:
				$this->setNomeFantasia($value);
				break;
			case 8:
				$this->setRazaoSocial($value);
				break;
			case 9:
				$this->setCnpj($value);
				break;
			case 10:
				$this->setIncripcaoEstadual($value);
				break;
			case 11:
				$this->setIncripcaoCcm($value);
				break;
			case 12:
				$this->setSite($value);
				break;
			case 13:
				$this->setDdiTelefone($value);
				break;
			case 14:
				$this->setDddTelefone($value);
				break;
			case 15:
				$this->setTelefone($value);
				break;
			case 16:
				$this->setDdiFax($value);
				break;
			case 17:
				$this->setDddFax($value);
				break;
			case 18:
				$this->setFax($value);
				break;
			case 19:
				$this->setDdiCelular($value);
				break;
			case 20:
				$this->setDddCelular($value);
				break;
			case 21:
				$this->setCelular($value);
				break;
			case 22:
				$this->setEndereco($value);
				break;
			case 23:
				$this->setNumero($value);
				break;
			case 24:
				$this->setComplemento($value);
				break;
			case 25:
				$this->setPais($value);
				break;
			case 26:
				$this->setIdUf($value);
				break;
			case 27:
				$this->setIdMunicipio($value);
				break;
			case 28:
				$this->setBarrio($value);
				break;
			case 29:
				$this->setCep($value);
				break;
			case 30:
				$this->setObservacoes($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CadastroJuridicaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdEmpresa($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCodigoVelhio($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setStatus($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIdUser($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCodigoCliente($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTipoCadastro($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setEmail($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setNomeFantasia($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setRazaoSocial($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCnpj($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setIncripcaoEstadual($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setIncripcaoCcm($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setSite($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDdiTelefone($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDddTelefone($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTelefone($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDdiFax($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDddFax($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setFax($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setDdiCelular($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setDddCelular($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCelular($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setEndereco($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setNumero($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setComplemento($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setPais($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setIdUf($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setIdMunicipio($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setBarrio($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setCep($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setObservacoes($arr[$keys[30]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CadastroJuridicaPeer::DATABASE_NAME);

		if ($this->isColumnModified(CadastroJuridicaPeer::ID_EMPRESA)) $criteria->add(CadastroJuridicaPeer::ID_EMPRESA, $this->id_empresa);
		if ($this->isColumnModified(CadastroJuridicaPeer::CODIGO_VELHIO)) $criteria->add(CadastroJuridicaPeer::CODIGO_VELHIO, $this->codigo_velhio);
		if ($this->isColumnModified(CadastroJuridicaPeer::STATUS)) $criteria->add(CadastroJuridicaPeer::STATUS, $this->status);
		if ($this->isColumnModified(CadastroJuridicaPeer::ID_USER)) $criteria->add(CadastroJuridicaPeer::ID_USER, $this->id_user);
		if ($this->isColumnModified(CadastroJuridicaPeer::CODIGO_CLIENTE)) $criteria->add(CadastroJuridicaPeer::CODIGO_CLIENTE, $this->codigo_cliente);
		if ($this->isColumnModified(CadastroJuridicaPeer::TIPO_CADASTRO)) $criteria->add(CadastroJuridicaPeer::TIPO_CADASTRO, $this->tipo_cadastro);
		if ($this->isColumnModified(CadastroJuridicaPeer::EMAIL)) $criteria->add(CadastroJuridicaPeer::EMAIL, $this->email);
		if ($this->isColumnModified(CadastroJuridicaPeer::NOME_FANTASIA)) $criteria->add(CadastroJuridicaPeer::NOME_FANTASIA, $this->nome_fantasia);
		if ($this->isColumnModified(CadastroJuridicaPeer::RAZAO_SOCIAL)) $criteria->add(CadastroJuridicaPeer::RAZAO_SOCIAL, $this->razao_social);
		if ($this->isColumnModified(CadastroJuridicaPeer::CNPJ)) $criteria->add(CadastroJuridicaPeer::CNPJ, $this->cnpj);
		if ($this->isColumnModified(CadastroJuridicaPeer::INCRIPCAO_ESTADUAL)) $criteria->add(CadastroJuridicaPeer::INCRIPCAO_ESTADUAL, $this->incripcao_estadual);
		if ($this->isColumnModified(CadastroJuridicaPeer::INCRIPCAO_CCM)) $criteria->add(CadastroJuridicaPeer::INCRIPCAO_CCM, $this->incripcao_ccm);
		if ($this->isColumnModified(CadastroJuridicaPeer::SITE)) $criteria->add(CadastroJuridicaPeer::SITE, $this->site);
		if ($this->isColumnModified(CadastroJuridicaPeer::DDI_TELEFONE)) $criteria->add(CadastroJuridicaPeer::DDI_TELEFONE, $this->ddi_telefone);
		if ($this->isColumnModified(CadastroJuridicaPeer::DDD_TELEFONE)) $criteria->add(CadastroJuridicaPeer::DDD_TELEFONE, $this->ddd_telefone);
		if ($this->isColumnModified(CadastroJuridicaPeer::TELEFONE)) $criteria->add(CadastroJuridicaPeer::TELEFONE, $this->telefone);
		if ($this->isColumnModified(CadastroJuridicaPeer::DDI_FAX)) $criteria->add(CadastroJuridicaPeer::DDI_FAX, $this->ddi_fax);
		if ($this->isColumnModified(CadastroJuridicaPeer::DDD_FAX)) $criteria->add(CadastroJuridicaPeer::DDD_FAX, $this->ddd_fax);
		if ($this->isColumnModified(CadastroJuridicaPeer::FAX)) $criteria->add(CadastroJuridicaPeer::FAX, $this->fax);
		if ($this->isColumnModified(CadastroJuridicaPeer::DDI_CELULAR)) $criteria->add(CadastroJuridicaPeer::DDI_CELULAR, $this->ddi_celular);
		if ($this->isColumnModified(CadastroJuridicaPeer::DDD_CELULAR)) $criteria->add(CadastroJuridicaPeer::DDD_CELULAR, $this->ddd_celular);
		if ($this->isColumnModified(CadastroJuridicaPeer::CELULAR)) $criteria->add(CadastroJuridicaPeer::CELULAR, $this->celular);
		if ($this->isColumnModified(CadastroJuridicaPeer::ENDERECO)) $criteria->add(CadastroJuridicaPeer::ENDERECO, $this->endereco);
		if ($this->isColumnModified(CadastroJuridicaPeer::NUMERO)) $criteria->add(CadastroJuridicaPeer::NUMERO, $this->numero);
		if ($this->isColumnModified(CadastroJuridicaPeer::COMPLEMENTO)) $criteria->add(CadastroJuridicaPeer::COMPLEMENTO, $this->complemento);
		if ($this->isColumnModified(CadastroJuridicaPeer::PAIS)) $criteria->add(CadastroJuridicaPeer::PAIS, $this->pais);
		if ($this->isColumnModified(CadastroJuridicaPeer::ID_UF)) $criteria->add(CadastroJuridicaPeer::ID_UF, $this->id_uf);
		if ($this->isColumnModified(CadastroJuridicaPeer::ID_MUNICIPIO)) $criteria->add(CadastroJuridicaPeer::ID_MUNICIPIO, $this->id_municipio);
		if ($this->isColumnModified(CadastroJuridicaPeer::BARRIO)) $criteria->add(CadastroJuridicaPeer::BARRIO, $this->barrio);
		if ($this->isColumnModified(CadastroJuridicaPeer::CEP)) $criteria->add(CadastroJuridicaPeer::CEP, $this->cep);
		if ($this->isColumnModified(CadastroJuridicaPeer::OBSERVACOES)) $criteria->add(CadastroJuridicaPeer::OBSERVACOES, $this->observacoes);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CadastroJuridicaPeer::DATABASE_NAME);

		$criteria->add(CadastroJuridicaPeer::ID_EMPRESA, $this->id_empresa);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdEmpresa();
	}

	/**
	 * Generic method to set the primary key (id_empresa column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdEmpresa($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of CadastroJuridica (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCodigoVelhio($this->codigo_velhio);

		$copyObj->setStatus($this->status);

		$copyObj->setIdUser($this->id_user);

		$copyObj->setCodigoCliente($this->codigo_cliente);

		$copyObj->setTipoCadastro($this->tipo_cadastro);

		$copyObj->setEmail($this->email);

		$copyObj->setNomeFantasia($this->nome_fantasia);

		$copyObj->setRazaoSocial($this->razao_social);

		$copyObj->setCnpj($this->cnpj);

		$copyObj->setIncripcaoEstadual($this->incripcao_estadual);

		$copyObj->setIncripcaoCcm($this->incripcao_ccm);

		$copyObj->setSite($this->site);

		$copyObj->setDdiTelefone($this->ddi_telefone);

		$copyObj->setDddTelefone($this->ddd_telefone);

		$copyObj->setTelefone($this->telefone);

		$copyObj->setDdiFax($this->ddi_fax);

		$copyObj->setDddFax($this->ddd_fax);

		$copyObj->setFax($this->fax);

		$copyObj->setDdiCelular($this->ddi_celular);

		$copyObj->setDddCelular($this->ddd_celular);

		$copyObj->setCelular($this->celular);

		$copyObj->setEndereco($this->endereco);

		$copyObj->setNumero($this->numero);

		$copyObj->setComplemento($this->complemento);

		$copyObj->setPais($this->pais);

		$copyObj->setIdUf($this->id_uf);

		$copyObj->setIdMunicipio($this->id_municipio);

		$copyObj->setBarrio($this->barrio);

		$copyObj->setCep($this->cep);

		$copyObj->setObservacoes($this->observacoes);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getFornecedorSubtipos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFornecedorSubtipo($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdEmpresa(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     CadastroJuridica Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CadastroJuridicaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CadastroJuridicaPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collFornecedorSubtipos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFornecedorSubtipos()
	 */
	public function clearFornecedorSubtipos()
	{
		$this->collFornecedorSubtipos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFornecedorSubtipos collection (array).
	 *
	 * By default this just sets the collFornecedorSubtipos collection to an empty array (like clearcollFornecedorSubtipos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFornecedorSubtipos()
	{
		$this->collFornecedorSubtipos = array();
	}

	/**
	 * Gets an array of FornecedorSubtipo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this CadastroJuridica has previously been saved, it will retrieve
	 * related FornecedorSubtipos from storage. If this CadastroJuridica is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FornecedorSubtipo[]
	 * @throws     PropelException
	 */
	public function getFornecedorSubtipos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CadastroJuridicaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFornecedorSubtipos === null) {
			if ($this->isNew()) {
			   $this->collFornecedorSubtipos = array();
			} else {

				$criteria->add(FornecedorSubtipoPeer::ID_EMPRESA, $this->id_empresa);

				FornecedorSubtipoPeer::addSelectColumns($criteria);
				$this->collFornecedorSubtipos = FornecedorSubtipoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FornecedorSubtipoPeer::ID_EMPRESA, $this->id_empresa);

				FornecedorSubtipoPeer::addSelectColumns($criteria);
				if (!isset($this->lastFornecedorSubtipoCriteria) || !$this->lastFornecedorSubtipoCriteria->equals($criteria)) {
					$this->collFornecedorSubtipos = FornecedorSubtipoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFornecedorSubtipoCriteria = $criteria;
		return $this->collFornecedorSubtipos;
	}

	/**
	 * Returns the number of related FornecedorSubtipo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FornecedorSubtipo objects.
	 * @throws     PropelException
	 */
	public function countFornecedorSubtipos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CadastroJuridicaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFornecedorSubtipos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FornecedorSubtipoPeer::ID_EMPRESA, $this->id_empresa);

				$count = FornecedorSubtipoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FornecedorSubtipoPeer::ID_EMPRESA, $this->id_empresa);

				if (!isset($this->lastFornecedorSubtipoCriteria) || !$this->lastFornecedorSubtipoCriteria->equals($criteria)) {
					$count = FornecedorSubtipoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFornecedorSubtipos);
				}
			} else {
				$count = count($this->collFornecedorSubtipos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FornecedorSubtipo object to this object
	 * through the FornecedorSubtipo foreign key attribute.
	 *
	 * @param      FornecedorSubtipo $l FornecedorSubtipo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFornecedorSubtipo(FornecedorSubtipo $l)
	{
		if ($this->collFornecedorSubtipos === null) {
			$this->initFornecedorSubtipos();
		}
		if (!in_array($l, $this->collFornecedorSubtipos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFornecedorSubtipos, $l);
			$l->setCadastroJuridica($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this CadastroJuridica is new, it will return
	 * an empty collection; or if this CadastroJuridica has previously
	 * been saved, it will retrieve related FornecedorSubtipos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in CadastroJuridica.
	 */
	public function getFornecedorSubtiposJoinSubtipoUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CadastroJuridicaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFornecedorSubtipos === null) {
			if ($this->isNew()) {
				$this->collFornecedorSubtipos = array();
			} else {

				$criteria->add(FornecedorSubtipoPeer::ID_EMPRESA, $this->id_empresa);

				$this->collFornecedorSubtipos = FornecedorSubtipoPeer::doSelectJoinSubtipoUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FornecedorSubtipoPeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastFornecedorSubtipoCriteria) || !$this->lastFornecedorSubtipoCriteria->equals($criteria)) {
				$this->collFornecedorSubtipos = FornecedorSubtipoPeer::doSelectJoinSubtipoUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastFornecedorSubtipoCriteria = $criteria;

		return $this->collFornecedorSubtipos;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collFornecedorSubtipos) {
				foreach ((array) $this->collFornecedorSubtipos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collFornecedorSubtipos = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseCadastroJuridica:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseCadastroJuridica::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseCadastroJuridica
