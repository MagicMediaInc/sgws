<?php


/**
 * Skeleton subclass for performing query and update operations on the 'cadastro_fisica' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 08/03/2013 21:37:42
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.sgws
 */
class CadastroFisicaPeer extends BaseCadastroFisicaPeer {
    /**
     * Retorna el nombre del usuario fisico
     * @param integer $idUser
     * @return array
     */
    public static function getNamePessoa($idUser)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::NOME);
        $c->addSelectColumn(self::DDD_TELEFONE);
        $c->addSelectColumn(self::DDD_CELULAR);
        $c->addSelectColumn(self::TELEFONE);
        $c->addSelectColumn(self::CELULAR);
        $c->addSelectColumn(self::ENDERECO);
        
        $c->add(self::ID_USER, $idUser, Criteria::EQUAL);
        
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo            
        while($res = $rs->fetch())
        {
            $dato['nome']           = $res['NOME'];            
            $dato['ddd_telefone']   = $res['DDD_TELEFONE'];            
            $dato['ddd_celular']    = $res['DDD_CELULAR'];            
            $dato['telefone']       = $res['TELEFONE'];            
            $dato['celular']        = $res['CELULAR'];            
            $dato['endereco']        = $res['ENDERECO'];            
        }            
        if (!empty($dato)){
            return $dato;
        }else{
            return false;
        }
    }
    
     /**
     * Retorna el nombre del usuario fisico
     * @param integer $idUser
     * @return array
     */
    public static function getNameClientes()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::NOME);
        //$c->add(self::ID_USER, $idUser, Criteria::EQUAL);
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo 
        $datos = array();
        while($res = $rs->fetch())
        {
           //$dato['nome'] = $res['NOME'];  
           $datos[] = $res['NOME'];
        }            
        if (!empty($datos)){
            return $datos;
        }else{
            return false;
        }
    }
    /**
     * Retorna el id ppal del usuario fisico
     * @param integer $idUser
     * @return array
     */
    public static function getIdPPal($idUser)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_CADASTRO_FISICA);        
        $c->add(self::ID_USER, $idUser, Criteria::EQUAL);        
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo            
        while($res = $rs->fetch())
        {
            $dato['id'] = $res['ID_CADASTRO_FISICA'];            
        }            
        if (!empty($dato)){
            return $dato;
        }else{
            return false;
        }
    }
    
    /**
     * Retorna el nombre del usuario juridico
     * @param integer $idUser
     * @return array
     */
    public static function getDataByCpf($cpf)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(self::NOME);
        
        $c->add(self::CPF, $cpf, Criteria::EQUAL);
        
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo            
        while($res = $rs->fetch())
        {
            $dato['id_user']        = $res['ID_USER'];            
            $dato['nome']           = $res['NOME'];            
        }            
        if (!empty($dato)){
            return $dato;
        }else{
            return false;
        }
    }
    
    public static function getCargos()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::CARGO);
        
        
        $c->addGroupByColumn(self::CARGO);
        
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo            
        while($res = $rs->fetch())
        {
            $dato['cargo']        = $res['CARGO'];
            $datos[] = $dato;
        }            
        if (!empty($datos)){
            return $datos;
        }else{
            return false;
        }
    }
    
    public static function getCheckDataByCpf($cpf)
    {
        $c = new Criteria();
        $c->add(self::CPF, $cpf, Criteria::EQUAL);
        return self::doCount($c);
        
    }
    
    public static function actualizaCargo($cargo, $id)
    {
        $con = Propel::getConnection();
 
        // select from...
        $c1 = new Criteria();
        $c1->add(self::CARGO, $cargo, Criteria::EQUAL);

        // update set
        $c2 = new Criteria();
        $c2->add(self::CARGO, $id);

        BasePeer::doUpdate($c1, $c2, $con);
    }

} // CadastroFisicaPeer
