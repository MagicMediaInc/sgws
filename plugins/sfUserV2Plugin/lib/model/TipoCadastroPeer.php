<?php


/**
 * Skeleton subclass for performing query and update operations on the 'tipo_cadastro' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 02/02/2013 17:55:51
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.sgws
 */
class TipoCadastroPeer extends BaseTipoCadastroPeer {
    
    public static function getListTypeCadastro($tipo = '') {
        $c =  new Criteria();
        $c->add(self::ID_TIPO_CADASTRO, 1, Criteria::GREATER_THAN);
        if($tipo != 'all')
        {
            $c->add(self::SIGN_IN, '1', Criteria::EQUAL);
        }
        
        
        return self::doSelect($c);
    }
    

    public static function getHydrateList()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_TIPO_CADASTRO);
        $c->addSelectColumn(self::TIPO_CADASTRO);
        $c->add(self::ID_TIPO_CADASTRO,1, Criteria::GREATER_THAN);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $sections[''] = 'Selecione Tipo de Pessoa';
        while($res = $rs->fetch())
        {
            $sections[$res['ID_TIPO_CADASTRO']] = $res['TIPO_CADASTRO'];
        }
        if(!empty($sections)){
            return $sections;
        }else{
            return false;
        }
    }
    
    public static function getHydrateListCombo()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_TIPO_CADASTRO);
        $c->addSelectColumn(self::TIPO_CADASTRO);
        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $sections[''] = 'Selecione Tipo de Pessoa';
        while($res = $rs->fetch())
        {
            $sections[$res['ID_TIPO_CADASTRO']] = $res['TIPO_CADASTRO'];
        }
        if(!empty($sections)){
            return $sections;
        }else{
            return false;
        }
    }
    
    public static function getNameTipoCadastro($id)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::TIPO_CADASTRO);
        $c->add(self::ID_TIPO_CADASTRO,$id, Criteria::EQUAL);
        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo        
        while($res = $rs->fetch())
        {
            $dato['tipo'] = $res['TIPO_CADASTRO'];
        }
        if(!empty($dato)){
            return $dato;
        }else{
            return false;
        }
    }
    
    public static function listSubTiposPaiByTC($id_tc, $id_pai = 0)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(SubtipoUserPeer::ID_SUBTIPO);        
        $c->addSelectColumn(SubtipoUserPeer::SUBTIPO);        
        //Filtros
        $c->add(SubtipoUserPeer::ID_PARENT,$id_pai,Criteria::EQUAL);
        $c->add(SubtipoUserPeer::ID_TIPO_CADASTRO, $id_tc, Criteria::EQUAL);
        $c->addAscendingOrderByColumn(SubtipoUserPeer::POSITION);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $dato['id_subtipo'] = $res['ID_SUBTIPO'];            
            $dato['subtipo'] = $res['SUBTIPO'];            
            $datos[] = $dato;
        }
        if(!empty($datos)){
            return $datos;
        }else{
            return false;
        }            
    }

} // TipoCadastroPeer
