<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sf_archivos_seccion' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 06/08/2012 20:48:48
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    plugins.sfLynxSectionPlugin.lib.model
 */
class SfArchivosSeccionPeer extends BaseSfArchivosSeccionPeer {

      public static function archivosSeccion($id_section) {

        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_ARCHIVO_SECCION);
        $c->addSelectColumn(self::TITULO_ARCHIVO);
        $c->addSelectColumn(self::ARCHIVO);
        //Filtros
        $c->add(self::ID_SECCION,$id_section, Criteria::EQUAL);

        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        if ($rs->rowCount()==0) {
            return false;
        }else {
            while ($res=$rs->fetch()) {
                $infoSeccion['id_archivo']  = $res['ID_ARCHIVO_SECCION'];
                $infoSeccion['titulo']      = $res['TITULO_ARCHIVO'];
                $infoSeccion['archivo']     = $res['ARCHIVO'];
                $datos[] = $infoSeccion;
            }
            if(!empty($datos)) {
                return $datos;
            }else {
                return false;
            }
        }
        
      }
      
      
      
      public static function findFiles($idSection)
      {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_ARCHIVO_SECCION);        
        $c->addSelectColumn(self::TITULO_ARCHIVO);        
        $c->addSelectColumn(self::ARCHIVO);        
        //Filtros
        //$c->addJoin(self::ID_ARCHIVO_SECCION,  SfSeccionArchivosPeer::ID_ARCHIVO,Criteria::INNER_JOIN);
        
        $c->addAscendingOrderByColumn(self::TITULO_ARCHIVO);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        //$sections[0] = 'None';
        while($res = $rs->fetch())
        {
            if(!SfSeccionArchivosPeer::checkFileSeccion($idSection, $res['ID_ARCHIVO_SECCION']))
            {
                $archivos[$res['ID_ARCHIVO_SECCION']] = "&bull;&nbsp;".$res['TITULO_ARCHIVO'];
            }            
        }
        if(!empty($archivos)){
            return $archivos;
        }else{
            $archivos[0] = '';
            return $archivos;
        }            
      }
      
      public static function findFilesNews($idNews, $buscador = "")
      {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_ARCHIVO_SECCION);        
        $c->addSelectColumn(self::TITULO_ARCHIVO);        
        $c->addSelectColumn(self::ARCHIVO);        
        //Filtros
        //$c->addJoin(self::ID_ARCHIVO_SECCION,  SfSeccionArchivosPeer::ID_ARCHIVO,Criteria::INNER_JOIN);
        
        $c->add(self::TIPO_ARCHIVO, 1, Criteria::LESS_EQUAL);
        if($buscador)
        {
            $criterio = $c->getNewCriterion(self::TITULO_ARCHIVO, '%'.$buscador.'%', Criteria::LIKE);
            $c->add($criterio);
        }
        $c->addAscendingOrderByColumn(self::TITULO_ARCHIVO);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        //$sections[0] = 'None';
        while($res = $rs->fetch())
        {
            if(!self::checkFileNoticia($idNews, $res['ID_ARCHIVO_SECCION']))
            {
                $archivos[$res['ID_ARCHIVO_SECCION']] = "&bull;&nbsp;".$res['TITULO_ARCHIVO'];
            }            
        }
        if(!empty($archivos)){
            return $archivos;
        }else{
            $archivos[0] = '';
            return $archivos;
        }            
      }
      
      public static function checkFileNoticia($idNews, $id_file) {

            $c = new Criteria();
            $c->add(SfNewsArchivosPeer::ID_NEWS,$idNews, Criteria::EQUAL);
            $c->add(SfNewsArchivosPeer::ID_ARCHIVO,$id_file, Criteria::EQUAL);
            return self::doCount($c);

        }
      
      
      public static function findFilesCurso($idCurso, $buscador = "")
      {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_ARCHIVO_SECCION);        
        $c->addSelectColumn(self::TITULO_ARCHIVO);        
        $c->addSelectColumn(self::ARCHIVO);        
        //Filtros
        //$c->addJoin(self::ID_ARCHIVO_SECCION,  SfSeccionArchivosPeer::ID_ARCHIVO,Criteria::INNER_JOIN);
        if($buscador)
        {
            $criterio = $c->getNewCriterion(self::TITULO_ARCHIVO, '%'.$buscador.'%', Criteria::LIKE);
            $c->add($criterio);
        }
        $c->add(self::TIPO_ARCHIVO, 1, Criteria::LESS_EQUAL);
        
        $c->addAscendingOrderByColumn(self::TITULO_ARCHIVO);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        //$sections[0] = 'None';
        while($res = $rs->fetch())
        {
            if(!CursoArchivosPeer::checkFileCurso($idCurso, $res['ID_ARCHIVO_SECCION']))
            {
                $archivos[$res['ID_ARCHIVO_SECCION']] = "&bull;&nbsp;".$res['TITULO_ARCHIVO'];
            }            
        }
        if(!empty($archivos)){
            return $archivos;
        }else{
            $archivos[0] = '';
            return $archivos;
        }            
      }
      
      public static function findFilesAsociados()
      {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_ARCHIVO_SECCION);        
        $c->addSelectColumn(self::TITULO_ARCHIVO);        
        $c->addSelectColumn(self::ARCHIVO);        
        //Filtros
        $c->add(self::TIPO_ARCHIVO, 2 ,Criteria::LESS_THAN);
        
        $c->addAscendingOrderByColumn(self::TITULO_ARCHIVO);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        //$sections[0] = 'None';
        while($res = $rs->fetch())
        {
            $infoSeccion['id_archivo']  = $res['ID_ARCHIVO_SECCION'];
            $infoSeccion['titulo']      = $res['TITULO_ARCHIVO'];
            $infoSeccion['archivo']     = $res['ARCHIVO'];
            $datos[] = $infoSeccion;
        }
        if(!empty($datos)){
            return $datos;
        }else{
            return false;
        }            
      }
} // SfArchivosSeccionPeer
