<?php

/**
 * Base class that represents a row from the 'productos' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 03/04/2014 12:04:40
 *
 * @package    lib.model.productos.om
 */
abstract class BaseProductos extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProductosPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the codigo field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $codigo;
        
        /**
	 * The value for the codigo Loja.
	 * Note: this column has a database default value of: ''
	 * @var        int
	 */
	protected $loja;

	/**
	 * The value for the destaque field.
	 * Note: this column has a database default value of: 'S'
	 * @var        string
	 */
	protected $destaque;

	/**
	 * The value for the nome field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $nome;

	/**
	 * The value for the ano field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $ano;

	/**
	 * The value for the id_categoria field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $id_categoria;

	/**
	 * The value for the escala field.
	 * Note: this column has a database default value of: '1:00'
	 * @var        string
	 */
	protected $escala;

	/**
	 * The value for the peso field.
	 * Note: this column has a database default value of: 0
	 * @var        double
	 */
	protected $peso;

	/**
	 * The value for the observacoes field.
	 * @var        string
	 */
	protected $observacoes;

	/**
	 * The value for the comprimento field.
	 * Note: this column has a database default value of: '0.0'
	 * @var        string
	 */
	protected $comprimento;

	/**
	 * The value for the largura field.
	 * Note: this column has a database default value of: 0
	 * @var        double
	 */
	protected $largura;

	/**
	 * The value for the altura field.
	 * Note: this column has a database default value of: 0
	 * @var        double
	 */
	protected $altura;

	/**
	 * The value for the cor field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $cor;

	/**
	 * The value for the preco field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $preco;

	/**
	 * The value for the desconto field.
	 * Note: this column has a database default value of: 5
	 * @var        int
	 */
	protected $desconto;

	/**
	 * The value for the desconto_boleto field.
	 * Note: this column has a database default value of: 10
	 * @var        int
	 */
	protected $desconto_boleto;

	/**
	 * The value for the max_parcelas field.
	 * Note: this column has a database default value of: 10
	 * @var        int
	 */
	protected $max_parcelas;

	/**
	 * The value for the estoque field.
	 * Note: this column has a database default value of: 100
	 * @var        int
	 */
	protected $estoque;

	/**
	 * The value for the min_estoque field.
	 * Note: this column has a database default value of: 10
	 * @var        int
	 */
	protected $min_estoque;

	/**
	 * The value for the credito field.
	 * Note: this column has a database default value of: 'http://www.motormint.com (acesso 21/09/2009)'
	 * @var        string
	 */
	protected $credito;

	/**
	 * The value for the data_cad field.
	 * @var        string
	 */
	protected $data_cad;

	/**
	 * The value for the foto field.
	 * @var        string
	 */
	protected $foto;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ProductosPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->codigo = '';
		$this->destaque = 'S';
		$this->nome = '';
                $this->loja = '';
		$this->ano = '';
		$this->id_categoria = 0;
		$this->escala = '1:00';
		$this->peso = 0;
		$this->comprimento = '0.0';
		$this->largura = 0;
		$this->altura = 0;
		$this->cor = '';
		$this->preco = '0.00';
		$this->desconto = 5;
		$this->desconto_boleto = 10;
		$this->max_parcelas = 10;
		$this->estoque = 100;
		$this->min_estoque = 10;
		$this->credito = 'http://www.motormint.com (acesso 21/09/2009)';
	}

	/**
	 * Initializes internal state of BaseProductos object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [codigo] column value.
	 * 
	 * @return     string
	 */
	public function getCodigo()
	{
		return $this->codigo;
	}

	/**
	 * Get the [destaque] column value.
	 * 
	 * @return     string
	 */
	public function getDestaque()
	{
		return $this->destaque;
	}

	/**
	 * Get the [nome] column value.
	 * 
	 * @return     string
	 */
	public function getNome()
	{
		return $this->nome;
	}
        
        /**
	 * Get the [loga] column value.
	 * 
	 * @return     int
	 */
	public function getLoja()
	{
		return $this->loja;
	}

	/**
	 * Get the [ano] column value.
	 * 
	 * @return     string
	 */
	public function getAno()
	{
		return $this->ano;
	}

	/**
	 * Get the [id_categoria] column value.
	 * 
	 * @return     int
	 */
	public function getIdCategoria()
	{
		return $this->id_categoria;
	}

	/**
	 * Get the [escala] column value.
	 * 
	 * @return     string
	 */
	public function getEscala()
	{
		return $this->escala;
	}

	/**
	 * Get the [peso] column value.
	 * 
	 * @return     double
	 */
	public function getPeso()
	{
		return $this->peso;
	}

	/**
	 * Get the [observacoes] column value.
	 * 
	 * @return     string
	 */
	public function getObservacoes()
	{
		return $this->observacoes;
	}

	/**
	 * Get the [comprimento] column value.
	 * 
	 * @return     string
	 */
	public function getComprimento()
	{
		return $this->comprimento;
	}

	/**
	 * Get the [largura] column value.
	 * 
	 * @return     double
	 */
	public function getLargura()
	{
		return $this->largura;
	}

	/**
	 * Get the [altura] column value.
	 * 
	 * @return     double
	 */
	public function getAltura()
	{
		return $this->altura;
	}

	/**
	 * Get the [cor] column value.
	 * 
	 * @return     string
	 */
	public function getCor()
	{
		return $this->cor;
	}

	/**
	 * Get the [preco] column value.
	 * 
	 * @return     string
	 */
	public function getPreco()
	{
		return $this->preco;
	}

	/**
	 * Get the [desconto] column value.
	 * 
	 * @return     int
	 */
	public function getDesconto()
	{
		return $this->desconto;
	}

	/**
	 * Get the [desconto_boleto] column value.
	 * 
	 * @return     int
	 */
	public function getDescontoBoleto()
	{
		return $this->desconto_boleto;
	}

	/**
	 * Get the [max_parcelas] column value.
	 * 
	 * @return     int
	 */
	public function getMaxParcelas()
	{
		return $this->max_parcelas;
	}

	/**
	 * Get the [estoque] column value.
	 * 
	 * @return     int
	 */
	public function getEstoque()
	{
		return $this->estoque;
	}

	/**
	 * Get the [min_estoque] column value.
	 * 
	 * @return     int
	 */
	public function getMinEstoque()
	{
		return $this->min_estoque;
	}

	/**
	 * Get the [credito] column value.
	 * 
	 * @return     string
	 */
	public function getCredito()
	{
		return $this->credito;
	}

	/**
	 * Get the [optionally formatted] temporal [data_cad] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataCad($format = 'Y-m-d')
	{
		if ($this->data_cad === null) {
			return null;
		}


		if ($this->data_cad != '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->data_cad);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->data_cad, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [foto] column value.
	 * 
	 * @return     string
	 */
	public function getFoto()
	{
		return $this->foto;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ProductosPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [codigo] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setCodigo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigo !== $v || $this->isNew()) {
			$this->codigo = $v;
			$this->modifiedColumns[] = ProductosPeer::CODIGO;
		}

		return $this;
	} // setCodigo()

	/**
	 * Set the value of [destaque] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setDestaque($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->destaque !== $v || $this->isNew()) {
			$this->destaque = $v;
			$this->modifiedColumns[] = ProductosPeer::DESTAQUE;
		}

		return $this;
	} // setDestaque()

	/**
	 * Set the value of [nome] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setNome($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nome !== $v || $this->isNew()) {
			$this->nome = $v;
			$this->modifiedColumns[] = ProductosPeer::NOME;
		}

		return $this;
	} // setNome()

	/**
	 * Set the value of [ano] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setAno($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ano !== $v || $this->isNew()) {
			$this->ano = $v;
			$this->modifiedColumns[] = ProductosPeer::ANO;
		}

		return $this;
	} // setAno()

	/**
	 * Set the value of [id_categoria] column.
	 * 
	 * @param      int $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setIdCategoria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_categoria !== $v || $this->isNew()) {
			$this->id_categoria = $v;
			$this->modifiedColumns[] = ProductosPeer::ID_CATEGORIA;
		}

		return $this;
	} // setIdCategoria()

	/**
	 * Set the value of [escala] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setEscala($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->escala !== $v || $this->isNew()) {
			$this->escala = $v;
			$this->modifiedColumns[] = ProductosPeer::ESCALA;
		}

		return $this;
	} // setEscala()

	/**
	 * Set the value of [peso] column.
	 * 
	 * @param      double $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setPeso($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->peso !== $v || $this->isNew()) {
			$this->peso = $v;
			$this->modifiedColumns[] = ProductosPeer::PESO;
		}

		return $this;
	} // setPeso()

	/**
	 * Set the value of [observacoes] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setObservacoes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->observacoes !== $v) {
			$this->observacoes = $v;
			$this->modifiedColumns[] = ProductosPeer::OBSERVACOES;
		}

		return $this;
	} // setObservacoes()

	/**
	 * Set the value of [comprimento] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setComprimento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comprimento !== $v || $this->isNew()) {
			$this->comprimento = $v;
			$this->modifiedColumns[] = ProductosPeer::COMPRIMENTO;
		}

		return $this;
	} // setComprimento()

	/**
	 * Set the value of [largura] column.
	 * 
	 * @param      double $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setLargura($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->largura !== $v || $this->isNew()) {
			$this->largura = $v;
			$this->modifiedColumns[] = ProductosPeer::LARGURA;
		}

		return $this;
	} // setLargura()

	/**
	 * Set the value of [altura] column.
	 * 
	 * @param      double $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setAltura($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->altura !== $v || $this->isNew()) {
			$this->altura = $v;
			$this->modifiedColumns[] = ProductosPeer::ALTURA;
		}

		return $this;
	} // setAltura()

	/**
	 * Set the value of [cor] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setCor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cor !== $v || $this->isNew()) {
			$this->cor = $v;
			$this->modifiedColumns[] = ProductosPeer::COR;
		}

		return $this;
	} // setCor()

	/**
	 * Set the value of [preco] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setPreco($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->preco !== $v || $this->isNew()) {
			$this->preco = $v;
			$this->modifiedColumns[] = ProductosPeer::PRECO;
		}

		return $this;
	} // setPreco()

	/**
	 * Set the value of [desconto] column.
	 * 
	 * @param      int $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setDesconto($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->desconto !== $v || $this->isNew()) {
			$this->desconto = $v;
			$this->modifiedColumns[] = ProductosPeer::DESCONTO;
		}

		return $this;
	} // setDesconto()

	/**
	 * Set the value of [desconto_boleto] column.
	 * 
	 * @param      int $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setDescontoBoleto($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->desconto_boleto !== $v || $this->isNew()) {
			$this->desconto_boleto = $v;
			$this->modifiedColumns[] = ProductosPeer::DESCONTO_BOLETO;
		}

		return $this;
	} // setDescontoBoleto()

	/**
	 * Set the value of [max_parcelas] column.
	 * 
	 * @param      int $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setMaxParcelas($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->max_parcelas !== $v || $this->isNew()) {
			$this->max_parcelas = $v;
			$this->modifiedColumns[] = ProductosPeer::MAX_PARCELAS;
		}

		return $this;
	} // setMaxParcelas()

	/**
	 * Set the value of [estoque] column.
	 * 
	 * @param      int $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setEstoque($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->estoque !== $v || $this->isNew()) {
			$this->estoque = $v;
			$this->modifiedColumns[] = ProductosPeer::ESTOQUE;
		}

		return $this;
	} // setEstoque()
        
        /**
	 * Set the value of [loja] column.
	 * 
	 * @param      int $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setLoja($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->loja !== $v || $this->isNew()) {
			$this->loja = $v;
			$this->modifiedColumns[] = ProductosPeer::LOJA;
		}

		return $this;
	} // setsetLoja()

	/**
	 * Set the value of [min_estoque] column.
	 * 
	 * @param      int $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setMinEstoque($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->min_estoque !== $v || $this->isNew()) {
			$this->min_estoque = $v;
			$this->modifiedColumns[] = ProductosPeer::MIN_ESTOQUE;
		}

		return $this;
	} // setMinEstoque()

	/**
	 * Set the value of [credito] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setCredito($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->credito !== $v || $this->isNew()) {
			$this->credito = $v;
			$this->modifiedColumns[] = ProductosPeer::CREDITO;
		}

		return $this;
	} // setCredito()

	/**
	 * Sets the value of [data_cad] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setDataCad($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->data_cad !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->data_cad !== null && $tmpDt = new DateTime($this->data_cad)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->data_cad = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = ProductosPeer::DATA_CAD;
			}
		} // if either are not null

		return $this;
	} // setDataCad()

	/**
	 * Set the value of [foto] column.
	 * 
	 * @param      string $v new value
	 * @return     Productos The current object (for fluent API support)
	 */
	public function setFoto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->foto !== $v) {
			$this->foto = $v;
			$this->modifiedColumns[] = ProductosPeer::FOTO;
		}

		return $this;
	} // setFoto()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->codigo !== '') {
				return false;
			}

			if ($this->destaque !== 'S') {
				return false;
			}

			if ($this->nome !== '') {
				return false;
			}

			if ($this->ano !== '') {
				return false;
			}

			if ($this->id_categoria !== 0) {
				return false;
			}

			if ($this->escala !== '1:00') {
				return false;
			}

			if ($this->peso !== 0) {
				return false;
			}

			if ($this->comprimento !== '0.0') {
				return false;
			}

			if ($this->largura !== 0) {
				return false;
			}

			if ($this->altura !== 0) {
				return false;
			}

			if ($this->cor !== '') {
				return false;
			}

			if ($this->preco !== '0.00') {
				return false;
			}

			if ($this->desconto !== 5) {
				return false;
			}

			if ($this->desconto_boleto !== 10) {
				return false;
			}

			if ($this->max_parcelas !== 10) {
				return false;
			}

			if ($this->estoque !== 100) {
				return false;
			}
                        
                        if ($this->loja !== 0) {
				return false;
			}

			if ($this->min_estoque !== 10) {
				return false;
			}

			if ($this->credito !== 'http://www.motormint.com (acesso 21/09/2009)') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = (isset($row[$startcol + 0]) && $row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->codigo = (isset($row[$startcol + 1]) && $row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->destaque = (isset($row[$startcol + 2]) && $row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->nome = (isset($row[$startcol + 3]) && $row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->ano = (isset($row[$startcol + 4]) && $row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->id_categoria = (isset($row[$startcol + 5]) && $row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->escala = (isset($row[$startcol + 6]) && $row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->peso = (isset($row[$startcol + 7]) && $row[$startcol + 7] !== null) ? (double) $row[$startcol + 7] : null;
			$this->observacoes = (isset($row[$startcol + 8]) && $row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->comprimento = (isset($row[$startcol + 9]) && $row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->largura = (isset($row[$startcol + 10]) && $row[$startcol + 10] !== null) ? (double) $row[$startcol + 10] : null;
			$this->altura = (isset($row[$startcol + 11]) && $row[$startcol + 11] !== null) ? (double) $row[$startcol + 11] : null;
			$this->cor = (isset($row[$startcol + 12]) && $row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->preco = (isset($row[$startcol + 13]) && $row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->desconto = (isset($row[$startcol + 14]) && $row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->desconto_boleto = (isset($row[$startcol + 15]) && $row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->max_parcelas = (isset($row[$startcol + 16]) && $row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->estoque = (isset($row[$startcol + 17]) && $row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->min_estoque = (isset($row[$startcol + 18]) && $row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->credito = (isset($row[$startcol + 19]) && $row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->data_cad = (isset($row[$startcol + 20]) && $row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->foto = (isset($row[$startcol + 21]) && $row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
                        $this->loja = (isset($row[$startcol + 22]) && $row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 23; // 22 = ProductosPeer::NUM_COLUMNS - ProductosPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Productos object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProductosPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ProductosPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProductosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProductos:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				ProductosPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProductos:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProductosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProductos:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProductos:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ProductosPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ProductosPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProductosPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ProductosPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ProductosPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProductosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCodigo();
				break;
			case 2:
				return $this->getDestaque();
				break;
			case 3:
				return $this->getNome();
				break;
			case 4:
				return $this->getAno();
				break;
			case 5:
				return $this->getIdCategoria();
				break;
			case 6:
				return $this->getEscala();
				break;
			case 7:
				return $this->getPeso();
				break;
			case 8:
				return $this->getObservacoes();
				break;
			case 9:
				return $this->getComprimento();
				break;
			case 10:
				return $this->getLargura();
				break;
			case 11:
				return $this->getAltura();
				break;
			case 12:
				return $this->getCor();
				break;
			case 13:
				return $this->getPreco();
				break;
			case 14:
				return $this->getDesconto();
				break;
			case 15:
				return $this->getDescontoBoleto();
				break;
			case 16:
				return $this->getMaxParcelas();
				break;
			case 17:
				return $this->getEstoque();
				break;
			case 18:
				return $this->getMinEstoque();
				break;
			case 19:
				return $this->getCredito();
				break;
			case 20:
				return $this->getDataCad();
				break;
			case 21:
				return $this->getFoto();
				break;
                        case 22:
				return $this->getLoja();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ProductosPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCodigo(),
			$keys[2] => $this->getDestaque(),
			$keys[3] => $this->getNome(),
			$keys[4] => $this->getAno(),
			$keys[5] => $this->getIdCategoria(),
			$keys[6] => $this->getEscala(),
			$keys[7] => $this->getPeso(),
			$keys[8] => $this->getObservacoes(),
			$keys[9] => $this->getComprimento(),
			$keys[10] => $this->getLargura(),
			$keys[11] => $this->getAltura(),
			$keys[12] => $this->getCor(),
			$keys[13] => $this->getPreco(),
			$keys[14] => $this->getDesconto(),
			$keys[15] => $this->getDescontoBoleto(),
			$keys[16] => $this->getMaxParcelas(),
			$keys[17] => $this->getEstoque(),
			$keys[18] => $this->getMinEstoque(),
			$keys[19] => $this->getCredito(),
			$keys[20] => $this->getDataCad(),
			$keys[21] => $this->getFoto(),
                        $keys[22] => $this->getLoja(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProductosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCodigo($value);
				break;
			case 2:
				$this->setDestaque($value);
				break;
			case 3:
				$this->setNome($value);
				break;
			case 4:
				$this->setAno($value);
				break;
			case 5:
				$this->setIdCategoria($value);
				break;
			case 6:
				$this->setEscala($value);
				break;
			case 7:
				$this->setPeso($value);
				break;
			case 8:
				$this->setObservacoes($value);
				break;
			case 9:
				$this->setComprimento($value);
				break;
			case 10:
				$this->setLargura($value);
				break;
			case 11:
				$this->setAltura($value);
				break;
			case 12:
				$this->setCor($value);
				break;
			case 13:
				$this->setPreco($value);
				break;
			case 14:
				$this->setDesconto($value);
				break;
			case 15:
				$this->setDescontoBoleto($value);
				break;
			case 16:
				$this->setMaxParcelas($value);
				break;
			case 17:
				$this->setEstoque($value);
				break;
			case 18:
				$this->setMinEstoque($value);
				break;
			case 19:
				$this->setCredito($value);
				break;
			case 20:
				$this->setDataCad($value);
				break;
			case 21:
				$this->setFoto($value);
				break;
                        case 22:
				$this->setLoja($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ProductosPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCodigo($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDestaque($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNome($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAno($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIdCategoria($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setEscala($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPeso($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setObservacoes($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setComprimento($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setLargura($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setAltura($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCor($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPreco($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDesconto($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDescontoBoleto($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMaxParcelas($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setEstoque($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMinEstoque($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCredito($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setDataCad($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setFoto($arr[$keys[21]]);
                if (array_key_exists($keys[22], $arr)) $this->setLoja($arr[$keys[22]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProductosPeer::DATABASE_NAME);

		if ($this->isColumnModified(ProductosPeer::ID)) $criteria->add(ProductosPeer::ID, $this->id);
		if ($this->isColumnModified(ProductosPeer::CODIGO)) $criteria->add(ProductosPeer::CODIGO, $this->codigo);
		if ($this->isColumnModified(ProductosPeer::DESTAQUE)) $criteria->add(ProductosPeer::DESTAQUE, $this->destaque);
		if ($this->isColumnModified(ProductosPeer::NOME)) $criteria->add(ProductosPeer::NOME, $this->nome);
		if ($this->isColumnModified(ProductosPeer::ANO)) $criteria->add(ProductosPeer::ANO, $this->ano);
		if ($this->isColumnModified(ProductosPeer::ID_CATEGORIA)) $criteria->add(ProductosPeer::ID_CATEGORIA, $this->id_categoria);
		if ($this->isColumnModified(ProductosPeer::ESCALA)) $criteria->add(ProductosPeer::ESCALA, $this->escala);
		if ($this->isColumnModified(ProductosPeer::PESO)) $criteria->add(ProductosPeer::PESO, $this->peso);
		if ($this->isColumnModified(ProductosPeer::OBSERVACOES)) $criteria->add(ProductosPeer::OBSERVACOES, $this->observacoes);
		if ($this->isColumnModified(ProductosPeer::COMPRIMENTO)) $criteria->add(ProductosPeer::COMPRIMENTO, $this->comprimento);
		if ($this->isColumnModified(ProductosPeer::LARGURA)) $criteria->add(ProductosPeer::LARGURA, $this->largura);
		if ($this->isColumnModified(ProductosPeer::ALTURA)) $criteria->add(ProductosPeer::ALTURA, $this->altura);
		if ($this->isColumnModified(ProductosPeer::COR)) $criteria->add(ProductosPeer::COR, $this->cor);
		if ($this->isColumnModified(ProductosPeer::PRECO)) $criteria->add(ProductosPeer::PRECO, $this->preco);
		if ($this->isColumnModified(ProductosPeer::DESCONTO)) $criteria->add(ProductosPeer::DESCONTO, $this->desconto);
		if ($this->isColumnModified(ProductosPeer::DESCONTO_BOLETO)) $criteria->add(ProductosPeer::DESCONTO_BOLETO, $this->desconto_boleto);
		if ($this->isColumnModified(ProductosPeer::MAX_PARCELAS)) $criteria->add(ProductosPeer::MAX_PARCELAS, $this->max_parcelas);
		if ($this->isColumnModified(ProductosPeer::ESTOQUE)) $criteria->add(ProductosPeer::ESTOQUE, $this->estoque);
		if ($this->isColumnModified(ProductosPeer::MIN_ESTOQUE)) $criteria->add(ProductosPeer::MIN_ESTOQUE, $this->min_estoque);
		if ($this->isColumnModified(ProductosPeer::CREDITO)) $criteria->add(ProductosPeer::CREDITO, $this->credito);
		if ($this->isColumnModified(ProductosPeer::DATA_CAD)) $criteria->add(ProductosPeer::DATA_CAD, $this->data_cad);
		if ($this->isColumnModified(ProductosPeer::FOTO)) $criteria->add(ProductosPeer::FOTO, $this->foto);
                if ($this->isColumnModified(ProductosPeer::LOJA)) $criteria->add(ProductosPeer::LOJA, $this->loja);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProductosPeer::DATABASE_NAME);

		$criteria->add(ProductosPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Productos (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCodigo($this->codigo);

		$copyObj->setDestaque($this->destaque);

		$copyObj->setNome($this->nome);

		$copyObj->setAno($this->ano);

		$copyObj->setIdCategoria($this->id_categoria);

		$copyObj->setEscala($this->escala);

		$copyObj->setPeso($this->peso);

		$copyObj->setObservacoes($this->observacoes);

		$copyObj->setComprimento($this->comprimento);

		$copyObj->setLargura($this->largura);

		$copyObj->setAltura($this->altura);

		$copyObj->setCor($this->cor);

		$copyObj->setPreco($this->preco);

		$copyObj->setDesconto($this->desconto);

		$copyObj->setDescontoBoleto($this->desconto_boleto);

		$copyObj->setMaxParcelas($this->max_parcelas);

		$copyObj->setEstoque($this->estoque);

		$copyObj->setMinEstoque($this->min_estoque);

		$copyObj->setCredito($this->credito);

		$copyObj->setDataCad($this->data_cad);

		$copyObj->setFoto($this->foto);
                
                $copyObj->setLoja($this->loja);

		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Productos Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProductosPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProductosPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseProductos:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseProductos::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseProductos
