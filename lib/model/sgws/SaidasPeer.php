<?php


/**
 * Skeleton subclass for performing query and update operations on the 'saidas' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 19/11/2013 16:35:38
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.sgws
 */
class SaidasPeer extends BaseSaidasPeer {
    
    public static function getAll()
    {
        $c = new Criteria();
        $c->addAscendingOrderByColumn(self::CODIGO_SAIDA);
        return self::doSelect($c);
    }
    
    public static function getSubtiposProjeto($id_projeto, $idSubtipo)
    {
        $c = new Criteria();
        $c->add(self::CODIGOPROJETO, $id_projeto, Criteria::EQUAL);
        $c->add(self::CODIGO_SUBTIPO, $idSubtipo, Criteria::EQUAL);
        return self::doCount($c);
    }
    
    public static function getValorFaturadoProjeto($id)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn('SUM('.self::SAIDAS.') AS total');
        //Condicion
        $c->add(self::CODIGOPROJETO, $id, Criteria::EQUAL);
        $c->add(self::DATAEMISSAO, '', Criteria::NOT_EQUAL);
        $c->add(self::OPERACAO, 'e', Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        
        while($res = $rs->fetch()) {
            $total = $res['total'];
        }
        return $total;
    }
    
    public static function getSumaDespesasRealesProjeto($id)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn('SUM('.self::SAIDAS.') AS total');
        //Condicion
        $c->add(self::CODIGOPROJETO, $id, Criteria::EQUAL);
        $c->add(self::BAIXA, '1', Criteria::EQUAL);
        $c->add(self::OPERACAO, 's', Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        
        while($res = $rs->fetch()) {
            $total = $res['total'];
        }
        return $total;
    }
    
    public static function getSaidaPerPedido($id)
    {
        $c = new Criteria();
        $c->add(self::ID_PEDIDO, $id, Criteria::EQUAL);
        return self::doSelectOne($c);
    }
    
    public static function getSaidaPerProjeto($id)
    {
        $c = new Criteria();
        $c->add(self::CODIGOPROJETO, $id, Criteria::EQUAL);
        return self::doSelect($c);
    }
    
    public static function getSaidaPerCompensacion($id)
    {
        $c = new Criteria();
        $c->add(self::ID_COMPENSACAO, $id, Criteria::EQUAL);
        return self::doSelect($c);
    }
    
    public static function getNumMeusProjetos($id) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn('SUM('.self::SAIDAS.') AS total');
        //Condicion
        $c->add(self::CODIGOFUNCIONARIO, $id, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $total = 0;
        while($res = $rs->fetch()) {
            $total = $total + $res['total'];
        }
        return $total;
        
    }
    
    public static function getTotalByOperacionUsuario($id, $operacion, $adiantamento) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn('SUM('.self::SAIDAS.') AS total');
        $c->add(self::OPERACAO, $operacion, Criteria::EQUAL);
        if($adiantamento){
            $c->add(self::CENTRO, 'adiantamento', Criteria::EQUAL);
        }else{
             $c->add(self::CENTRO, 'adiantamento', Criteria::NOT_EQUAL);
        }
        //Condicion
        $c->add(SaidasPeer::DATAREAL, '2014-01-01',Criteria::GREATER_EQUAL);
        $c->add(self::CODIGOFUNCIONARIO, $id, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $total = 0;
        while($res = $rs->fetch()) {
            $total = $total + $res['total'];
        }
        return $total;
        
    }

    public static function getFaturamentosRealizados($ano, $mes)
    {
        $c = new Criteria();
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::SAIDAS);
        $c->add(self::DATAEMISSAO, '', Criteria::NOT_EQUAL);
        
        $inicio   = $ano.'-'.$mes.'-01';
        $fim      = $ano.'-'.$mes.'-30';
        $cFecha = $c->getNewCriterion(self::DATAEMISSAO, $inicio,Criteria::GREATER_EQUAL);
        $cFecha->addAnd($c->getNewCriterion(self::DATAEMISSAO, $fim, Criteria::LESS_EQUAL));
        $c->add($cFecha);
        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $valor = 0;
        while($res = $rs->fetch()) {
            $con = $con + 1;
            $valor = $valor + $res['SAIDAS'];
        }
        return $valor;
        
    }
    
    public static function getFaturamentosPrevistos($ano, $mes)
    {
        $c = new Criteria();
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::SAIDAPREVISTA);
        $c->add(self::DATAEMISSAO, '0000-00-00', Criteria::EQUAL);
        $c->addOr(self::DATAEMISSAO, null, Criteria::EQUAL);
        
        $inicio   = $ano.'-'.$mes.'-01';
        $fim      = $ano.'-'.$mes.'-30';
        $cFecha = $c->getNewCriterion(self::DATAPREVISTA, $inicio,Criteria::GREATER_EQUAL);
        $cFecha->addAnd($c->getNewCriterion(self::DATAPREVISTA, $fim, Criteria::LESS_EQUAL));
        $c->add($cFecha);
        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $valor = 0;
        while($res = $rs->fetch()) {
            $con = $con + 1;
            $valor = $valor + $res['SAIDAPREVISTA'];
        }
        return $valor;
        
    }
    
    public static function getPagamentosEmAtraso($sort = null, $by = null) 
    {
        $c = new Criteria();
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(PropostaPeer::CODIGO_SGWS_PROJETO);
        $c->addSelectColumn(CadastroJuridicaPeer::NOME_FANTASIA);
        $c->addSelectColumn(LxUserPeer::NAME);
        $c->addSelectColumn(self::SAIDAPREVISTA);
        $c->addSelectColumn(self::DATARECEBIMENTOPRE);
        
        $c->add(self::SAIDAS, 0, Criteria::LESS_EQUAL);
        $c->add(self::DATARECEBIMENTOPRE, date("Y-m-d"), Criteria::LESS_THAN);
       
        $c->addJoin(self::CODIGOPROJETO, PropostaPeer::CODIGO_PROPOSTA, Criteria::INNER_JOIN);
        $c->addJoin(self::CODIGOCADASTRO, CadastroJuridicaPeer::ID_EMPRESA, Criteria::INNER_JOIN);
        $c->addJoin(self::CODIGOFUNCIONARIO, LxUserPeer::ID_USER, Criteria::INNER_JOIN);
        
        if($sort)
        {
            switch ($by) {
                case 'desc':
                    if($sort == 'CODIGO_SGWS_PROJETO')
                    {
                        $c->addDescendingOrderByColumn(PropostaPeer::CODIGO_SGWS_PROJETO);
                    }elseif($sort == 'NOME_FANTASIA'){
                        $c->addDescendingOrderByColumn(CadastroJuridicaPeer::NOME_FANTASIA);
                    }elseif($sort == 'NAME'){
                        $c->addDescendingOrderByColumn(LxUserPeer::NAME);
                    }elseif($sort == 'DATARECEBIMENTOPRE'){
                        $c->addDescendingOrderByColumn(self::DATARECEBIMENTOPRE);
                    }elseif($sort == 'SAIDAPREVISTA'){
                        $c->addDescendingOrderByColumn(self::SAIDAPREVISTA);
                    }
                    break;
                default:
                    if($sort == 'CODIGO_SGWS_PROJETO')
                    {
                        $c->addAscendingOrderByColumn(PropostaPeer::CODIGO_SGWS_PROJETO);
                    }elseif($sort == 'NOME_FANTASIA'){
                        $c->addAscendingOrderByColumn(CadastroJuridicaPeer::NOME_FANTASIA);
                    }elseif($sort == 'NAME'){
                        $c->addAscendingOrderByColumn(LxUserPeer::NAME);
                    }elseif($sort == 'DATARECEBIMENTOPRE'){
                        $c->addAscendingOrderByColumn(self::DATARECEBIMENTOPRE);
                    }elseif($sort == 'SAIDAPREVISTA'){
                        $c->addAscendingOrderByColumn(self::SAIDAPREVISTA);
                    }
                    break;
            }
        }else{
            $c->addDescendingOrderByColumn(self::DATARECEBIMENTOPRE);
        }
        
        
        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $v['projeto']   = $res['CODIGO_SGWS_PROJETO'];
            $v['cliente']   = $res['NOME_FANTASIA'];
            $v['gerente']   = $res['NAME'];
            $v['valor']     = $res['SAIDAPREVISTA'];
            $v['fecha']     = $res['DATARECEBIMENTOPRE'];
            if (aplication_system::validaData($v['fecha'])) {
                $v['dias_atraso'] =  intval(aplication_system::restaFechas($v['fecha'], date("Y-m-d"))); 
            }else{
                $v['dias_atraso'] = 'Indefinido';
            }
            $datos[] = $v;
        }
        if(!empty($datos))
        {
            return $datos;
        }else{
            return false;
        }
        
    }
    
    public static function getDespesasRealizadosPerCentro($ano, $mes, $centro)
    {
        $c = new Criteria();
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::SAIDAS);
        $c->add(self::DATAEMISSAO, '0000-00-00', Criteria::EQUAL);
        $c->addOr(self::DATAEMISSAO, null, Criteria::EQUAL);
        
        $inicio   = $ano.'-'.$mes.'-01';
        $fim      = $ano.'-'.$mes.'-30';
        $cFecha = $c->getNewCriterion(self::DATAEMISSAO, $inicio,Criteria::GREATER_EQUAL);
        $cFecha->addAnd($c->getNewCriterion(self::DATAEMISSAO, $fim, Criteria::LESS_EQUAL));
        $c->add($cFecha);
        
//        if($centro)
//        {
//            $c->addJoin(self::CODIGOPROJETO, PropostaPeer::CODIGO_PROPOSTA, Criteria::LEFT_JOIN);
//            $c->add(PropostaPeer::CODIGO_CENTRO, $centro, Criteria::EQUAL);
//        }        

        $c->add(self::CONFIRMACAO, $centro, Criteria::EQUAL);    
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $valor = 0;
        while($res = $rs->fetch()) {
            $con = $con + 1;
            $valor = $valor + $res['SAIDAS'];
        }
        return $valor;
        
    }
    
    public static function getTotalPrestacaoContasUsuario($id, $projeto = null, $status) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::SAIDAS);
        $c->addSelectColumn(self::OPERACAO);
        $c->addSelectColumn(self::CENTRO);
        if($projeto)
        {
            $c->add(self::CODIGOPROJETO, $projeto, Criteria::EQUAL);
        }
        if($status < 2)
        {
            $c->add(self::CONFIRMACAO, $status, Criteria::EQUAL);
        }else{
            $c->add(self::FOR_PRINT, 1, Criteria::EQUAL);
            $c->add(self::CONFIRMACAO, 0, Criteria::EQUAL);
            
        }
        $c->add(self::CONFIRMACAO, $status, Criteria::EQUAL);
        //Condicion
        $criterio = $c->getNewCriterion(self::OPERACAO, 'e', Criteria::EQUAL);
        $lojas = array('1729','1730');
        $c->addAnd(self::CODIGOCADASTRO, $lojas, Criteria::NOT_IN);
        $criterio->addAnd($c->getNewCriterion(self::CENTRO, 'adiantamento' , Criteria::EQUAL));
        $criterio->addOr($c->getNewCriterion(self::OPERACAO, 's' , Criteria::EQUAL));
        $c->add($criterio);
        $c->add(self::DATAREAL, '2014-01-01',Criteria::GREATER_EQUAL);
        
        $c->add(self::CODIGOFUNCIONARIO, $id, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $totalE = 0;
        $totalS = 0;
        while($res = $rs->fetch()) {
            if($res['OPERACAO'] == 's' && $res['CENTRO'] == "adiantamento")
            {
                $totalE = $totalE + $res['SAIDAS'];
            }else{
                $totalS = $totalS + $res['SAIDAS'];
            }
            
        }
        return array('totalE' => $totalE, 'totalS' => $totalS);
        
    }
    
    public static function getAlertaDespesasPorAprobar() {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        if(aplication_system::esUsuarioRoot())
        {
            $c->add(self::CONFIRMACAO, 0, Criteria::EQUAL);
        }else{
            $c->add(self::BAIXA, 1, Criteria::EQUAL);
        }
        //Condicion
        $criterio = $c->getNewCriterion(self::OPERACAO, 'e', Criteria::EQUAL);
        $criterio->addAnd($c->getNewCriterion(self::CENTRO, 'adiantamento' , Criteria::EQUAL));
        $criterio->addOr($c->getNewCriterion(self::OPERACAO, 's' , Criteria::EQUAL));
        $c->add($criterio);
        $c->add(self::DATAREAL, '2014-01-01',Criteria::GREATER_EQUAL);
        
        return self::doCount($c);
        
    }

    public static function getAlertaFaturamentos()
    {
        $c = new Criteria();

        $c->add(self::DATAEMISSAO, '0000-00-00', Criteria::EQUAL);
        $c->addOr(self::DATAEMISSAO, null, Criteria::EQUAL);
        
        $inicio   = date('Y').'-01-01';
        $fim      = date('Y').'-'.date('m').'-30';
        $cFecha = $c->getNewCriterion(self::DATAPREVISTA, $inicio,Criteria::GREATER_EQUAL);
        $cFecha->addAnd($c->getNewCriterion(self::DATAPREVISTA, $fim, Criteria::LESS_EQUAL));
        $c->add($cFecha);
        
        return self::doCount($c);
        
    }
    
    
} // SaidasPeer
