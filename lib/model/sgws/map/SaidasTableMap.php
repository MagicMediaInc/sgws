<?php


/**
 * This class defines the structure of the 'saidas' table.
 *
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 03/04/2014 12:04:43
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.sgws.map
 */
class SaidasTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.sgws.map.SaidasTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('saidas');
		$this->setPhpName('Saidas');
		$this->setClassname('Saidas');
		$this->setPackage('lib.model.sgws');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('CODIGO_SAIDA', 'CodigoSaida', 'INTEGER', true, 11, null);
		$this->addColumn('ID_COMPENSACAO', 'IdCompensacao', 'INTEGER', false, 5, null);
		$this->addColumn('ID_PEDIDO', 'IdPedido', 'INTEGER', false, 5, null);
		$this->addColumn('DOCUMENTOS', 'Documentos', 'VARCHAR', false, 49, null);
		$this->addColumn('CENTRO', 'Centro', 'VARCHAR', false, 12, null);
		$this->addColumn('OPERACAO', 'Operacao', 'VARCHAR', false, 2, null);
		$this->addColumn('TIPO', 'Tipo', 'VARCHAR', false, 1, null);
		$this->addColumn('CODIGOPROJETO', 'Codigoprojeto', 'INTEGER', false, 3, null);
		$this->addColumn('CODIGOTAREFA', 'Codigotarefa', 'INTEGER', false, 4, null);
		$this->addColumn('CODIGO_TIPO', 'CodigoTipo', 'INTEGER', false, 4, null);
		$this->addColumn('CODIGO_SUBTIPO', 'CodigoSubtipo', 'INTEGER', false, 4, null);
		$this->addColumn('CODIGOCADASTRO', 'Codigocadastro', 'INTEGER', false, 4, null);
		$this->addColumn('CODIGOFUNCIONARIO', 'Codigofuncionario', 'INTEGER', false, 3, null);
		$this->addColumn('FORMAPAGAMENTO', 'Formapagamento', 'VARCHAR', false, 8, null);
		$this->addColumn('SAIDAS', 'Saidas', 'DECIMAL', false, 9, null);
		$this->addColumn('SAIDAPREVISTA', 'Saidaprevista', 'DECIMAL', false, 8, null);
		$this->addColumn('DATAREAL', 'Datareal', 'DATE', false, null, null);
		$this->addColumn('DATAPREVISTA', 'Dataprevista', 'DATE', false, null, null);
		$this->addColumn('DATAEMISSAO', 'Dataemissao', 'DATE', false, null, null);
		$this->addColumn('DATARECEBIMENTOPRE', 'Datarecebimentopre', 'DATE', false, null, null);
		$this->addColumn('DESCRICAOSAIDA', 'Descricaosaida', 'LONGVARCHAR', false, null, null);
		$this->addColumn('FOR_PRINT', 'ForPrint', 'CHAR', false, null, '0');
		$this->addColumn('DATA_PRINT', 'DataPrint', 'DATE', false, null, null);
		$this->addColumn('BAIXA', 'Baixa', 'CHAR', false, null, null);
		$this->addColumn('CONFIRMACAO', 'Confirmacao', 'CHAR', false, null, null);
		$this->addColumn('CONFIRMADOPOR', 'Confirmadopor', 'VARCHAR', false, 3, null);
		$this->addColumn('OBSERVACOES', 'Observacoes', 'LONGVARCHAR', false, null, null);
		$this->addColumn('IMPOSTOS', 'Impostos', 'DECIMAL', false, 10, null);
		$this->addColumn('CODIGOREGISTRO', 'Codigoregistro', 'INTEGER', false, 5, null);
		$this->addColumn('PARCELAS', 'Parcelas', 'VARCHAR', false, 4, null);
		$this->addColumn('FS', 'Fs', 'VARCHAR', false, 2, null);
		$this->addColumn('DETALHE', 'Detalhe', 'VARCHAR', false, 31, null);
		$this->addColumn('PROTOCOLO', 'Protocolo', 'VARCHAR', false, 7, null);
		$this->addColumn('PARCELA', 'Parcela', 'VARCHAR', false, 17, null);
		$this->addColumn('CATEGORIA', 'Categoria', 'VARCHAR', false, 2, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // SaidasTableMap
