<?php


/**
 * Skeleton subclass for performing query and update operations on the 'notificaciones_destinatarios' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 31/05/2013 13:12:51
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.imoveis
 */
class NotificacionesDestinatariosPeer extends BaseNotificacionesDestinatariosPeer {
    
    public static function deleteVinculosNotificacionByUser($id_notificacion)
    {
        $con = Propel::getConnection();
	// select from...
	$c1 = new Criteria();
        $c1->add(self::ID_NOTIFICACION, $id_notificacion, Criteria::EQUAL);
	// delete
        BasePeer::doDelete($c1, $con);
    }
    
    public static function actualizaStatus($id_user, $st)
    {
        $con = Propel::getConnection();
        // select from�
        $c1 = new Criteria();
        $c1->add(self::ID_USER, $id_user);
        // update set
        $c2 = new Criteria();
        $c2->add(self::STATUS, $st, Criteria::EQUAL);
        BasePeer::doUpdate($c1, $c2, $con);
    }
    
    public static function actualizaStatusNotificacion($id_not, $id_user, $st)
    {
        $con = Propel::getConnection();
        // select from�
        $c1 = new Criteria();
        $c1->add(self::ID_NOTIFICACION, $id_not, Criteria::EQUAL);
        $c1->add(self::ID_USER, $id_user);
        // update set
        $c2 = new Criteria();
        $c2->add(self::STATUS, $st, Criteria::EQUAL);
        BasePeer::doUpdate($c1, $c2, $con);
    }
    
    
    public static function getUserByNotificacion($id_notificacion, $id_user)
    {
        $c = new Criteria();
	// select from...
	$c->add(self::ID_NOTIFICACION, $id_notificacion, Criteria::EQUAL);
        $c->add(self::ID_USER, $id_user, Criteria::EQUAL);
	$dato = self::doSelectOne($c);
        if (!empty($dato)) {
            return 'checked="checked"';
        }else {
            return '';
        }
    }
    
    public static function getCountUserInNotificacion($id_notificacion, $id_user)
    {
        $c = new Criteria();
	// select from...
	$c->add(self::ID_NOTIFICACION, $id_notificacion, Criteria::EQUAL);
        $c->add(self::ID_USER, $id_user, Criteria::EQUAL);
	return self::doCount($c);
    }
    
    public static function getNewsNotificacionUser($id_user)
    {
        $c = new Criteria();
	// select from...
	$c->add(self::ID_USER, $id_user, Criteria::EQUAL);
	$c->add(self::STATUS, '1', Criteria::EQUAL);
	return self::doCount($c);
    }
    
    public static function getVinculados($idNotificacion, $id_user = "")
    {
        //Obtengo el idioma principal
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias        
        $c->addSelectColumn(self::ID_USER);
        $c->addSelectColumn(LxUserPeer::PHOTO);
        
        //Where
        if($id_user)
        {
            $c->add(self::ID_USER,$id_user, Criteria::NOT_EQUAL);
        }        
        $c->add(self::ID_NOTIFICACION,$idNotificacion, Criteria::EQUAL);
        $c->addJoin(self::ID_USER, LxUserPeer::ID_USER, Criteria::INNER_JOIN);
        
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
          $dato['id_user']  =   $res['ID_USER'];
          $dato['foto']     =   $res['PHOTO'];
          $datos[] = $dato;
        }
        if (!empty($datos)){
          return $datos;
        }else{
          return false;
        }
    }

} // NotificacionesDestinatariosPeer
