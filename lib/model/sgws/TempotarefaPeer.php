<?php


/**
 * Skeleton subclass for performing query and update operations on the 'tempotarefa' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 24/09/2013 16:43:53
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.sgws
 */
class TempotarefaPeer extends BaseTempotarefaPeer {

    public static function deleitaActividadesTarefa($id)
    {
        $con = Propel::getConnection();
	// select from...
	$c1 = new Criteria();
        $c1->add(self::CODIGOTAREFA, $id, Criteria::EQUAL);
	// delete
        BasePeer::doDelete($c1, $con);
    }
    
    public static function getHorasTrabajadas($cod)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn('SUM('.self::TEMPOGASTO.') AS HORAS');
        $c->add(self::CODIGOTAREFA, $cod, Criteria::EQUAL);
        $c->add(self::AUTORIZADO, 1, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $datos['horas'] = $res['HORAS'];            
        }
        if(!empty($datos)){
            return $datos['horas'];
        }else{
            return false;
        }
    }
    
    public static function getHorasTrabajadasFuncionario($ano,$mes,$func, $tipo)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn('SUM('.self::TEMPOGASTO.') AS HORAS');
        $c->add(self::CODIGOFUNCIONARIO, $func, Criteria::EQUAL);
        $c->add(self::AUTORIZADO, 1, Criteria::EQUAL);
        $c->addJoin(self::CODIGOTAREFA, TarefaPeer::CODIGOTAREFA, Criteria::INNER_JOIN);
        $c->addJoin(TarefaPeer::CODIGOPROJETO, PropostaPeer::CODIGO_PROPOSTA, Criteria::INNER_JOIN);
        $c->add(PropostaPeer::CODIGO_CENTRO, $tipo, Criteria::EQUAL);
        
        $inicio   = $ano.'-'.$mes.'-01';
        $fim      = $ano.'-'.$mes.'-30';
        $cFecha = $c->getNewCriterion(self::DATAREAL, $inicio,Criteria::GREATER_EQUAL);
        $cFecha->addAnd($c->getNewCriterion(self::DATAREAL, $fim, Criteria::LESS_EQUAL));
        $c->add($cFecha);
        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $datos['horas'] = $res['HORAS'];            
        }
        if(!empty($datos)){
            return $datos['horas'];
        }else{
            return false;
        }
    }
    
    public static function getHorasTrabajadasFuncionarioProjeto($funcionario, $projeto)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn('SUM('.self::TEMPOGASTO.') AS HORAS');
        $c->add(self::CODIGOFUNCIONARIO, $funcionario, Criteria::EQUAL);
        $c->add(self::AUTORIZADO, 1, Criteria::EQUAL);
        $c->addJoin(self::CODIGOTAREFA, TarefaPeer::CODIGOTAREFA, Criteria::INNER_JOIN);
        $c->addJoin(TarefaPeer::CODIGOPROJETO, PropostaPeer::CODIGO_PROPOSTA, Criteria::INNER_JOIN);
        $c->add(PropostaPeer::CODIGO_PROPOSTA, $projeto, Criteria::EQUAL);
        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $datos['horas'] = $res['HORAS'];            
        }
        if(!empty($datos)){
            return $datos['horas'];
        }else{
            return false;
        }
    }
    
    public static function getHorasTrabajadasDia($cod, $data)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::CODIGOREGISTRO);
        $c->addSelectColumn('SUM('.self::TEMPOGASTO.') AS HORAS');
        $c->addSelectColumn(self::OBSERVACOES);
        $c->addSelectColumn(self::AUTORIZADO);
        $c->add(self::CODIGOTAREFA, $cod, Criteria::EQUAL);
        $c->add(self::DATAREAL, $data, Criteria::EQUAL);
        //$c->add(self::AUTORIZADO, 0, Criteria::EQUAL);
        $c->add(self::CODIGOFUNCIONARIO, sfContext::getInstance()->getUser()->getAttribute('idUserPanel') , Criteria::EQUAL);
        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $datos['id']    = $res['CODIGOREGISTRO'];            
            $datos['horas'] = $res['HORAS'];            
            $datos['info']  = $res['OBSERVACOES'];            
            $datos['autorizado']  = $res['AUTORIZADO'];            
            
        }
        if(!empty($datos)){
            return $datos;
        }else{
            return false;
        }
    }
        
    public static function getAllFuncionarios()
    {
        $c = new Criteria();
        $c->addAscendingOrderByColumn(self::CODIGOREGISTRO);
        $c->addGroupByColumn(self::CODIGOFUNCIONARIO);
        return self::doSelect($c);
    }
    
    public static function getAllFuncionariosTask()
    {
        $c = new Criteria();
        $c->addAscendingOrderByColumn(self::CODIGOREGISTRO);
        
        return self::doSelect($c);
    }
    
    public static function getActividadesAprobadas()
    {
        $c = new Criteria();
        $c->addAscendingOrderByColumn(self::CODIGOREGISTRO);
        $c->add(self::AUTORIZADO, 1 , Criteria::EQUAL);
        //$c->add(self::CODIGOREGISTRO, 65524, Criteria::EQUAL);
        return self::doSelect($c);
    }
    
    public static function getAllLosQueAutorizan()
    {
        $c = new Criteria();
        $c->addAscendingOrderByColumn(self::CODIGOREGISTRO);
        $c->addGroupByColumn(self::AUTORIZADOPOR);
        return self::doSelect($c);
    }
    
    public static function getLista($id)
    {
        $c = new Criteria();
        $c->add(self::CODIGOTAREFA,$id, Criteria::EQUAL);
        if(aplication_system::esFuncionario())
        {
            //$c->add(self::CODIGOFUNCIONARIO,  sfContext::getInstance()->getUser()->getAttribute('idUserPanel'), Criteria::EQUAL);
        }
        
        $c->addDescendingOrderByColumn(self::DATAREAL);
        return self::doSelect($c);
    }

    public static function hasFuncionario( $id, $funcionario ){

        $lista = self::getLista( $id );

        $bool = false;

        foreach( $lista as $elem ):
            if( $elem->getCodigoFuncionario() == $funcionario ):
                $bool = true;
            endif;
        endforeach;

        return $bool;

    }
    
    static public function getTotalTareasSemana($user, $inicio, $fim)
    {
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::CODIGOTAREFA);
        $c->addSelectColumn(TarefaPeer::CODIGOPROJETO);
        $c->addSelectColumn(TarefadescricaoPeer::TAREFA);
        
        
        $c->add(self::CODIGOFUNCIONARIO, $user, Criteria::EQUAL);
        $c->addJoin(self::CODIGOTAREFA, TarefaPeer::CODIGOTAREFA,  Criteria::INNER_JOIN);
        $c->addJoin(TarefaPeer::DESCRICAO, TarefadescricaoPeer::DESCRICAO,  Criteria::INNER_JOIN);
        $cFecha = $c->getNewCriterion(self::DATAREAL, $inicio, Criteria::GREATER_EQUAL);
        $cFecha->addAnd($c->getNewCriterion(self::DATAREAL, $fim, Criteria::LESS_EQUAL));
        $c->add($cFecha);
        $c->addAscendingOrderByColumn(self::DATAREAL);
        $c->addGroupByColumn(self::CODIGOTAREFA);
        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $dato['tarefa']    = $res['CODIGOTAREFA'];            
            $dato['projeto'] = $res['CODIGOPROJETO'];            
            $dato['nome_tarefa'] = $res['TAREFA'];            
            $datos[] = $dato;
        }
        if(!empty($datos)){
            return $datos;
        }else{
            return false;
        }
    }

    static public function getActividadesSemana($user, $inicio, $fim)
    {
        $c = new Criteria();
        $c->add(self::CODIGOFUNCIONARIO, $user, Criteria::EQUAL);
        $c->addJoin(self::CODIGOTAREFA, TarefaPeer::CODIGOTAREFA,  Criteria::INNER_JOIN);
        $cFecha = $c->getNewCriterion(self::DATAREAL, $inicio, Criteria::GREATER_EQUAL);
        $cFecha->addAnd($c->getNewCriterion(self::DATAREAL, $fim, Criteria::LESS_EQUAL));
        $c->add($cFecha);
        $c->addAscendingOrderByColumn(self::DATAREAL);
        //$c->addGroupByColumn(self::CODIGOTAREFA);
        return self::doSelect($c);
    }
    
    static public function getLastDateWeek($user, $inicio, $fim)
    {
        $c = new Criteria();
        $c->add(self::CODIGOFUNCIONARIO, $user, Criteria::EQUAL);
        $cFecha = $c->getNewCriterion(self::DATAREAL, $inicio, Criteria::GREATER_EQUAL);
        $cFecha->addAnd($c->getNewCriterion(self::DATAREAL, $fim, Criteria::LESS_EQUAL));
        $c->add($cFecha);
        $c->addDescendingOrderByColumn(self::LAST_UPDATE);
        $c->setLimit(1);
        return self::doSelectOne($c);
    }
    
    static public function getLastUpdateTimeSheet($user)
    {
        $c = new Criteria();
        $c->add(self::CODIGOFUNCIONARIO, $user, Criteria::EQUAL);
        $c->addDescendingOrderByColumn(self::LAST_UPDATE);
        $c->setLimit(1);
        $rs = self::doSelectOne($c);
        if($rs)
        {
            return $rs->getLastUpdate();
        }else{
            return FALSE;
        }
        
    }
    
    static public function getHorasBillabilityProjeto($id)
    {
        $c = new Criteria();
        
        $c->clearSelectColumns();
        $c->addSelectColumn(self::TEMPOGASTO);
        $c->addSelectColumn(self::CODIGOFUNCIONARIO);
        $c->addSelectColumn(RatePeer::RATE);
        
        
        $c->add(TarefaPeer::CODIGOPROJETO, $id, Criteria::EQUAL);
        
        $c->addJoin(self::CODIGOFUNCIONARIO, RatePeer::FUNCIONARIO,  Criteria::LEFT_JOIN);
        $c->addJoin(self::CODIGOTAREFA, TarefaPeer::CODIGOTAREFA,  Criteria::INNER_JOIN);
        $c->add(self::AUTORIZADO, 1 ,Criteria::EQUAL);
        $c->addGroupByColumn(self::CODIGOREGISTRO);
        $c->addAscendingOrderByColumn(self::CODIGOREGISTRO);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $real_hh = 0;
        while($res = $rs->fetch())
        {
            $real_hh_funcionario = $res['RATE'] * $res['TEMPOGASTO'];
            $real_hh = $real_hh + $real_hh_funcionario;
            
        }
        
        return $real_hh;
    }
    
    static public function getFuncionariosProjeto($id)
    {
        $c = new Criteria();
        
        $c->clearSelectColumns();
        
        $c->addSelectColumn(self::CODIGOREGISTRO);
        $c->addSelectColumn(self::CODIGOFUNCIONARIO);
        $c->addSelectColumn(LxUserPeer::NAME);
        
        
        $c->add(TarefaPeer::CODIGOPROJETO, $id, Criteria::EQUAL);
        
        
        $c->addJoin(self::CODIGOTAREFA, TarefaPeer::CODIGOTAREFA,  Criteria::INNER_JOIN);
        $c->addJoin(self::CODIGOFUNCIONARIO, LxUserPeer::ID_USER,  Criteria::INNER_JOIN);
        
        
        $c->addGroupByColumn(self::CODIGOFUNCIONARIO);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        
        while($res = $rs->fetch())
        {
            $dato['id']   = $res['CODIGOREGISTRO'];            
            $dato['funcionario']   = $res['CODIGOFUNCIONARIO'];            
            $dato['name']   = $res['NAME'];            
            $datos[] = $dato;
        }
        
        if(!empty($datos)){
            return $datos;
        }else{
            return false;
        }
    }
    
        
        
    public static function getTarefasForUserTrabajadas( $inicio, $fim)
    {
        $c = new Criteria();
        
        $c->add(self::CODIGOFUNCIONARIO,  sfContext::getInstance()->getUser()->getAttribute('idUserPanel'), Criteria::EQUAL);
        $c->add(self::DATAREAL, $inicio, Criteria::GREATER_EQUAL);
        $c->addAnd(self::DATAREAL, $fim, Criteria::LESS_EQUAL);
        //$c->add($cFecha);
        $c->addDescendingOrderByColumn(self::DATAREAL);
        //$c->addGroupByColumn(self::CODIGOTAREFA);
        return self::doSelect($c);
    }
            
    public static function getTarefasForProjeto( $inicio, $fim, $tarefa)
    {
        $c = new Criteria();
        $c->add(self::CODIGOFUNCIONARIO,  sfContext::getInstance()->getUser()->getAttribute('idUserPanel'), Criteria::EQUAL);
        $c->add(self::CODIGOTAREFA, $tarefa, Criteria::IN);
        $c->add(self::DATAREAL, $inicio, Criteria::GREATER_EQUAL);
        $c->addAnd(self::DATAREAL, $fim, Criteria::LESS_EQUAL);
        //$c->add($cFecha);
        $c->addDescendingOrderByColumn(self::DATAREAL);
        //$c->addGroupByColumn(TempotarefaPeer::CODIGOTAREFA);
        return self::doSelect($c);
    }
} // TempotarefaPeer
