<?php


/**
 * Skeleton subclass for performing query and update operations on the 'fornecedor_subtipo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 18/11/2013 11:22:48
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.sgws
 */
class FornecedorSubtipoPeer extends BaseFornecedorSubtipoPeer {
    
    public static function getEmpresas($idSubtipo)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_EMPRESA);
        $c->addSelectColumn(CadastroJuridicaPeer::NOME_FANTASIA);
        //Filtros
        $c->add(self::ID_SUBTIPO, $idSubtipo, Criteria::EQUAL);
        $c->addJoin(self::ID_EMPRESA,  CadastroJuridicaPeer::ID_EMPRESA, Criteria::INNER_JOIN);
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $dato['id']      = $res['ID_EMPRESA'];
            $dato['nome']    = $res['NOME_FANTASIA'];
            $datos[] = $dato;
        }
        if (!empty($datos)){
            return $datos;
        }else{
            return false;
        }
    }
    
    public static function deleitaVinculoEmpresa($id)
    {
        $con = Propel::getConnection();
	// select from...
	$c1 = new Criteria();
        $c1->add(self::ID_EMPRESA, $id, Criteria::EQUAL);
	// delete
        BasePeer::doDelete($c1, $con);
    }
    
    public static function checkSubTipoByUser($id, $idSubtipo)
    {
        $c = new Criteria();
        $c->add(self::ID_EMPRESA, $id, Criteria::EQUAL);
        $c->add(self::ID_SUBTIPO, $idSubtipo, Criteria::EQUAL);
        return self::doCount($c);
    }
    
    public static function getPRimerSubtipo($id)
    {
        $c = new Criteria();
        $c->add(self::ID_EMPRESA, $id, Criteria::EQUAL);
        $c->setLimit(1);
        return self::doSelectOne($c);
    }

} // FornecedorSubtipoPeer
