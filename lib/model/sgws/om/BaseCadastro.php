<?php

/**
 * Base class that represents a row from the 'cadastro' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 03/04/2014 12:04:41
 *
 * @package    lib.model.sgws.om
 */
abstract class BaseCadastro extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CadastroPeer
	 */
	protected static $peer;

	/**
	 * The value for the codigocadastro field.
	 * @var        int
	 */
	protected $codigocadastro;

	/**
	 * The value for the tipocadastro field.
	 * @var        string
	 */
	protected $tipocadastro;

	/**
	 * The value for the razaosocial field.
	 * @var        string
	 */
	protected $razaosocial;

	/**
	 * The value for the nomefantasia field.
	 * @var        string
	 */
	protected $nomefantasia;

	/**
	 * The value for the cnpj field.
	 * @var        string
	 */
	protected $cnpj;

	/**
	 * The value for the inscricaoestadual field.
	 * @var        string
	 */
	protected $inscricaoestadual;

	/**
	 * The value for the inscricaocom field.
	 * @var        string
	 */
	protected $inscricaocom;

	/**
	 * The value for the endereco field.
	 * @var        string
	 */
	protected $endereco;

	/**
	 * The value for the numero field.
	 * @var        string
	 */
	protected $numero;

	/**
	 * The value for the complemento field.
	 * @var        string
	 */
	protected $complemento;

	/**
	 * The value for the bairro field.
	 * @var        string
	 */
	protected $bairro;

	/**
	 * The value for the cidade field.
	 * @var        string
	 */
	protected $cidade;

	/**
	 * The value for the cep field.
	 * @var        string
	 */
	protected $cep;

	/**
	 * The value for the estado field.
	 * @var        string
	 */
	protected $estado;

	/**
	 * The value for the pais field.
	 * @var        string
	 */
	protected $pais;

	/**
	 * The value for the telefone field.
	 * @var        string
	 */
	protected $telefone;

	/**
	 * The value for the fax field.
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the contato1 field.
	 * @var        string
	 */
	protected $contato1;

	/**
	 * The value for the telefonecon1 field.
	 * @var        string
	 */
	protected $telefonecon1;

	/**
	 * The value for the celularcon1 field.
	 * @var        string
	 */
	protected $celularcon1;

	/**
	 * The value for the emailcontato1 field.
	 * @var        string
	 */
	protected $emailcontato1;

	/**
	 * The value for the contato2 field.
	 * @var        string
	 */
	protected $contato2;

	/**
	 * The value for the telefonecon2 field.
	 * @var        string
	 */
	protected $telefonecon2;

	/**
	 * The value for the celularcon2 field.
	 * @var        string
	 */
	protected $celularcon2;

	/**
	 * The value for the emailcontato2 field.
	 * @var        string
	 */
	protected $emailcontato2;

	/**
	 * The value for the contato3 field.
	 * @var        string
	 */
	protected $contato3;

	/**
	 * The value for the telefonecon3 field.
	 * @var        string
	 */
	protected $telefonecon3;

	/**
	 * The value for the celularcon3 field.
	 * @var        string
	 */
	protected $celularcon3;

	/**
	 * The value for the emailcontato3 field.
	 * @var        string
	 */
	protected $emailcontato3;

	/**
	 * The value for the contato4 field.
	 * @var        string
	 */
	protected $contato4;

	/**
	 * The value for the telefonecon4 field.
	 * @var        string
	 */
	protected $telefonecon4;

	/**
	 * The value for the celularcon4 field.
	 * @var        string
	 */
	protected $celularcon4;

	/**
	 * The value for the emailcontato4 field.
	 * @var        string
	 */
	protected $emailcontato4;

	/**
	 * The value for the contato5 field.
	 * @var        string
	 */
	protected $contato5;

	/**
	 * The value for the telefonecon5 field.
	 * @var        string
	 */
	protected $telefonecon5;

	/**
	 * The value for the celularcon5 field.
	 * @var        string
	 */
	protected $celularcon5;

	/**
	 * The value for the emailcontato5 field.
	 * @var        string
	 */
	protected $emailcontato5;

	/**
	 * The value for the enderecosite field.
	 * @var        string
	 */
	protected $enderecosite;

	/**
	 * The value for the nivelprivacidade field.
	 * @var        int
	 */
	protected $nivelprivacidade;

	/**
	 * The value for the codigocliente field.
	 * @var        string
	 */
	protected $codigocliente;

	/**
	 * The value for the subtipo field.
	 * @var        string
	 */
	protected $subtipo;

	/**
	 * The value for the categoria field.
	 * @var        int
	 */
	protected $categoria;

	/**
	 * The value for the status field.
	 * @var        string
	 */
	protected $status;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'CadastroPeer';

	/**
	 * Get the [codigocadastro] column value.
	 * 
	 * @return     int
	 */
	public function getCodigocadastro()
	{
		return $this->codigocadastro;
	}

	/**
	 * Get the [tipocadastro] column value.
	 * 
	 * @return     string
	 */
	public function getTipocadastro()
	{
		return $this->tipocadastro;
	}

	/**
	 * Get the [razaosocial] column value.
	 * 
	 * @return     string
	 */
	public function getRazaosocial()
	{
		return $this->razaosocial;
	}

	/**
	 * Get the [nomefantasia] column value.
	 * 
	 * @return     string
	 */
	public function getNomefantasia()
	{
		return $this->nomefantasia;
	}

	/**
	 * Get the [cnpj] column value.
	 * 
	 * @return     string
	 */
	public function getCnpj()
	{
		return $this->cnpj;
	}

	/**
	 * Get the [inscricaoestadual] column value.
	 * 
	 * @return     string
	 */
	public function getInscricaoestadual()
	{
		return $this->inscricaoestadual;
	}

	/**
	 * Get the [inscricaocom] column value.
	 * 
	 * @return     string
	 */
	public function getInscricaocom()
	{
		return $this->inscricaocom;
	}

	/**
	 * Get the [endereco] column value.
	 * 
	 * @return     string
	 */
	public function getEndereco()
	{
		return $this->endereco;
	}

	/**
	 * Get the [numero] column value.
	 * 
	 * @return     string
	 */
	public function getNumero()
	{
		return $this->numero;
	}

	/**
	 * Get the [complemento] column value.
	 * 
	 * @return     string
	 */
	public function getComplemento()
	{
		return $this->complemento;
	}

	/**
	 * Get the [bairro] column value.
	 * 
	 * @return     string
	 */
	public function getBairro()
	{
		return $this->bairro;
	}

	/**
	 * Get the [cidade] column value.
	 * 
	 * @return     string
	 */
	public function getCidade()
	{
		return $this->cidade;
	}

	/**
	 * Get the [cep] column value.
	 * 
	 * @return     string
	 */
	public function getCep()
	{
		return $this->cep;
	}

	/**
	 * Get the [estado] column value.
	 * 
	 * @return     string
	 */
	public function getEstado()
	{
		return $this->estado;
	}

	/**
	 * Get the [pais] column value.
	 * 
	 * @return     string
	 */
	public function getPais()
	{
		return $this->pais;
	}

	/**
	 * Get the [telefone] column value.
	 * 
	 * @return     string
	 */
	public function getTelefone()
	{
		return $this->telefone;
	}

	/**
	 * Get the [fax] column value.
	 * 
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [contato1] column value.
	 * 
	 * @return     string
	 */
	public function getContato1()
	{
		return $this->contato1;
	}

	/**
	 * Get the [telefonecon1] column value.
	 * 
	 * @return     string
	 */
	public function getTelefonecon1()
	{
		return $this->telefonecon1;
	}

	/**
	 * Get the [celularcon1] column value.
	 * 
	 * @return     string
	 */
	public function getCelularcon1()
	{
		return $this->celularcon1;
	}

	/**
	 * Get the [emailcontato1] column value.
	 * 
	 * @return     string
	 */
	public function getEmailcontato1()
	{
		return $this->emailcontato1;
	}

	/**
	 * Get the [contato2] column value.
	 * 
	 * @return     string
	 */
	public function getContato2()
	{
		return $this->contato2;
	}

	/**
	 * Get the [telefonecon2] column value.
	 * 
	 * @return     string
	 */
	public function getTelefonecon2()
	{
		return $this->telefonecon2;
	}

	/**
	 * Get the [celularcon2] column value.
	 * 
	 * @return     string
	 */
	public function getCelularcon2()
	{
		return $this->celularcon2;
	}

	/**
	 * Get the [emailcontato2] column value.
	 * 
	 * @return     string
	 */
	public function getEmailcontato2()
	{
		return $this->emailcontato2;
	}

	/**
	 * Get the [contato3] column value.
	 * 
	 * @return     string
	 */
	public function getContato3()
	{
		return $this->contato3;
	}

	/**
	 * Get the [telefonecon3] column value.
	 * 
	 * @return     string
	 */
	public function getTelefonecon3()
	{
		return $this->telefonecon3;
	}

	/**
	 * Get the [celularcon3] column value.
	 * 
	 * @return     string
	 */
	public function getCelularcon3()
	{
		return $this->celularcon3;
	}

	/**
	 * Get the [emailcontato3] column value.
	 * 
	 * @return     string
	 */
	public function getEmailcontato3()
	{
		return $this->emailcontato3;
	}

	/**
	 * Get the [contato4] column value.
	 * 
	 * @return     string
	 */
	public function getContato4()
	{
		return $this->contato4;
	}

	/**
	 * Get the [telefonecon4] column value.
	 * 
	 * @return     string
	 */
	public function getTelefonecon4()
	{
		return $this->telefonecon4;
	}

	/**
	 * Get the [celularcon4] column value.
	 * 
	 * @return     string
	 */
	public function getCelularcon4()
	{
		return $this->celularcon4;
	}

	/**
	 * Get the [emailcontato4] column value.
	 * 
	 * @return     string
	 */
	public function getEmailcontato4()
	{
		return $this->emailcontato4;
	}

	/**
	 * Get the [contato5] column value.
	 * 
	 * @return     string
	 */
	public function getContato5()
	{
		return $this->contato5;
	}

	/**
	 * Get the [telefonecon5] column value.
	 * 
	 * @return     string
	 */
	public function getTelefonecon5()
	{
		return $this->telefonecon5;
	}

	/**
	 * Get the [celularcon5] column value.
	 * 
	 * @return     string
	 */
	public function getCelularcon5()
	{
		return $this->celularcon5;
	}

	/**
	 * Get the [emailcontato5] column value.
	 * 
	 * @return     string
	 */
	public function getEmailcontato5()
	{
		return $this->emailcontato5;
	}

	/**
	 * Get the [enderecosite] column value.
	 * 
	 * @return     string
	 */
	public function getEnderecosite()
	{
		return $this->enderecosite;
	}

	/**
	 * Get the [nivelprivacidade] column value.
	 * 
	 * @return     int
	 */
	public function getNivelprivacidade()
	{
		return $this->nivelprivacidade;
	}

	/**
	 * Get the [codigocliente] column value.
	 * 
	 * @return     string
	 */
	public function getCodigocliente()
	{
		return $this->codigocliente;
	}

	/**
	 * Get the [subtipo] column value.
	 * 
	 * @return     string
	 */
	public function getSubtipo()
	{
		return $this->subtipo;
	}

	/**
	 * Get the [categoria] column value.
	 * 
	 * @return     int
	 */
	public function getCategoria()
	{
		return $this->categoria;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     string
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Set the value of [codigocadastro] column.
	 * 
	 * @param      int $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCodigocadastro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigocadastro !== $v) {
			$this->codigocadastro = $v;
			$this->modifiedColumns[] = CadastroPeer::CODIGOCADASTRO;
		}

		return $this;
	} // setCodigocadastro()

	/**
	 * Set the value of [tipocadastro] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setTipocadastro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipocadastro !== $v) {
			$this->tipocadastro = $v;
			$this->modifiedColumns[] = CadastroPeer::TIPOCADASTRO;
		}

		return $this;
	} // setTipocadastro()

	/**
	 * Set the value of [razaosocial] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setRazaosocial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->razaosocial !== $v) {
			$this->razaosocial = $v;
			$this->modifiedColumns[] = CadastroPeer::RAZAOSOCIAL;
		}

		return $this;
	} // setRazaosocial()

	/**
	 * Set the value of [nomefantasia] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setNomefantasia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nomefantasia !== $v) {
			$this->nomefantasia = $v;
			$this->modifiedColumns[] = CadastroPeer::NOMEFANTASIA;
		}

		return $this;
	} // setNomefantasia()

	/**
	 * Set the value of [cnpj] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCnpj($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cnpj !== $v) {
			$this->cnpj = $v;
			$this->modifiedColumns[] = CadastroPeer::CNPJ;
		}

		return $this;
	} // setCnpj()

	/**
	 * Set the value of [inscricaoestadual] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setInscricaoestadual($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->inscricaoestadual !== $v) {
			$this->inscricaoestadual = $v;
			$this->modifiedColumns[] = CadastroPeer::INSCRICAOESTADUAL;
		}

		return $this;
	} // setInscricaoestadual()

	/**
	 * Set the value of [inscricaocom] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setInscricaocom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->inscricaocom !== $v) {
			$this->inscricaocom = $v;
			$this->modifiedColumns[] = CadastroPeer::INSCRICAOCOM;
		}

		return $this;
	} // setInscricaocom()

	/**
	 * Set the value of [endereco] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEndereco($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->endereco !== $v) {
			$this->endereco = $v;
			$this->modifiedColumns[] = CadastroPeer::ENDERECO;
		}

		return $this;
	} // setEndereco()

	/**
	 * Set the value of [numero] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setNumero($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numero !== $v) {
			$this->numero = $v;
			$this->modifiedColumns[] = CadastroPeer::NUMERO;
		}

		return $this;
	} // setNumero()

	/**
	 * Set the value of [complemento] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setComplemento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->complemento !== $v) {
			$this->complemento = $v;
			$this->modifiedColumns[] = CadastroPeer::COMPLEMENTO;
		}

		return $this;
	} // setComplemento()

	/**
	 * Set the value of [bairro] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setBairro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bairro !== $v) {
			$this->bairro = $v;
			$this->modifiedColumns[] = CadastroPeer::BAIRRO;
		}

		return $this;
	} // setBairro()

	/**
	 * Set the value of [cidade] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCidade($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cidade !== $v) {
			$this->cidade = $v;
			$this->modifiedColumns[] = CadastroPeer::CIDADE;
		}

		return $this;
	} // setCidade()

	/**
	 * Set the value of [cep] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCep($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cep !== $v) {
			$this->cep = $v;
			$this->modifiedColumns[] = CadastroPeer::CEP;
		}

		return $this;
	} // setCep()

	/**
	 * Set the value of [estado] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEstado($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->estado !== $v) {
			$this->estado = $v;
			$this->modifiedColumns[] = CadastroPeer::ESTADO;
		}

		return $this;
	} // setEstado()

	/**
	 * Set the value of [pais] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setPais($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pais !== $v) {
			$this->pais = $v;
			$this->modifiedColumns[] = CadastroPeer::PAIS;
		}

		return $this;
	} // setPais()

	/**
	 * Set the value of [telefone] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setTelefone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefone !== $v) {
			$this->telefone = $v;
			$this->modifiedColumns[] = CadastroPeer::TELEFONE;
		}

		return $this;
	} // setTelefone()

	/**
	 * Set the value of [fax] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v) {
			$this->fax = $v;
			$this->modifiedColumns[] = CadastroPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = CadastroPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [contato1] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setContato1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contato1 !== $v) {
			$this->contato1 = $v;
			$this->modifiedColumns[] = CadastroPeer::CONTATO1;
		}

		return $this;
	} // setContato1()

	/**
	 * Set the value of [telefonecon1] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setTelefonecon1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefonecon1 !== $v) {
			$this->telefonecon1 = $v;
			$this->modifiedColumns[] = CadastroPeer::TELEFONECON1;
		}

		return $this;
	} // setTelefonecon1()

	/**
	 * Set the value of [celularcon1] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCelularcon1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celularcon1 !== $v) {
			$this->celularcon1 = $v;
			$this->modifiedColumns[] = CadastroPeer::CELULARCON1;
		}

		return $this;
	} // setCelularcon1()

	/**
	 * Set the value of [emailcontato1] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEmailcontato1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emailcontato1 !== $v) {
			$this->emailcontato1 = $v;
			$this->modifiedColumns[] = CadastroPeer::EMAILCONTATO1;
		}

		return $this;
	} // setEmailcontato1()

	/**
	 * Set the value of [contato2] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setContato2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contato2 !== $v) {
			$this->contato2 = $v;
			$this->modifiedColumns[] = CadastroPeer::CONTATO2;
		}

		return $this;
	} // setContato2()

	/**
	 * Set the value of [telefonecon2] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setTelefonecon2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefonecon2 !== $v) {
			$this->telefonecon2 = $v;
			$this->modifiedColumns[] = CadastroPeer::TELEFONECON2;
		}

		return $this;
	} // setTelefonecon2()

	/**
	 * Set the value of [celularcon2] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCelularcon2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celularcon2 !== $v) {
			$this->celularcon2 = $v;
			$this->modifiedColumns[] = CadastroPeer::CELULARCON2;
		}

		return $this;
	} // setCelularcon2()

	/**
	 * Set the value of [emailcontato2] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEmailcontato2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emailcontato2 !== $v) {
			$this->emailcontato2 = $v;
			$this->modifiedColumns[] = CadastroPeer::EMAILCONTATO2;
		}

		return $this;
	} // setEmailcontato2()

	/**
	 * Set the value of [contato3] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setContato3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contato3 !== $v) {
			$this->contato3 = $v;
			$this->modifiedColumns[] = CadastroPeer::CONTATO3;
		}

		return $this;
	} // setContato3()

	/**
	 * Set the value of [telefonecon3] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setTelefonecon3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefonecon3 !== $v) {
			$this->telefonecon3 = $v;
			$this->modifiedColumns[] = CadastroPeer::TELEFONECON3;
		}

		return $this;
	} // setTelefonecon3()

	/**
	 * Set the value of [celularcon3] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCelularcon3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celularcon3 !== $v) {
			$this->celularcon3 = $v;
			$this->modifiedColumns[] = CadastroPeer::CELULARCON3;
		}

		return $this;
	} // setCelularcon3()

	/**
	 * Set the value of [emailcontato3] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEmailcontato3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emailcontato3 !== $v) {
			$this->emailcontato3 = $v;
			$this->modifiedColumns[] = CadastroPeer::EMAILCONTATO3;
		}

		return $this;
	} // setEmailcontato3()

	/**
	 * Set the value of [contato4] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setContato4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contato4 !== $v) {
			$this->contato4 = $v;
			$this->modifiedColumns[] = CadastroPeer::CONTATO4;
		}

		return $this;
	} // setContato4()

	/**
	 * Set the value of [telefonecon4] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setTelefonecon4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefonecon4 !== $v) {
			$this->telefonecon4 = $v;
			$this->modifiedColumns[] = CadastroPeer::TELEFONECON4;
		}

		return $this;
	} // setTelefonecon4()

	/**
	 * Set the value of [celularcon4] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCelularcon4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celularcon4 !== $v) {
			$this->celularcon4 = $v;
			$this->modifiedColumns[] = CadastroPeer::CELULARCON4;
		}

		return $this;
	} // setCelularcon4()

	/**
	 * Set the value of [emailcontato4] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEmailcontato4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emailcontato4 !== $v) {
			$this->emailcontato4 = $v;
			$this->modifiedColumns[] = CadastroPeer::EMAILCONTATO4;
		}

		return $this;
	} // setEmailcontato4()

	/**
	 * Set the value of [contato5] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setContato5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contato5 !== $v) {
			$this->contato5 = $v;
			$this->modifiedColumns[] = CadastroPeer::CONTATO5;
		}

		return $this;
	} // setContato5()

	/**
	 * Set the value of [telefonecon5] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setTelefonecon5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefonecon5 !== $v) {
			$this->telefonecon5 = $v;
			$this->modifiedColumns[] = CadastroPeer::TELEFONECON5;
		}

		return $this;
	} // setTelefonecon5()

	/**
	 * Set the value of [celularcon5] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCelularcon5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celularcon5 !== $v) {
			$this->celularcon5 = $v;
			$this->modifiedColumns[] = CadastroPeer::CELULARCON5;
		}

		return $this;
	} // setCelularcon5()

	/**
	 * Set the value of [emailcontato5] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEmailcontato5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emailcontato5 !== $v) {
			$this->emailcontato5 = $v;
			$this->modifiedColumns[] = CadastroPeer::EMAILCONTATO5;
		}

		return $this;
	} // setEmailcontato5()

	/**
	 * Set the value of [enderecosite] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEnderecosite($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->enderecosite !== $v) {
			$this->enderecosite = $v;
			$this->modifiedColumns[] = CadastroPeer::ENDERECOSITE;
		}

		return $this;
	} // setEnderecosite()

	/**
	 * Set the value of [nivelprivacidade] column.
	 * 
	 * @param      int $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setNivelprivacidade($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nivelprivacidade !== $v) {
			$this->nivelprivacidade = $v;
			$this->modifiedColumns[] = CadastroPeer::NIVELPRIVACIDADE;
		}

		return $this;
	} // setNivelprivacidade()

	/**
	 * Set the value of [codigocliente] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCodigocliente($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigocliente !== $v) {
			$this->codigocliente = $v;
			$this->modifiedColumns[] = CadastroPeer::CODIGOCLIENTE;
		}

		return $this;
	} // setCodigocliente()

	/**
	 * Set the value of [subtipo] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setSubtipo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subtipo !== $v) {
			$this->subtipo = $v;
			$this->modifiedColumns[] = CadastroPeer::SUBTIPO;
		}

		return $this;
	} // setSubtipo()

	/**
	 * Set the value of [categoria] column.
	 * 
	 * @param      int $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCategoria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->categoria !== $v) {
			$this->categoria = $v;
			$this->modifiedColumns[] = CadastroPeer::CATEGORIA;
		}

		return $this;
	} // setCategoria()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = CadastroPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->codigocadastro = (isset($row[$startcol + 0]) && $row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->tipocadastro = (isset($row[$startcol + 1]) && $row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->razaosocial = (isset($row[$startcol + 2]) && $row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->nomefantasia = (isset($row[$startcol + 3]) && $row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->cnpj = (isset($row[$startcol + 4]) && $row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->inscricaoestadual = (isset($row[$startcol + 5]) && $row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->inscricaocom = (isset($row[$startcol + 6]) && $row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->endereco = (isset($row[$startcol + 7]) && $row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->numero = (isset($row[$startcol + 8]) && $row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->complemento = (isset($row[$startcol + 9]) && $row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->bairro = (isset($row[$startcol + 10]) && $row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->cidade = (isset($row[$startcol + 11]) && $row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->cep = (isset($row[$startcol + 12]) && $row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->estado = (isset($row[$startcol + 13]) && $row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->pais = (isset($row[$startcol + 14]) && $row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->telefone = (isset($row[$startcol + 15]) && $row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->fax = (isset($row[$startcol + 16]) && $row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->email = (isset($row[$startcol + 17]) && $row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->contato1 = (isset($row[$startcol + 18]) && $row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->telefonecon1 = (isset($row[$startcol + 19]) && $row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->celularcon1 = (isset($row[$startcol + 20]) && $row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->emailcontato1 = (isset($row[$startcol + 21]) && $row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->contato2 = (isset($row[$startcol + 22]) && $row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->telefonecon2 = (isset($row[$startcol + 23]) && $row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->celularcon2 = (isset($row[$startcol + 24]) && $row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->emailcontato2 = (isset($row[$startcol + 25]) && $row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->contato3 = (isset($row[$startcol + 26]) && $row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->telefonecon3 = (isset($row[$startcol + 27]) && $row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->celularcon3 = (isset($row[$startcol + 28]) && $row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->emailcontato3 = (isset($row[$startcol + 29]) && $row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->contato4 = (isset($row[$startcol + 30]) && $row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->telefonecon4 = (isset($row[$startcol + 31]) && $row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->celularcon4 = (isset($row[$startcol + 32]) && $row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->emailcontato4 = (isset($row[$startcol + 33]) && $row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->contato5 = (isset($row[$startcol + 34]) && $row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->telefonecon5 = (isset($row[$startcol + 35]) && $row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->celularcon5 = (isset($row[$startcol + 36]) && $row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->emailcontato5 = (isset($row[$startcol + 37]) && $row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->enderecosite = (isset($row[$startcol + 38]) && $row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->nivelprivacidade = (isset($row[$startcol + 39]) && $row[$startcol + 39] !== null) ? (int) $row[$startcol + 39] : null;
			$this->codigocliente = (isset($row[$startcol + 40]) && $row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->subtipo = (isset($row[$startcol + 41]) && $row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->categoria = (isset($row[$startcol + 42]) && $row[$startcol + 42] !== null) ? (int) $row[$startcol + 42] : null;
			$this->status = (isset($row[$startcol + 43]) && $row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 44; // 44 = CadastroPeer::NUM_COLUMNS - CadastroPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Cadastro object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CadastroPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CadastroPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CadastroPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCadastro:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				CadastroPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCadastro:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CadastroPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCadastro:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCadastro:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				CadastroPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CadastroPeer::CODIGOCADASTRO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CadastroPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCodigocadastro($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CadastroPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = CadastroPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CadastroPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCodigocadastro();
				break;
			case 1:
				return $this->getTipocadastro();
				break;
			case 2:
				return $this->getRazaosocial();
				break;
			case 3:
				return $this->getNomefantasia();
				break;
			case 4:
				return $this->getCnpj();
				break;
			case 5:
				return $this->getInscricaoestadual();
				break;
			case 6:
				return $this->getInscricaocom();
				break;
			case 7:
				return $this->getEndereco();
				break;
			case 8:
				return $this->getNumero();
				break;
			case 9:
				return $this->getComplemento();
				break;
			case 10:
				return $this->getBairro();
				break;
			case 11:
				return $this->getCidade();
				break;
			case 12:
				return $this->getCep();
				break;
			case 13:
				return $this->getEstado();
				break;
			case 14:
				return $this->getPais();
				break;
			case 15:
				return $this->getTelefone();
				break;
			case 16:
				return $this->getFax();
				break;
			case 17:
				return $this->getEmail();
				break;
			case 18:
				return $this->getContato1();
				break;
			case 19:
				return $this->getTelefonecon1();
				break;
			case 20:
				return $this->getCelularcon1();
				break;
			case 21:
				return $this->getEmailcontato1();
				break;
			case 22:
				return $this->getContato2();
				break;
			case 23:
				return $this->getTelefonecon2();
				break;
			case 24:
				return $this->getCelularcon2();
				break;
			case 25:
				return $this->getEmailcontato2();
				break;
			case 26:
				return $this->getContato3();
				break;
			case 27:
				return $this->getTelefonecon3();
				break;
			case 28:
				return $this->getCelularcon3();
				break;
			case 29:
				return $this->getEmailcontato3();
				break;
			case 30:
				return $this->getContato4();
				break;
			case 31:
				return $this->getTelefonecon4();
				break;
			case 32:
				return $this->getCelularcon4();
				break;
			case 33:
				return $this->getEmailcontato4();
				break;
			case 34:
				return $this->getContato5();
				break;
			case 35:
				return $this->getTelefonecon5();
				break;
			case 36:
				return $this->getCelularcon5();
				break;
			case 37:
				return $this->getEmailcontato5();
				break;
			case 38:
				return $this->getEnderecosite();
				break;
			case 39:
				return $this->getNivelprivacidade();
				break;
			case 40:
				return $this->getCodigocliente();
				break;
			case 41:
				return $this->getSubtipo();
				break;
			case 42:
				return $this->getCategoria();
				break;
			case 43:
				return $this->getStatus();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CadastroPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCodigocadastro(),
			$keys[1] => $this->getTipocadastro(),
			$keys[2] => $this->getRazaosocial(),
			$keys[3] => $this->getNomefantasia(),
			$keys[4] => $this->getCnpj(),
			$keys[5] => $this->getInscricaoestadual(),
			$keys[6] => $this->getInscricaocom(),
			$keys[7] => $this->getEndereco(),
			$keys[8] => $this->getNumero(),
			$keys[9] => $this->getComplemento(),
			$keys[10] => $this->getBairro(),
			$keys[11] => $this->getCidade(),
			$keys[12] => $this->getCep(),
			$keys[13] => $this->getEstado(),
			$keys[14] => $this->getPais(),
			$keys[15] => $this->getTelefone(),
			$keys[16] => $this->getFax(),
			$keys[17] => $this->getEmail(),
			$keys[18] => $this->getContato1(),
			$keys[19] => $this->getTelefonecon1(),
			$keys[20] => $this->getCelularcon1(),
			$keys[21] => $this->getEmailcontato1(),
			$keys[22] => $this->getContato2(),
			$keys[23] => $this->getTelefonecon2(),
			$keys[24] => $this->getCelularcon2(),
			$keys[25] => $this->getEmailcontato2(),
			$keys[26] => $this->getContato3(),
			$keys[27] => $this->getTelefonecon3(),
			$keys[28] => $this->getCelularcon3(),
			$keys[29] => $this->getEmailcontato3(),
			$keys[30] => $this->getContato4(),
			$keys[31] => $this->getTelefonecon4(),
			$keys[32] => $this->getCelularcon4(),
			$keys[33] => $this->getEmailcontato4(),
			$keys[34] => $this->getContato5(),
			$keys[35] => $this->getTelefonecon5(),
			$keys[36] => $this->getCelularcon5(),
			$keys[37] => $this->getEmailcontato5(),
			$keys[38] => $this->getEnderecosite(),
			$keys[39] => $this->getNivelprivacidade(),
			$keys[40] => $this->getCodigocliente(),
			$keys[41] => $this->getSubtipo(),
			$keys[42] => $this->getCategoria(),
			$keys[43] => $this->getStatus(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CadastroPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCodigocadastro($value);
				break;
			case 1:
				$this->setTipocadastro($value);
				break;
			case 2:
				$this->setRazaosocial($value);
				break;
			case 3:
				$this->setNomefantasia($value);
				break;
			case 4:
				$this->setCnpj($value);
				break;
			case 5:
				$this->setInscricaoestadual($value);
				break;
			case 6:
				$this->setInscricaocom($value);
				break;
			case 7:
				$this->setEndereco($value);
				break;
			case 8:
				$this->setNumero($value);
				break;
			case 9:
				$this->setComplemento($value);
				break;
			case 10:
				$this->setBairro($value);
				break;
			case 11:
				$this->setCidade($value);
				break;
			case 12:
				$this->setCep($value);
				break;
			case 13:
				$this->setEstado($value);
				break;
			case 14:
				$this->setPais($value);
				break;
			case 15:
				$this->setTelefone($value);
				break;
			case 16:
				$this->setFax($value);
				break;
			case 17:
				$this->setEmail($value);
				break;
			case 18:
				$this->setContato1($value);
				break;
			case 19:
				$this->setTelefonecon1($value);
				break;
			case 20:
				$this->setCelularcon1($value);
				break;
			case 21:
				$this->setEmailcontato1($value);
				break;
			case 22:
				$this->setContato2($value);
				break;
			case 23:
				$this->setTelefonecon2($value);
				break;
			case 24:
				$this->setCelularcon2($value);
				break;
			case 25:
				$this->setEmailcontato2($value);
				break;
			case 26:
				$this->setContato3($value);
				break;
			case 27:
				$this->setTelefonecon3($value);
				break;
			case 28:
				$this->setCelularcon3($value);
				break;
			case 29:
				$this->setEmailcontato3($value);
				break;
			case 30:
				$this->setContato4($value);
				break;
			case 31:
				$this->setTelefonecon4($value);
				break;
			case 32:
				$this->setCelularcon4($value);
				break;
			case 33:
				$this->setEmailcontato4($value);
				break;
			case 34:
				$this->setContato5($value);
				break;
			case 35:
				$this->setTelefonecon5($value);
				break;
			case 36:
				$this->setCelularcon5($value);
				break;
			case 37:
				$this->setEmailcontato5($value);
				break;
			case 38:
				$this->setEnderecosite($value);
				break;
			case 39:
				$this->setNivelprivacidade($value);
				break;
			case 40:
				$this->setCodigocliente($value);
				break;
			case 41:
				$this->setSubtipo($value);
				break;
			case 42:
				$this->setCategoria($value);
				break;
			case 43:
				$this->setStatus($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CadastroPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCodigocadastro($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTipocadastro($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setRazaosocial($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNomefantasia($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCnpj($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setInscricaoestadual($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setInscricaocom($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEndereco($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNumero($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setComplemento($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setBairro($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCidade($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCep($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setEstado($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setPais($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTelefone($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setFax($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setEmail($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setContato1($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setTelefonecon1($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCelularcon1($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setEmailcontato1($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setContato2($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setTelefonecon2($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setCelularcon2($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setEmailcontato2($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setContato3($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setTelefonecon3($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setCelularcon3($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setEmailcontato3($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setContato4($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setTelefonecon4($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCelularcon4($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setEmailcontato4($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setContato5($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setTelefonecon5($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setCelularcon5($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setEmailcontato5($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setEnderecosite($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setNivelprivacidade($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setCodigocliente($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setSubtipo($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setCategoria($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setStatus($arr[$keys[43]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CadastroPeer::DATABASE_NAME);

		if ($this->isColumnModified(CadastroPeer::CODIGOCADASTRO)) $criteria->add(CadastroPeer::CODIGOCADASTRO, $this->codigocadastro);
		if ($this->isColumnModified(CadastroPeer::TIPOCADASTRO)) $criteria->add(CadastroPeer::TIPOCADASTRO, $this->tipocadastro);
		if ($this->isColumnModified(CadastroPeer::RAZAOSOCIAL)) $criteria->add(CadastroPeer::RAZAOSOCIAL, $this->razaosocial);
		if ($this->isColumnModified(CadastroPeer::NOMEFANTASIA)) $criteria->add(CadastroPeer::NOMEFANTASIA, $this->nomefantasia);
		if ($this->isColumnModified(CadastroPeer::CNPJ)) $criteria->add(CadastroPeer::CNPJ, $this->cnpj);
		if ($this->isColumnModified(CadastroPeer::INSCRICAOESTADUAL)) $criteria->add(CadastroPeer::INSCRICAOESTADUAL, $this->inscricaoestadual);
		if ($this->isColumnModified(CadastroPeer::INSCRICAOCOM)) $criteria->add(CadastroPeer::INSCRICAOCOM, $this->inscricaocom);
		if ($this->isColumnModified(CadastroPeer::ENDERECO)) $criteria->add(CadastroPeer::ENDERECO, $this->endereco);
		if ($this->isColumnModified(CadastroPeer::NUMERO)) $criteria->add(CadastroPeer::NUMERO, $this->numero);
		if ($this->isColumnModified(CadastroPeer::COMPLEMENTO)) $criteria->add(CadastroPeer::COMPLEMENTO, $this->complemento);
		if ($this->isColumnModified(CadastroPeer::BAIRRO)) $criteria->add(CadastroPeer::BAIRRO, $this->bairro);
		if ($this->isColumnModified(CadastroPeer::CIDADE)) $criteria->add(CadastroPeer::CIDADE, $this->cidade);
		if ($this->isColumnModified(CadastroPeer::CEP)) $criteria->add(CadastroPeer::CEP, $this->cep);
		if ($this->isColumnModified(CadastroPeer::ESTADO)) $criteria->add(CadastroPeer::ESTADO, $this->estado);
		if ($this->isColumnModified(CadastroPeer::PAIS)) $criteria->add(CadastroPeer::PAIS, $this->pais);
		if ($this->isColumnModified(CadastroPeer::TELEFONE)) $criteria->add(CadastroPeer::TELEFONE, $this->telefone);
		if ($this->isColumnModified(CadastroPeer::FAX)) $criteria->add(CadastroPeer::FAX, $this->fax);
		if ($this->isColumnModified(CadastroPeer::EMAIL)) $criteria->add(CadastroPeer::EMAIL, $this->email);
		if ($this->isColumnModified(CadastroPeer::CONTATO1)) $criteria->add(CadastroPeer::CONTATO1, $this->contato1);
		if ($this->isColumnModified(CadastroPeer::TELEFONECON1)) $criteria->add(CadastroPeer::TELEFONECON1, $this->telefonecon1);
		if ($this->isColumnModified(CadastroPeer::CELULARCON1)) $criteria->add(CadastroPeer::CELULARCON1, $this->celularcon1);
		if ($this->isColumnModified(CadastroPeer::EMAILCONTATO1)) $criteria->add(CadastroPeer::EMAILCONTATO1, $this->emailcontato1);
		if ($this->isColumnModified(CadastroPeer::CONTATO2)) $criteria->add(CadastroPeer::CONTATO2, $this->contato2);
		if ($this->isColumnModified(CadastroPeer::TELEFONECON2)) $criteria->add(CadastroPeer::TELEFONECON2, $this->telefonecon2);
		if ($this->isColumnModified(CadastroPeer::CELULARCON2)) $criteria->add(CadastroPeer::CELULARCON2, $this->celularcon2);
		if ($this->isColumnModified(CadastroPeer::EMAILCONTATO2)) $criteria->add(CadastroPeer::EMAILCONTATO2, $this->emailcontato2);
		if ($this->isColumnModified(CadastroPeer::CONTATO3)) $criteria->add(CadastroPeer::CONTATO3, $this->contato3);
		if ($this->isColumnModified(CadastroPeer::TELEFONECON3)) $criteria->add(CadastroPeer::TELEFONECON3, $this->telefonecon3);
		if ($this->isColumnModified(CadastroPeer::CELULARCON3)) $criteria->add(CadastroPeer::CELULARCON3, $this->celularcon3);
		if ($this->isColumnModified(CadastroPeer::EMAILCONTATO3)) $criteria->add(CadastroPeer::EMAILCONTATO3, $this->emailcontato3);
		if ($this->isColumnModified(CadastroPeer::CONTATO4)) $criteria->add(CadastroPeer::CONTATO4, $this->contato4);
		if ($this->isColumnModified(CadastroPeer::TELEFONECON4)) $criteria->add(CadastroPeer::TELEFONECON4, $this->telefonecon4);
		if ($this->isColumnModified(CadastroPeer::CELULARCON4)) $criteria->add(CadastroPeer::CELULARCON4, $this->celularcon4);
		if ($this->isColumnModified(CadastroPeer::EMAILCONTATO4)) $criteria->add(CadastroPeer::EMAILCONTATO4, $this->emailcontato4);
		if ($this->isColumnModified(CadastroPeer::CONTATO5)) $criteria->add(CadastroPeer::CONTATO5, $this->contato5);
		if ($this->isColumnModified(CadastroPeer::TELEFONECON5)) $criteria->add(CadastroPeer::TELEFONECON5, $this->telefonecon5);
		if ($this->isColumnModified(CadastroPeer::CELULARCON5)) $criteria->add(CadastroPeer::CELULARCON5, $this->celularcon5);
		if ($this->isColumnModified(CadastroPeer::EMAILCONTATO5)) $criteria->add(CadastroPeer::EMAILCONTATO5, $this->emailcontato5);
		if ($this->isColumnModified(CadastroPeer::ENDERECOSITE)) $criteria->add(CadastroPeer::ENDERECOSITE, $this->enderecosite);
		if ($this->isColumnModified(CadastroPeer::NIVELPRIVACIDADE)) $criteria->add(CadastroPeer::NIVELPRIVACIDADE, $this->nivelprivacidade);
		if ($this->isColumnModified(CadastroPeer::CODIGOCLIENTE)) $criteria->add(CadastroPeer::CODIGOCLIENTE, $this->codigocliente);
		if ($this->isColumnModified(CadastroPeer::SUBTIPO)) $criteria->add(CadastroPeer::SUBTIPO, $this->subtipo);
		if ($this->isColumnModified(CadastroPeer::CATEGORIA)) $criteria->add(CadastroPeer::CATEGORIA, $this->categoria);
		if ($this->isColumnModified(CadastroPeer::STATUS)) $criteria->add(CadastroPeer::STATUS, $this->status);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CadastroPeer::DATABASE_NAME);

		$criteria->add(CadastroPeer::CODIGOCADASTRO, $this->codigocadastro);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getCodigocadastro();
	}

	/**
	 * Generic method to set the primary key (codigocadastro column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCodigocadastro($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Cadastro (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTipocadastro($this->tipocadastro);

		$copyObj->setRazaosocial($this->razaosocial);

		$copyObj->setNomefantasia($this->nomefantasia);

		$copyObj->setCnpj($this->cnpj);

		$copyObj->setInscricaoestadual($this->inscricaoestadual);

		$copyObj->setInscricaocom($this->inscricaocom);

		$copyObj->setEndereco($this->endereco);

		$copyObj->setNumero($this->numero);

		$copyObj->setComplemento($this->complemento);

		$copyObj->setBairro($this->bairro);

		$copyObj->setCidade($this->cidade);

		$copyObj->setCep($this->cep);

		$copyObj->setEstado($this->estado);

		$copyObj->setPais($this->pais);

		$copyObj->setTelefone($this->telefone);

		$copyObj->setFax($this->fax);

		$copyObj->setEmail($this->email);

		$copyObj->setContato1($this->contato1);

		$copyObj->setTelefonecon1($this->telefonecon1);

		$copyObj->setCelularcon1($this->celularcon1);

		$copyObj->setEmailcontato1($this->emailcontato1);

		$copyObj->setContato2($this->contato2);

		$copyObj->setTelefonecon2($this->telefonecon2);

		$copyObj->setCelularcon2($this->celularcon2);

		$copyObj->setEmailcontato2($this->emailcontato2);

		$copyObj->setContato3($this->contato3);

		$copyObj->setTelefonecon3($this->telefonecon3);

		$copyObj->setCelularcon3($this->celularcon3);

		$copyObj->setEmailcontato3($this->emailcontato3);

		$copyObj->setContato4($this->contato4);

		$copyObj->setTelefonecon4($this->telefonecon4);

		$copyObj->setCelularcon4($this->celularcon4);

		$copyObj->setEmailcontato4($this->emailcontato4);

		$copyObj->setContato5($this->contato5);

		$copyObj->setTelefonecon5($this->telefonecon5);

		$copyObj->setCelularcon5($this->celularcon5);

		$copyObj->setEmailcontato5($this->emailcontato5);

		$copyObj->setEnderecosite($this->enderecosite);

		$copyObj->setNivelprivacidade($this->nivelprivacidade);

		$copyObj->setCodigocliente($this->codigocliente);

		$copyObj->setSubtipo($this->subtipo);

		$copyObj->setCategoria($this->categoria);

		$copyObj->setStatus($this->status);


		$copyObj->setNew(true);

		$copyObj->setCodigocadastro(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Cadastro Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CadastroPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CadastroPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseCadastro:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseCadastro::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseCadastro
