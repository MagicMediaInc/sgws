<?php

/**
 * Base class that represents a row from the 'saidas' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 03/04/2014 12:04:43
 *
 * @package    lib.model.sgws.om
 */
abstract class BaseSaidas extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        SaidasPeer
	 */
	protected static $peer;

	/**
	 * The value for the codigo_saida field.
	 * @var        int
	 */
	protected $codigo_saida;

	/**
	 * The value for the id_compensacao field.
	 * @var        int
	 */
	protected $id_compensacao;

	/**
	 * The value for the id_pedido field.
	 * @var        int
	 */
	protected $id_pedido;

	/**
	 * The value for the documentos field.
	 * @var        string
	 */
	protected $documentos;

	/**
	 * The value for the centro field.
	 * @var        string
	 */
	protected $centro;

	/**
	 * The value for the operacao field.
	 * @var        string
	 */
	protected $operacao;

	/**
	 * The value for the tipo field.
	 * @var        string
	 */
	protected $tipo;

	/**
	 * The value for the codigoprojeto field.
	 * @var        int
	 */
	protected $codigoprojeto;

	/**
	 * The value for the codigotarefa field.
	 * @var        int
	 */
	protected $codigotarefa;

	/**
	 * The value for the codigo_tipo field.
	 * @var        int
	 */
	protected $codigo_tipo;

	/**
	 * The value for the codigo_subtipo field.
	 * @var        int
	 */
	protected $codigo_subtipo;

	/**
	 * The value for the codigocadastro field.
	 * @var        int
	 */
	protected $codigocadastro;

	/**
	 * The value for the codigofuncionario field.
	 * @var        int
	 */
	protected $codigofuncionario;

	/**
	 * The value for the formapagamento field.
	 * @var        string
	 */
	protected $formapagamento;

	/**
	 * The value for the saidas field.
	 * @var        string
	 */
	protected $saidas;

	/**
	 * The value for the saidaprevista field.
	 * @var        string
	 */
	protected $saidaprevista;

	/**
	 * The value for the datareal field.
	 * @var        string
	 */
	protected $datareal;

	/**
	 * The value for the dataprevista field.
	 * @var        string
	 */
	protected $dataprevista;

	/**
	 * The value for the dataemissao field.
	 * @var        string
	 */
	protected $dataemissao;

	/**
	 * The value for the datarecebimentopre field.
	 * @var        string
	 */
	protected $datarecebimentopre;

	/**
	 * The value for the descricaosaida field.
	 * @var        string
	 */
	protected $descricaosaida;

	/**
	 * The value for the for_print field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $for_print;

	/**
	 * The value for the data_print field.
	 * @var        string
	 */
	protected $data_print;

	/**
	 * The value for the baixa field.
	 * @var        string
	 */
	protected $baixa;

	/**
	 * The value for the confirmacao field.
	 * @var        string
	 */
	protected $confirmacao;

	/**
	 * The value for the confirmadopor field.
	 * @var        string
	 */
	protected $confirmadopor;

	/**
	 * The value for the observacoes field.
	 * @var        string
	 */
	protected $observacoes;

	/**
	 * The value for the impostos field.
	 * @var        string
	 */
	protected $impostos;

	/**
	 * The value for the codigoregistro field.
	 * @var        int
	 */
	protected $codigoregistro;

	/**
	 * The value for the parcelas field.
	 * @var        string
	 */
	protected $parcelas;

	/**
	 * The value for the fs field.
	 * @var        string
	 */
	protected $fs;

	/**
	 * The value for the detalhe field.
	 * @var        string
	 */
	protected $detalhe;

	/**
	 * The value for the protocolo field.
	 * @var        string
	 */
	protected $protocolo;

	/**
	 * The value for the parcela field.
	 * @var        string
	 */
	protected $parcela;

	/**
	 * The value for the categoria field.
	 * @var        string
	 */
	protected $categoria;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'SaidasPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->for_print = '0';
	}

	/**
	 * Initializes internal state of BaseSaidas object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [codigo_saida] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoSaida()
	{
		return $this->codigo_saida;
	}

	/**
	 * Get the [id_compensacao] column value.
	 * 
	 * @return     int
	 */
	public function getIdCompensacao()
	{
		return $this->id_compensacao;
	}

	/**
	 * Get the [id_pedido] column value.
	 * 
	 * @return     int
	 */
	public function getIdPedido()
	{
		return $this->id_pedido;
	}

	/**
	 * Get the [documentos] column value.
	 * 
	 * @return     string
	 */
	public function getDocumentos()
	{
		return $this->documentos;
	}

	/**
	 * Get the [centro] column value.
	 * 
	 * @return     string
	 */
	public function getCentro()
	{
		return $this->centro;
	}

	/**
	 * Get the [operacao] column value.
	 * 
	 * @return     string
	 */
	public function getOperacao()
	{
		return $this->operacao;
	}

	/**
	 * Get the [tipo] column value.
	 * 
	 * @return     string
	 */
	public function getTipo()
	{
		return $this->tipo;
	}

	/**
	 * Get the [codigoprojeto] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoprojeto()
	{
		return $this->codigoprojeto;
	}

	/**
	 * Get the [codigotarefa] column value.
	 * 
	 * @return     int
	 */
	public function getCodigotarefa()
	{
		return $this->codigotarefa;
	}

	/**
	 * Get the [codigo_tipo] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoTipo()
	{
		return $this->codigo_tipo;
	}

	/**
	 * Get the [codigo_subtipo] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoSubtipo()
	{
		return $this->codigo_subtipo;
	}

	/**
	 * Get the [codigocadastro] column value.
	 * 
	 * @return     int
	 */
	public function getCodigocadastro()
	{
		return $this->codigocadastro;
	}

	/**
	 * Get the [codigofuncionario] column value.
	 * 
	 * @return     int
	 */
	public function getCodigofuncionario()
	{
		return $this->codigofuncionario;
	}

	/**
	 * Get the [formapagamento] column value.
	 * 
	 * @return     string
	 */
	public function getFormapagamento()
	{
		return $this->formapagamento;
	}

	/**
	 * Get the [saidas] column value.
	 * 
	 * @return     string
	 */
	public function getSaidas()
	{
		return $this->saidas;
	}

	/**
	 * Get the [saidaprevista] column value.
	 * 
	 * @return     string
	 */
	public function getSaidaprevista()
	{
		return $this->saidaprevista;
	}

	/**
	 * Get the [optionally formatted] temporal [datareal] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatareal($format = 'Y-m-d')
	{
		if ($this->datareal === null) {
			return null;
		}


		if ($this->datareal === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datareal);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datareal, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dataprevista] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataprevista($format = 'Y-m-d')
	{
		if ($this->dataprevista === null) {
			return null;
		}


		if ($this->dataprevista === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dataprevista);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dataprevista, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dataemissao] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataemissao($format = 'Y-m-d')
	{
		if ($this->dataemissao === null) {
			return null;
		}


		if ($this->dataemissao === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dataemissao);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dataemissao, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [datarecebimentopre] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatarecebimentopre($format = 'Y-m-d')
	{
		if ($this->datarecebimentopre === null) {
			return null;
		}


		if ($this->datarecebimentopre === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datarecebimentopre);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datarecebimentopre, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [descricaosaida] column value.
	 * 
	 * @return     string
	 */
	public function getDescricaosaida()
	{
		return $this->descricaosaida;
	}

	/**
	 * Get the [for_print] column value.
	 * 
	 * @return     string
	 */
	public function getForPrint()
	{
		return $this->for_print;
	}

	/**
	 * Get the [optionally formatted] temporal [data_print] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataPrint($format = 'Y-m-d')
	{
		if ($this->data_print === null) {
			return null;
		}


		if ($this->data_print === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->data_print);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->data_print, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [baixa] column value.
	 * 
	 * @return     string
	 */
	public function getBaixa()
	{
		return $this->baixa;
	}

	/**
	 * Get the [confirmacao] column value.
	 * 
	 * @return     string
	 */
	public function getConfirmacao()
	{
		return $this->confirmacao;
	}

	/**
	 * Get the [confirmadopor] column value.
	 * 
	 * @return     string
	 */
	public function getConfirmadopor()
	{
		return $this->confirmadopor;
	}

	/**
	 * Get the [observacoes] column value.
	 * 
	 * @return     string
	 */
	public function getObservacoes()
	{
		return $this->observacoes;
	}

	/**
	 * Get the [impostos] column value.
	 * 
	 * @return     string
	 */
	public function getImpostos()
	{
		return $this->impostos;
	}

	/**
	 * Get the [codigoregistro] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoregistro()
	{
		return $this->codigoregistro;
	}

	/**
	 * Get the [parcelas] column value.
	 * 
	 * @return     string
	 */
	public function getParcelas()
	{
		return $this->parcelas;
	}

	/**
	 * Get the [fs] column value.
	 * 
	 * @return     string
	 */
	public function getFs()
	{
		return $this->fs;
	}

	/**
	 * Get the [detalhe] column value.
	 * 
	 * @return     string
	 */
	public function getDetalhe()
	{
		return $this->detalhe;
	}

	/**
	 * Get the [protocolo] column value.
	 * 
	 * @return     string
	 */
	public function getProtocolo()
	{
		return $this->protocolo;
	}

	/**
	 * Get the [parcela] column value.
	 * 
	 * @return     string
	 */
	public function getParcela()
	{
		return $this->parcela;
	}

	/**
	 * Get the [categoria] column value.
	 * 
	 * @return     string
	 */
	public function getCategoria()
	{
		return $this->categoria;
	}

	/**
	 * Set the value of [codigo_saida] column.
	 * 
	 * @param      int $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setCodigoSaida($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigo_saida !== $v) {
			$this->codigo_saida = $v;
			$this->modifiedColumns[] = SaidasPeer::CODIGO_SAIDA;
		}

		return $this;
	} // setCodigoSaida()

	/**
	 * Set the value of [id_compensacao] column.
	 * 
	 * @param      int $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setIdCompensacao($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_compensacao !== $v) {
			$this->id_compensacao = $v;
			$this->modifiedColumns[] = SaidasPeer::ID_COMPENSACAO;
		}

		return $this;
	} // setIdCompensacao()

	/**
	 * Set the value of [id_pedido] column.
	 * 
	 * @param      int $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setIdPedido($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_pedido !== $v) {
			$this->id_pedido = $v;
			$this->modifiedColumns[] = SaidasPeer::ID_PEDIDO;
		}

		return $this;
	} // setIdPedido()

	/**
	 * Set the value of [documentos] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setDocumentos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->documentos !== $v) {
			$this->documentos = $v;
			$this->modifiedColumns[] = SaidasPeer::DOCUMENTOS;
		}

		return $this;
	} // setDocumentos()

	/**
	 * Set the value of [centro] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setCentro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->centro !== $v) {
			$this->centro = $v;
			$this->modifiedColumns[] = SaidasPeer::CENTRO;
		}

		return $this;
	} // setCentro()

	/**
	 * Set the value of [operacao] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setOperacao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->operacao !== $v) {
			$this->operacao = $v;
			$this->modifiedColumns[] = SaidasPeer::OPERACAO;
		}

		return $this;
	} // setOperacao()

	/**
	 * Set the value of [tipo] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setTipo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo !== $v) {
			$this->tipo = $v;
			$this->modifiedColumns[] = SaidasPeer::TIPO;
		}

		return $this;
	} // setTipo()

	/**
	 * Set the value of [codigoprojeto] column.
	 * 
	 * @param      int $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setCodigoprojeto($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigoprojeto !== $v) {
			$this->codigoprojeto = $v;
			$this->modifiedColumns[] = SaidasPeer::CODIGOPROJETO;
		}

		return $this;
	} // setCodigoprojeto()

	/**
	 * Set the value of [codigotarefa] column.
	 * 
	 * @param      int $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setCodigotarefa($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigotarefa !== $v) {
			$this->codigotarefa = $v;
			$this->modifiedColumns[] = SaidasPeer::CODIGOTAREFA;
		}

		return $this;
	} // setCodigotarefa()

	/**
	 * Set the value of [codigo_tipo] column.
	 * 
	 * @param      int $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setCodigoTipo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigo_tipo !== $v) {
			$this->codigo_tipo = $v;
			$this->modifiedColumns[] = SaidasPeer::CODIGO_TIPO;
		}

		return $this;
	} // setCodigoTipo()

	/**
	 * Set the value of [codigo_subtipo] column.
	 * 
	 * @param      int $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setCodigoSubtipo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigo_subtipo !== $v) {
			$this->codigo_subtipo = $v;
			$this->modifiedColumns[] = SaidasPeer::CODIGO_SUBTIPO;
		}

		return $this;
	} // setCodigoSubtipo()

	/**
	 * Set the value of [codigocadastro] column.
	 * 
	 * @param      int $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setCodigocadastro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigocadastro !== $v) {
			$this->codigocadastro = $v;
			$this->modifiedColumns[] = SaidasPeer::CODIGOCADASTRO;
		}

		return $this;
	} // setCodigocadastro()

	/**
	 * Set the value of [codigofuncionario] column.
	 * 
	 * @param      int $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setCodigofuncionario($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigofuncionario !== $v) {
			$this->codigofuncionario = $v;
			$this->modifiedColumns[] = SaidasPeer::CODIGOFUNCIONARIO;
		}

		return $this;
	} // setCodigofuncionario()

	/**
	 * Set the value of [formapagamento] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setFormapagamento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->formapagamento !== $v) {
			$this->formapagamento = $v;
			$this->modifiedColumns[] = SaidasPeer::FORMAPAGAMENTO;
		}

		return $this;
	} // setFormapagamento()

	/**
	 * Set the value of [saidas] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setSaidas($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->saidas !== $v) {
			$this->saidas = $v;
			$this->modifiedColumns[] = SaidasPeer::SAIDAS;
		}

		return $this;
	} // setSaidas()

	/**
	 * Set the value of [saidaprevista] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setSaidaprevista($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->saidaprevista !== $v) {
			$this->saidaprevista = $v;
			$this->modifiedColumns[] = SaidasPeer::SAIDAPREVISTA;
		}

		return $this;
	} // setSaidaprevista()

	/**
	 * Sets the value of [datareal] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setDatareal($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datareal !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datareal !== null && $tmpDt = new DateTime($this->datareal)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datareal = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SaidasPeer::DATAREAL;
			}
		} // if either are not null

		return $this;
	} // setDatareal()

	/**
	 * Sets the value of [dataprevista] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setDataprevista($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dataprevista !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dataprevista !== null && $tmpDt = new DateTime($this->dataprevista)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dataprevista = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SaidasPeer::DATAPREVISTA;
			}
		} // if either are not null

		return $this;
	} // setDataprevista()

	/**
	 * Sets the value of [dataemissao] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setDataemissao($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dataemissao !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dataemissao !== null && $tmpDt = new DateTime($this->dataemissao)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dataemissao = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SaidasPeer::DATAEMISSAO;
			}
		} // if either are not null

		return $this;
	} // setDataemissao()

	/**
	 * Sets the value of [datarecebimentopre] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setDatarecebimentopre($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datarecebimentopre !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datarecebimentopre !== null && $tmpDt = new DateTime($this->datarecebimentopre)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datarecebimentopre = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SaidasPeer::DATARECEBIMENTOPRE;
			}
		} // if either are not null

		return $this;
	} // setDatarecebimentopre()

	/**
	 * Set the value of [descricaosaida] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setDescricaosaida($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descricaosaida !== $v) {
			$this->descricaosaida = $v;
			$this->modifiedColumns[] = SaidasPeer::DESCRICAOSAIDA;
		}

		return $this;
	} // setDescricaosaida()

	/**
	 * Set the value of [for_print] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setForPrint($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->for_print !== $v || $this->isNew()) {
			$this->for_print = $v;
			$this->modifiedColumns[] = SaidasPeer::FOR_PRINT;
		}

		return $this;
	} // setForPrint()

	/**
	 * Sets the value of [data_print] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setDataPrint($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->data_print !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->data_print !== null && $tmpDt = new DateTime($this->data_print)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->data_print = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SaidasPeer::DATA_PRINT;
			}
		} // if either are not null

		return $this;
	} // setDataPrint()

	/**
	 * Set the value of [baixa] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setBaixa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->baixa !== $v) {
			$this->baixa = $v;
			$this->modifiedColumns[] = SaidasPeer::BAIXA;
		}

		return $this;
	} // setBaixa()

	/**
	 * Set the value of [confirmacao] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setConfirmacao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->confirmacao !== $v) {
			$this->confirmacao = $v;
			$this->modifiedColumns[] = SaidasPeer::CONFIRMACAO;
		}

		return $this;
	} // setConfirmacao()

	/**
	 * Set the value of [confirmadopor] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setConfirmadopor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->confirmadopor !== $v) {
			$this->confirmadopor = $v;
			$this->modifiedColumns[] = SaidasPeer::CONFIRMADOPOR;
		}

		return $this;
	} // setConfirmadopor()

	/**
	 * Set the value of [observacoes] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setObservacoes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->observacoes !== $v) {
			$this->observacoes = $v;
			$this->modifiedColumns[] = SaidasPeer::OBSERVACOES;
		}

		return $this;
	} // setObservacoes()

	/**
	 * Set the value of [impostos] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setImpostos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->impostos !== $v) {
			$this->impostos = $v;
			$this->modifiedColumns[] = SaidasPeer::IMPOSTOS;
		}

		return $this;
	} // setImpostos()

	/**
	 * Set the value of [codigoregistro] column.
	 * 
	 * @param      int $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setCodigoregistro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigoregistro !== $v) {
			$this->codigoregistro = $v;
			$this->modifiedColumns[] = SaidasPeer::CODIGOREGISTRO;
		}

		return $this;
	} // setCodigoregistro()

	/**
	 * Set the value of [parcelas] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setParcelas($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->parcelas !== $v) {
			$this->parcelas = $v;
			$this->modifiedColumns[] = SaidasPeer::PARCELAS;
		}

		return $this;
	} // setParcelas()

	/**
	 * Set the value of [fs] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setFs($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fs !== $v) {
			$this->fs = $v;
			$this->modifiedColumns[] = SaidasPeer::FS;
		}

		return $this;
	} // setFs()

	/**
	 * Set the value of [detalhe] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setDetalhe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->detalhe !== $v) {
			$this->detalhe = $v;
			$this->modifiedColumns[] = SaidasPeer::DETALHE;
		}

		return $this;
	} // setDetalhe()

	/**
	 * Set the value of [protocolo] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setProtocolo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->protocolo !== $v) {
			$this->protocolo = $v;
			$this->modifiedColumns[] = SaidasPeer::PROTOCOLO;
		}

		return $this;
	} // setProtocolo()

	/**
	 * Set the value of [parcela] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setParcela($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->parcela !== $v) {
			$this->parcela = $v;
			$this->modifiedColumns[] = SaidasPeer::PARCELA;
		}

		return $this;
	} // setParcela()

	/**
	 * Set the value of [categoria] column.
	 * 
	 * @param      string $v new value
	 * @return     Saidas The current object (for fluent API support)
	 */
	public function setCategoria($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->categoria !== $v) {
			$this->categoria = $v;
			$this->modifiedColumns[] = SaidasPeer::CATEGORIA;
		}

		return $this;
	} // setCategoria()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->for_print !== '0') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->codigo_saida = (isset($row[$startcol + 0]) && $row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_compensacao = (isset($row[$startcol + 1]) && $row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->id_pedido = (isset($row[$startcol + 2]) && $row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->documentos = (isset($row[$startcol + 3]) && $row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->centro = (isset($row[$startcol + 4]) && $row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->operacao = (isset($row[$startcol + 5]) && $row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->tipo = (isset($row[$startcol + 6]) && $row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->codigoprojeto = (isset($row[$startcol + 7]) && $row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->codigotarefa = (isset($row[$startcol + 8]) && $row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->codigo_tipo = (isset($row[$startcol + 9]) && $row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->codigo_subtipo = (isset($row[$startcol + 10]) && $row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->codigocadastro = (isset($row[$startcol + 11]) && $row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->codigofuncionario = (isset($row[$startcol + 12]) && $row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->formapagamento = (isset($row[$startcol + 13]) && $row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->saidas = (isset($row[$startcol + 14]) && $row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->saidaprevista = (isset($row[$startcol + 15]) && $row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->datareal = (isset($row[$startcol + 16]) && $row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->dataprevista = (isset($row[$startcol + 17]) && $row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->dataemissao = (isset($row[$startcol + 18]) && $row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->datarecebimentopre = (isset($row[$startcol + 19]) && $row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->descricaosaida = (isset($row[$startcol + 20]) && $row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->for_print = (isset($row[$startcol + 21]) && $row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->data_print = (isset($row[$startcol + 22]) && $row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->baixa = (isset($row[$startcol + 23]) && $row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->confirmacao = (isset($row[$startcol + 24]) && $row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->confirmadopor = (isset($row[$startcol + 25]) && $row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->observacoes = (isset($row[$startcol + 26]) && $row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->impostos = (isset($row[$startcol + 27]) && $row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->codigoregistro = (isset($row[$startcol + 28]) && $row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->parcelas = (isset($row[$startcol + 29]) && $row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->fs = (isset($row[$startcol + 30]) && $row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->detalhe = (isset($row[$startcol + 31]) && $row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->protocolo = (isset($row[$startcol + 32]) && $row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->parcela = (isset($row[$startcol + 33]) && $row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->categoria = (isset($row[$startcol + 34]) && $row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 35; // 35 = SaidasPeer::NUM_COLUMNS - SaidasPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Saidas object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SaidasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = SaidasPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SaidasPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSaidas:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				SaidasPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSaidas:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SaidasPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSaidas:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSaidas:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				SaidasPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = SaidasPeer::CODIGO_SAIDA;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = SaidasPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCodigoSaida($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += SaidasPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = SaidasPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SaidasPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCodigoSaida();
				break;
			case 1:
				return $this->getIdCompensacao();
				break;
			case 2:
				return $this->getIdPedido();
				break;
			case 3:
				return $this->getDocumentos();
				break;
			case 4:
				return $this->getCentro();
				break;
			case 5:
				return $this->getOperacao();
				break;
			case 6:
				return $this->getTipo();
				break;
			case 7:
				return $this->getCodigoprojeto();
				break;
			case 8:
				return $this->getCodigotarefa();
				break;
			case 9:
				return $this->getCodigoTipo();
				break;
			case 10:
				return $this->getCodigoSubtipo();
				break;
			case 11:
				return $this->getCodigocadastro();
				break;
			case 12:
				return $this->getCodigofuncionario();
				break;
			case 13:
				return $this->getFormapagamento();
				break;
			case 14:
				return $this->getSaidas();
				break;
			case 15:
				return $this->getSaidaprevista();
				break;
			case 16:
				return $this->getDatareal();
				break;
			case 17:
				return $this->getDataprevista();
				break;
			case 18:
				return $this->getDataemissao();
				break;
			case 19:
				return $this->getDatarecebimentopre();
				break;
			case 20:
				return $this->getDescricaosaida();
				break;
			case 21:
				return $this->getForPrint();
				break;
			case 22:
				return $this->getDataPrint();
				break;
			case 23:
				return $this->getBaixa();
				break;
			case 24:
				return $this->getConfirmacao();
				break;
			case 25:
				return $this->getConfirmadopor();
				break;
			case 26:
				return $this->getObservacoes();
				break;
			case 27:
				return $this->getImpostos();
				break;
			case 28:
				return $this->getCodigoregistro();
				break;
			case 29:
				return $this->getParcelas();
				break;
			case 30:
				return $this->getFs();
				break;
			case 31:
				return $this->getDetalhe();
				break;
			case 32:
				return $this->getProtocolo();
				break;
			case 33:
				return $this->getParcela();
				break;
			case 34:
				return $this->getCategoria();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = SaidasPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCodigoSaida(),
			$keys[1] => $this->getIdCompensacao(),
			$keys[2] => $this->getIdPedido(),
			$keys[3] => $this->getDocumentos(),
			$keys[4] => $this->getCentro(),
			$keys[5] => $this->getOperacao(),
			$keys[6] => $this->getTipo(),
			$keys[7] => $this->getCodigoprojeto(),
			$keys[8] => $this->getCodigotarefa(),
			$keys[9] => $this->getCodigoTipo(),
			$keys[10] => $this->getCodigoSubtipo(),
			$keys[11] => $this->getCodigocadastro(),
			$keys[12] => $this->getCodigofuncionario(),
			$keys[13] => $this->getFormapagamento(),
			$keys[14] => $this->getSaidas(),
			$keys[15] => $this->getSaidaprevista(),
			$keys[16] => $this->getDatareal(),
			$keys[17] => $this->getDataprevista(),
			$keys[18] => $this->getDataemissao(),
			$keys[19] => $this->getDatarecebimentopre(),
			$keys[20] => $this->getDescricaosaida(),
			$keys[21] => $this->getForPrint(),
			$keys[22] => $this->getDataPrint(),
			$keys[23] => $this->getBaixa(),
			$keys[24] => $this->getConfirmacao(),
			$keys[25] => $this->getConfirmadopor(),
			$keys[26] => $this->getObservacoes(),
			$keys[27] => $this->getImpostos(),
			$keys[28] => $this->getCodigoregistro(),
			$keys[29] => $this->getParcelas(),
			$keys[30] => $this->getFs(),
			$keys[31] => $this->getDetalhe(),
			$keys[32] => $this->getProtocolo(),
			$keys[33] => $this->getParcela(),
			$keys[34] => $this->getCategoria(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SaidasPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCodigoSaida($value);
				break;
			case 1:
				$this->setIdCompensacao($value);
				break;
			case 2:
				$this->setIdPedido($value);
				break;
			case 3:
				$this->setDocumentos($value);
				break;
			case 4:
				$this->setCentro($value);
				break;
			case 5:
				$this->setOperacao($value);
				break;
			case 6:
				$this->setTipo($value);
				break;
			case 7:
				$this->setCodigoprojeto($value);
				break;
			case 8:
				$this->setCodigotarefa($value);
				break;
			case 9:
				$this->setCodigoTipo($value);
				break;
			case 10:
				$this->setCodigoSubtipo($value);
				break;
			case 11:
				$this->setCodigocadastro($value);
				break;
			case 12:
				$this->setCodigofuncionario($value);
				break;
			case 13:
				$this->setFormapagamento($value);
				break;
			case 14:
				$this->setSaidas($value);
				break;
			case 15:
				$this->setSaidaprevista($value);
				break;
			case 16:
				$this->setDatareal($value);
				break;
			case 17:
				$this->setDataprevista($value);
				break;
			case 18:
				$this->setDataemissao($value);
				break;
			case 19:
				$this->setDatarecebimentopre($value);
				break;
			case 20:
				$this->setDescricaosaida($value);
				break;
			case 21:
				$this->setForPrint($value);
				break;
			case 22:
				$this->setDataPrint($value);
				break;
			case 23:
				$this->setBaixa($value);
				break;
			case 24:
				$this->setConfirmacao($value);
				break;
			case 25:
				$this->setConfirmadopor($value);
				break;
			case 26:
				$this->setObservacoes($value);
				break;
			case 27:
				$this->setImpostos($value);
				break;
			case 28:
				$this->setCodigoregistro($value);
				break;
			case 29:
				$this->setParcelas($value);
				break;
			case 30:
				$this->setFs($value);
				break;
			case 31:
				$this->setDetalhe($value);
				break;
			case 32:
				$this->setProtocolo($value);
				break;
			case 33:
				$this->setParcela($value);
				break;
			case 34:
				$this->setCategoria($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = SaidasPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCodigoSaida($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdCompensacao($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdPedido($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDocumentos($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCentro($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setOperacao($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTipo($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCodigoprojeto($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCodigotarefa($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCodigoTipo($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCodigoSubtipo($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCodigocadastro($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCodigofuncionario($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setFormapagamento($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setSaidas($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setSaidaprevista($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDatareal($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDataprevista($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setDataemissao($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setDatarecebimentopre($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setDescricaosaida($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setForPrint($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setDataPrint($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setBaixa($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setConfirmacao($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setConfirmadopor($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setObservacoes($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setImpostos($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setCodigoregistro($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setParcelas($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setFs($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setDetalhe($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setProtocolo($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setParcela($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setCategoria($arr[$keys[34]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SaidasPeer::DATABASE_NAME);

		if ($this->isColumnModified(SaidasPeer::CODIGO_SAIDA)) $criteria->add(SaidasPeer::CODIGO_SAIDA, $this->codigo_saida);
		if ($this->isColumnModified(SaidasPeer::ID_COMPENSACAO)) $criteria->add(SaidasPeer::ID_COMPENSACAO, $this->id_compensacao);
		if ($this->isColumnModified(SaidasPeer::ID_PEDIDO)) $criteria->add(SaidasPeer::ID_PEDIDO, $this->id_pedido);
		if ($this->isColumnModified(SaidasPeer::DOCUMENTOS)) $criteria->add(SaidasPeer::DOCUMENTOS, $this->documentos);
		if ($this->isColumnModified(SaidasPeer::CENTRO)) $criteria->add(SaidasPeer::CENTRO, $this->centro);
		if ($this->isColumnModified(SaidasPeer::OPERACAO)) $criteria->add(SaidasPeer::OPERACAO, $this->operacao);
		if ($this->isColumnModified(SaidasPeer::TIPO)) $criteria->add(SaidasPeer::TIPO, $this->tipo);
		if ($this->isColumnModified(SaidasPeer::CODIGOPROJETO)) $criteria->add(SaidasPeer::CODIGOPROJETO, $this->codigoprojeto);
		if ($this->isColumnModified(SaidasPeer::CODIGOTAREFA)) $criteria->add(SaidasPeer::CODIGOTAREFA, $this->codigotarefa);
		if ($this->isColumnModified(SaidasPeer::CODIGO_TIPO)) $criteria->add(SaidasPeer::CODIGO_TIPO, $this->codigo_tipo);
		if ($this->isColumnModified(SaidasPeer::CODIGO_SUBTIPO)) $criteria->add(SaidasPeer::CODIGO_SUBTIPO, $this->codigo_subtipo);
		if ($this->isColumnModified(SaidasPeer::CODIGOCADASTRO)) $criteria->add(SaidasPeer::CODIGOCADASTRO, $this->codigocadastro);
		if ($this->isColumnModified(SaidasPeer::CODIGOFUNCIONARIO)) $criteria->add(SaidasPeer::CODIGOFUNCIONARIO, $this->codigofuncionario);
		if ($this->isColumnModified(SaidasPeer::FORMAPAGAMENTO)) $criteria->add(SaidasPeer::FORMAPAGAMENTO, $this->formapagamento);
		if ($this->isColumnModified(SaidasPeer::SAIDAS)) $criteria->add(SaidasPeer::SAIDAS, $this->saidas);
		if ($this->isColumnModified(SaidasPeer::SAIDAPREVISTA)) $criteria->add(SaidasPeer::SAIDAPREVISTA, $this->saidaprevista);
		if ($this->isColumnModified(SaidasPeer::DATAREAL)) $criteria->add(SaidasPeer::DATAREAL, $this->datareal);
		if ($this->isColumnModified(SaidasPeer::DATAPREVISTA)) $criteria->add(SaidasPeer::DATAPREVISTA, $this->dataprevista);
		if ($this->isColumnModified(SaidasPeer::DATAEMISSAO)) $criteria->add(SaidasPeer::DATAEMISSAO, $this->dataemissao);
		if ($this->isColumnModified(SaidasPeer::DATARECEBIMENTOPRE)) $criteria->add(SaidasPeer::DATARECEBIMENTOPRE, $this->datarecebimentopre);
		if ($this->isColumnModified(SaidasPeer::DESCRICAOSAIDA)) $criteria->add(SaidasPeer::DESCRICAOSAIDA, $this->descricaosaida);
		if ($this->isColumnModified(SaidasPeer::FOR_PRINT)) $criteria->add(SaidasPeer::FOR_PRINT, $this->for_print);
		if ($this->isColumnModified(SaidasPeer::DATA_PRINT)) $criteria->add(SaidasPeer::DATA_PRINT, $this->data_print);
		if ($this->isColumnModified(SaidasPeer::BAIXA)) $criteria->add(SaidasPeer::BAIXA, $this->baixa);
		if ($this->isColumnModified(SaidasPeer::CONFIRMACAO)) $criteria->add(SaidasPeer::CONFIRMACAO, $this->confirmacao);
		if ($this->isColumnModified(SaidasPeer::CONFIRMADOPOR)) $criteria->add(SaidasPeer::CONFIRMADOPOR, $this->confirmadopor);
		if ($this->isColumnModified(SaidasPeer::OBSERVACOES)) $criteria->add(SaidasPeer::OBSERVACOES, $this->observacoes);
		if ($this->isColumnModified(SaidasPeer::IMPOSTOS)) $criteria->add(SaidasPeer::IMPOSTOS, $this->impostos);
		if ($this->isColumnModified(SaidasPeer::CODIGOREGISTRO)) $criteria->add(SaidasPeer::CODIGOREGISTRO, $this->codigoregistro);
		if ($this->isColumnModified(SaidasPeer::PARCELAS)) $criteria->add(SaidasPeer::PARCELAS, $this->parcelas);
		if ($this->isColumnModified(SaidasPeer::FS)) $criteria->add(SaidasPeer::FS, $this->fs);
		if ($this->isColumnModified(SaidasPeer::DETALHE)) $criteria->add(SaidasPeer::DETALHE, $this->detalhe);
		if ($this->isColumnModified(SaidasPeer::PROTOCOLO)) $criteria->add(SaidasPeer::PROTOCOLO, $this->protocolo);
		if ($this->isColumnModified(SaidasPeer::PARCELA)) $criteria->add(SaidasPeer::PARCELA, $this->parcela);
		if ($this->isColumnModified(SaidasPeer::CATEGORIA)) $criteria->add(SaidasPeer::CATEGORIA, $this->categoria);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SaidasPeer::DATABASE_NAME);

		$criteria->add(SaidasPeer::CODIGO_SAIDA, $this->codigo_saida);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getCodigoSaida();
	}

	/**
	 * Generic method to set the primary key (codigo_saida column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCodigoSaida($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Saidas (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIdCompensacao($this->id_compensacao);

		$copyObj->setIdPedido($this->id_pedido);

		$copyObj->setDocumentos($this->documentos);

		$copyObj->setCentro($this->centro);

		$copyObj->setOperacao($this->operacao);

		$copyObj->setTipo($this->tipo);

		$copyObj->setCodigoprojeto($this->codigoprojeto);

		$copyObj->setCodigotarefa($this->codigotarefa);

		$copyObj->setCodigoTipo($this->codigo_tipo);

		$copyObj->setCodigoSubtipo($this->codigo_subtipo);

		$copyObj->setCodigocadastro($this->codigocadastro);

		$copyObj->setCodigofuncionario($this->codigofuncionario);

		$copyObj->setFormapagamento($this->formapagamento);

		$copyObj->setSaidas($this->saidas);

		$copyObj->setSaidaprevista($this->saidaprevista);

		$copyObj->setDatareal($this->datareal);

		$copyObj->setDataprevista($this->dataprevista);

		$copyObj->setDataemissao($this->dataemissao);

		$copyObj->setDatarecebimentopre($this->datarecebimentopre);

		$copyObj->setDescricaosaida($this->descricaosaida);

		$copyObj->setForPrint($this->for_print);

		$copyObj->setDataPrint($this->data_print);

		$copyObj->setBaixa($this->baixa);

		$copyObj->setConfirmacao($this->confirmacao);

		$copyObj->setConfirmadopor($this->confirmadopor);

		$copyObj->setObservacoes($this->observacoes);

		$copyObj->setImpostos($this->impostos);

		$copyObj->setCodigoregistro($this->codigoregistro);

		$copyObj->setParcelas($this->parcelas);

		$copyObj->setFs($this->fs);

		$copyObj->setDetalhe($this->detalhe);

		$copyObj->setProtocolo($this->protocolo);

		$copyObj->setParcela($this->parcela);

		$copyObj->setCategoria($this->categoria);


		$copyObj->setNew(true);

		$copyObj->setCodigoSaida(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Saidas Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     SaidasPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SaidasPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseSaidas:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseSaidas::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseSaidas
