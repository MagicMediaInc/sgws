<?php

/**
 * Base class that represents a row from the 'proposta' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 03/04/2014 12:04:43
 *
 * @package    lib.model.sgws.om
 */
abstract class BaseProposta extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PropostaPeer
	 */
	protected static $peer;

	/**
	 * The value for the codigo_proposta field.
	 * @var        int
	 */
	protected $codigo_proposta;

	/**
	 * The value for the codigo_sgws field.
	 * @var        string
	 */
	protected $codigo_sgws;

	/**
	 * The value for the codigo_projeto field.
	 * @var        int
	 */
	protected $codigo_projeto;

	/**
	 * The value for the codigo_sgws_projeto field.
	 * @var        string
	 */
	protected $codigo_sgws_projeto;

	/**
	 * The value for the codigo_centro field.
	 * @var        int
	 */
	protected $codigo_centro;

	/**
	 * The value for the id_negociacao field.
	 * @var        int
	 */
	protected $id_negociacao;

	/**
	 * The value for the codigo_tipo field.
	 * @var        int
	 */
	protected $codigo_tipo;

	/**
	 * The value for the data_inicio field.
	 * @var        string
	 */
	protected $data_inicio;

	/**
	 * The value for the data_final field.
	 * @var        string
	 */
	protected $data_final;

	/**
	 * The value for the data_ir_projeto field.
	 * @var        string
	 */
	protected $data_ir_projeto;

	/**
	 * The value for the data_fr_projeto field.
	 * @var        string
	 */
	protected $data_fr_projeto;

	/**
	 * The value for the nome_proposta field.
	 * @var        string
	 */
	protected $nome_proposta;

	/**
	 * The value for the cliente field.
	 * @var        int
	 */
	protected $cliente;

	/**
	 * The value for the satisfacao_cliente field.
	 * @var        int
	 */
	protected $satisfacao_cliente;

	/**
	 * The value for the nao_conformidade field.
	 * @var        int
	 */
	protected $nao_conformidade;

	/**
	 * The value for the gerente field.
	 * @var        int
	 */
	protected $gerente;

	/**
	 * The value for the status field.
	 * @var        int
	 */
	protected $status;

	/**
	 * The value for the id_status_proposta field.
	 * @var        int
	 */
	protected $id_status_proposta;

	/**
	 * The value for the status_analisis field.
	 * @var        string
	 */
	protected $status_analisis;

	/**
	 * The value for the visualizacion field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $visualizacion;

	/**
	 * The value for the apr field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $apr;

	/**
	 * The value for the proposta field.
	 * @var        string
	 */
	protected $proposta;

	/**
	 * The value for the valor field.
	 * @var        string
	 */
	protected $valor;

	/**
	 * The value for the valor_prev_hh field.
	 * @var        string
	 */
	protected $valor_prev_hh;

	/**
	 * The value for the id_prioridade field.
	 * @var        int
	 */
	protected $id_prioridade;

	/**
	 * The value for the horas_vendidas field.
	 * @var        string
	 */
	protected $horas_vendidas;

	/**
	 * The value for the horas_trabajadas field.
	 * @var        string
	 */
	protected $horas_trabajadas;

	/**
	 * The value for the coeficiente field.
	 * @var        string
	 */
	protected $coeficiente;

	/**
	 * The value for the flag_projeto field.
	 * @var        int
	 */
	protected $flag_projeto;

	/**
	 * The value for the tipo field.
	 * @var        int
	 */
	protected $tipo;

	/**
	 * The value for the codigo_velhio field.
	 * @var        int
	 */
	protected $codigo_velhio;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PropostaPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->visualizacion = '0';
		$this->apr = '';
	}

	/**
	 * Initializes internal state of BaseProposta object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [codigo_proposta] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoProposta()
	{
		return $this->codigo_proposta;
	}

	/**
	 * Get the [codigo_sgws] column value.
	 * 
	 * @return     string
	 */
	public function getCodigoSgws()
	{
		return $this->codigo_sgws;
	}

	/**
	 * Get the [codigo_projeto] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoProjeto()
	{
		return $this->codigo_projeto;
	}

	/**
	 * Get the [codigo_sgws_projeto] column value.
	 * 
	 * @return     string
	 */
	public function getCodigoSgwsProjeto()
	{
		return $this->codigo_sgws_projeto;
	}

	/**
	 * Get the [codigo_centro] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoCentro()
	{
		return $this->codigo_centro;
	}

	/**
	 * Get the [id_negociacao] column value.
	 * 
	 * @return     int
	 */
	public function getIdNegociacao()
	{
		return $this->id_negociacao;
	}

	/**
	 * Get the [codigo_tipo] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoTipo()
	{
		return $this->codigo_tipo;
	}

	/**
	 * Get the [optionally formatted] temporal [data_inicio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataInicio($format = 'Y-m-d')
	{
		if ($this->data_inicio === null) {
			return null;
		}


		if ($this->data_inicio === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->data_inicio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->data_inicio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [data_final] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataFinal($format = 'Y-m-d H:i:s')
	{
		if ($this->data_final === null) {
			return null;
		}


		if ($this->data_final === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->data_final);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->data_final, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [data_ir_projeto] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataIrProjeto($format = 'Y-m-d')
	{
		if ($this->data_ir_projeto === null) {
			return null;
		}


		if ($this->data_ir_projeto === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->data_ir_projeto);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->data_ir_projeto, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [data_fr_projeto] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataFrProjeto($format = 'Y-m-d')
	{
		if ($this->data_fr_projeto === null) {
			return null;
		}


		if ($this->data_fr_projeto === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->data_fr_projeto);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->data_fr_projeto, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [nome_proposta] column value.
	 * 
	 * @return     string
	 */
	public function getNomeProposta()
	{
		return $this->nome_proposta;
	}

	/**
	 * Get the [cliente] column value.
	 * 
	 * @return     int
	 */
	public function getCliente()
	{
		return $this->cliente;
	}

	/**
	 * Get the [satisfacao_cliente] column value.
	 * 
	 * @return     int
	 */
	public function getSatisfacaoCliente()
	{
		return $this->satisfacao_cliente;
	}

	/**
	 * Get the [nao_conformidade] column value.
	 * 
	 * @return     int
	 */
	public function getNaoConformidade()
	{
		return $this->nao_conformidade;
	}

	/**
	 * Get the [gerente] column value.
	 * 
	 * @return     int
	 */
	public function getGerente()
	{
		return $this->gerente;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     int
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [id_status_proposta] column value.
	 * 
	 * @return     int
	 */
	public function getIdStatusProposta()
	{
		return $this->id_status_proposta;
	}

	/**
	 * Get the [status_analisis] column value.
	 * 
	 * @return     string
	 */
	public function getStatusAnalisis()
	{
		return $this->status_analisis;
	}

	/**
	 * Get the [visualizacion] column value.
	 * 
	 * @return     string
	 */
	public function getVisualizacion()
	{
		return $this->visualizacion;
	}

	/**
	 * Get the [apr] column value.
	 * 
	 * @return     string
	 */
	public function getApr()
	{
		return $this->apr;
	}

	/**
	 * Get the [proposta] column value.
	 * 
	 * @return     string
	 */
	public function getProposta()
	{
		return $this->proposta;
	}

	/**
	 * Get the [valor] column value.
	 * 
	 * @return     string
	 */
	public function getValor()
	{
		return $this->valor;
	}

	/**
	 * Get the [valor_prev_hh] column value.
	 * 
	 * @return     string
	 */
	public function getValorPrevHh()
	{
		return $this->valor_prev_hh;
	}

	/**
	 * Get the [id_prioridade] column value.
	 * 
	 * @return     int
	 */
	public function getIdPrioridade()
	{
		return $this->id_prioridade;
	}

	/**
	 * Get the [horas_vendidas] column value.
	 * 
	 * @return     string
	 */
	public function getHorasVendidas()
	{
		return $this->horas_vendidas;
	}

	/**
	 * Get the [horas_trabajadas] column value.
	 * 
	 * @return     string
	 */
	public function getHorasTrabajadas()
	{
		return $this->horas_trabajadas;
	}

	/**
	 * Get the [coeficiente] column value.
	 * 
	 * @return     string
	 */
	public function getCoeficiente()
	{
		return $this->coeficiente;
	}

	/**
	 * Get the [flag_projeto] column value.
	 * 
	 * @return     int
	 */
	public function getFlagProjeto()
	{
		return $this->flag_projeto;
	}

	/**
	 * Get the [tipo] column value.
	 * 
	 * @return     int
	 */
	public function getTipo()
	{
		return $this->tipo;
	}

	/**
	 * Get the [codigo_velhio] column value.
	 * 
	 * @return     int
	 */
	public function getCodigoVelhio()
	{
		return $this->codigo_velhio;
	}

	/**
	 * Set the value of [codigo_proposta] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setCodigoProposta($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigo_proposta !== $v) {
			$this->codigo_proposta = $v;
			$this->modifiedColumns[] = PropostaPeer::CODIGO_PROPOSTA;
		}

		return $this;
	} // setCodigoProposta()

	/**
	 * Set the value of [codigo_sgws] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setCodigoSgws($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigo_sgws !== $v) {
			$this->codigo_sgws = $v;
			$this->modifiedColumns[] = PropostaPeer::CODIGO_SGWS;
		}

		return $this;
	} // setCodigoSgws()

	/**
	 * Set the value of [codigo_projeto] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setCodigoProjeto($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigo_projeto !== $v) {
			$this->codigo_projeto = $v;
			$this->modifiedColumns[] = PropostaPeer::CODIGO_PROJETO;
		}

		return $this;
	} // setCodigoProjeto()

	/**
	 * Set the value of [codigo_sgws_projeto] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setCodigoSgwsProjeto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigo_sgws_projeto !== $v) {
			$this->codigo_sgws_projeto = $v;
			$this->modifiedColumns[] = PropostaPeer::CODIGO_SGWS_PROJETO;
		}

		return $this;
	} // setCodigoSgwsProjeto()

	/**
	 * Set the value of [codigo_centro] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setCodigoCentro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigo_centro !== $v) {
			$this->codigo_centro = $v;
			$this->modifiedColumns[] = PropostaPeer::CODIGO_CENTRO;
		}

		return $this;
	} // setCodigoCentro()

	/**
	 * Set the value of [id_negociacao] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setIdNegociacao($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_negociacao !== $v) {
			$this->id_negociacao = $v;
			$this->modifiedColumns[] = PropostaPeer::ID_NEGOCIACAO;
		}

		return $this;
	} // setIdNegociacao()

	/**
	 * Set the value of [codigo_tipo] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setCodigoTipo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigo_tipo !== $v) {
			$this->codigo_tipo = $v;
			$this->modifiedColumns[] = PropostaPeer::CODIGO_TIPO;
		}

		return $this;
	} // setCodigoTipo()

	/**
	 * Sets the value of [data_inicio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setDataInicio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->data_inicio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->data_inicio !== null && $tmpDt = new DateTime($this->data_inicio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->data_inicio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = PropostaPeer::DATA_INICIO;
			}
		} // if either are not null

		return $this;
	} // setDataInicio()

	/**
	 * Sets the value of [data_final] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setDataFinal($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->data_final !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->data_final !== null && $tmpDt = new DateTime($this->data_final)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->data_final = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PropostaPeer::DATA_FINAL;
			}
		} // if either are not null

		return $this;
	} // setDataFinal()

	/**
	 * Sets the value of [data_ir_projeto] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setDataIrProjeto($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->data_ir_projeto !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->data_ir_projeto !== null && $tmpDt = new DateTime($this->data_ir_projeto)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->data_ir_projeto = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = PropostaPeer::DATA_IR_PROJETO;
			}
		} // if either are not null

		return $this;
	} // setDataIrProjeto()

	/**
	 * Sets the value of [data_fr_projeto] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setDataFrProjeto($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->data_fr_projeto !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->data_fr_projeto !== null && $tmpDt = new DateTime($this->data_fr_projeto)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->data_fr_projeto = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = PropostaPeer::DATA_FR_PROJETO;
			}
		} // if either are not null

		return $this;
	} // setDataFrProjeto()

	/**
	 * Set the value of [nome_proposta] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setNomeProposta($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nome_proposta !== $v) {
			$this->nome_proposta = $v;
			$this->modifiedColumns[] = PropostaPeer::NOME_PROPOSTA;
		}

		return $this;
	} // setNomeProposta()

	/**
	 * Set the value of [cliente] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setCliente($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cliente !== $v) {
			$this->cliente = $v;
			$this->modifiedColumns[] = PropostaPeer::CLIENTE;
		}

		return $this;
	} // setCliente()

	/**
	 * Set the value of [satisfacao_cliente] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setSatisfacaoCliente($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->satisfacao_cliente !== $v) {
			$this->satisfacao_cliente = $v;
			$this->modifiedColumns[] = PropostaPeer::SATISFACAO_CLIENTE;
		}

		return $this;
	} // setSatisfacaoCliente()

	/**
	 * Set the value of [nao_conformidade] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setNaoConformidade($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nao_conformidade !== $v) {
			$this->nao_conformidade = $v;
			$this->modifiedColumns[] = PropostaPeer::NAO_CONFORMIDADE;
		}

		return $this;
	} // setNaoConformidade()

	/**
	 * Set the value of [gerente] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setGerente($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->gerente !== $v) {
			$this->gerente = $v;
			$this->modifiedColumns[] = PropostaPeer::GERENTE;
		}

		return $this;
	} // setGerente()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = PropostaPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [id_status_proposta] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setIdStatusProposta($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_status_proposta !== $v) {
			$this->id_status_proposta = $v;
			$this->modifiedColumns[] = PropostaPeer::ID_STATUS_PROPOSTA;
		}

		return $this;
	} // setIdStatusProposta()

	/**
	 * Set the value of [status_analisis] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setStatusAnalisis($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status_analisis !== $v) {
			$this->status_analisis = $v;
			$this->modifiedColumns[] = PropostaPeer::STATUS_ANALISIS;
		}

		return $this;
	} // setStatusAnalisis()

	/**
	 * Set the value of [visualizacion] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setVisualizacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->visualizacion !== $v || $this->isNew()) {
			$this->visualizacion = $v;
			$this->modifiedColumns[] = PropostaPeer::VISUALIZACION;
		}

		return $this;
	} // setVisualizacion()

	/**
	 * Set the value of [apr] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setApr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apr !== $v || $this->isNew()) {
			$this->apr = $v;
			$this->modifiedColumns[] = PropostaPeer::APR;
		}

		return $this;
	} // setApr()

	/**
	 * Set the value of [proposta] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setProposta($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->proposta !== $v) {
			$this->proposta = $v;
			$this->modifiedColumns[] = PropostaPeer::PROPOSTA;
		}

		return $this;
	} // setProposta()

	/**
	 * Set the value of [valor] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setValor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->valor !== $v) {
			$this->valor = $v;
			$this->modifiedColumns[] = PropostaPeer::VALOR;
		}

		return $this;
	} // setValor()

	/**
	 * Set the value of [valor_prev_hh] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setValorPrevHh($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->valor_prev_hh !== $v) {
			$this->valor_prev_hh = $v;
			$this->modifiedColumns[] = PropostaPeer::VALOR_PREV_HH;
		}

		return $this;
	} // setValorPrevHh()

	/**
	 * Set the value of [id_prioridade] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setIdPrioridade($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_prioridade !== $v) {
			$this->id_prioridade = $v;
			$this->modifiedColumns[] = PropostaPeer::ID_PRIORIDADE;
		}

		return $this;
	} // setIdPrioridade()

	/**
	 * Set the value of [horas_vendidas] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setHorasVendidas($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->horas_vendidas !== $v) {
			$this->horas_vendidas = $v;
			$this->modifiedColumns[] = PropostaPeer::HORAS_VENDIDAS;
		}

		return $this;
	} // setHorasVendidas()

	/**
	 * Set the value of [horas_trabajadas] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setHorasTrabajadas($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->horas_trabajadas !== $v) {
			$this->horas_trabajadas = $v;
			$this->modifiedColumns[] = PropostaPeer::HORAS_TRABAJADAS;
		}

		return $this;
	} // setHorasTrabajadas()

	/**
	 * Set the value of [coeficiente] column.
	 * 
	 * @param      string $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setCoeficiente($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->coeficiente !== $v) {
			$this->coeficiente = $v;
			$this->modifiedColumns[] = PropostaPeer::COEFICIENTE;
		}

		return $this;
	} // setCoeficiente()

	/**
	 * Set the value of [flag_projeto] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setFlagProjeto($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->flag_projeto !== $v) {
			$this->flag_projeto = $v;
			$this->modifiedColumns[] = PropostaPeer::FLAG_PROJETO;
		}

		return $this;
	} // setFlagProjeto()

	/**
	 * Set the value of [tipo] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setTipo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tipo !== $v) {
			$this->tipo = $v;
			$this->modifiedColumns[] = PropostaPeer::TIPO;
		}

		return $this;
	} // setTipo()

	/**
	 * Set the value of [codigo_velhio] column.
	 * 
	 * @param      int $v new value
	 * @return     Proposta The current object (for fluent API support)
	 */
	public function setCodigoVelhio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigo_velhio !== $v) {
			$this->codigo_velhio = $v;
			$this->modifiedColumns[] = PropostaPeer::CODIGO_VELHIO;
		}

		return $this;
	} // setCodigoVelhio()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->visualizacion !== '0') {
				return false;
			}

			if ($this->apr !== '') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->codigo_proposta = (isset($row[$startcol + 0]) && $row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->codigo_sgws = (isset($row[$startcol + 1]) && $row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->codigo_projeto = (isset($row[$startcol + 2]) && $row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->codigo_sgws_projeto = (isset($row[$startcol + 3]) && $row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->codigo_centro = (isset($row[$startcol + 4]) && $row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->id_negociacao = (isset($row[$startcol + 5]) && $row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->codigo_tipo = (isset($row[$startcol + 6]) && $row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->data_inicio = (isset($row[$startcol + 7]) && $row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->data_final = (isset($row[$startcol + 8]) && $row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->data_ir_projeto = (isset($row[$startcol + 9]) && $row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->data_fr_projeto = (isset($row[$startcol + 10]) && $row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->nome_proposta = (isset($row[$startcol + 11]) && $row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->cliente = (isset($row[$startcol + 12]) && $row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->satisfacao_cliente = (isset($row[$startcol + 13]) && $row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->nao_conformidade = (isset($row[$startcol + 14]) && $row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->gerente = (isset($row[$startcol + 15]) && $row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->status = (isset($row[$startcol + 16]) && $row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->id_status_proposta = (isset($row[$startcol + 17]) && $row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->status_analisis = (isset($row[$startcol + 18]) && $row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->visualizacion = (isset($row[$startcol + 19]) && $row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->apr = (isset($row[$startcol + 20]) && $row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->proposta = (isset($row[$startcol + 21]) && $row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->valor = (isset($row[$startcol + 22]) && $row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->valor_prev_hh = (isset($row[$startcol + 23]) && $row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->id_prioridade = (isset($row[$startcol + 24]) && $row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->horas_vendidas = (isset($row[$startcol + 25]) && $row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->horas_trabajadas = (isset($row[$startcol + 26]) && $row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->coeficiente = (isset($row[$startcol + 27]) && $row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->flag_projeto = (isset($row[$startcol + 28]) && $row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->tipo = (isset($row[$startcol + 29]) && $row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->codigo_velhio = (isset($row[$startcol + 30]) && $row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 31; // 31 = PropostaPeer::NUM_COLUMNS - PropostaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Proposta object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropostaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PropostaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropostaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProposta:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				PropostaPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProposta:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropostaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProposta:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProposta:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PropostaPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PropostaPeer::CODIGO_PROPOSTA;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PropostaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCodigoProposta($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PropostaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PropostaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PropostaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCodigoProposta();
				break;
			case 1:
				return $this->getCodigoSgws();
				break;
			case 2:
				return $this->getCodigoProjeto();
				break;
			case 3:
				return $this->getCodigoSgwsProjeto();
				break;
			case 4:
				return $this->getCodigoCentro();
				break;
			case 5:
				return $this->getIdNegociacao();
				break;
			case 6:
				return $this->getCodigoTipo();
				break;
			case 7:
				return $this->getDataInicio();
				break;
			case 8:
				return $this->getDataFinal();
				break;
			case 9:
				return $this->getDataIrProjeto();
				break;
			case 10:
				return $this->getDataFrProjeto();
				break;
			case 11:
				return $this->getNomeProposta();
				break;
			case 12:
				return $this->getCliente();
				break;
			case 13:
				return $this->getSatisfacaoCliente();
				break;
			case 14:
				return $this->getNaoConformidade();
				break;
			case 15:
				return $this->getGerente();
				break;
			case 16:
				return $this->getStatus();
				break;
			case 17:
				return $this->getIdStatusProposta();
				break;
			case 18:
				return $this->getStatusAnalisis();
				break;
			case 19:
				return $this->getVisualizacion();
				break;
			case 20:
				return $this->getApr();
				break;
			case 21:
				return $this->getProposta();
				break;
			case 22:
				return $this->getValor();
				break;
			case 23:
				return $this->getValorPrevHh();
				break;
			case 24:
				return $this->getIdPrioridade();
				break;
			case 25:
				return $this->getHorasVendidas();
				break;
			case 26:
				return $this->getHorasTrabajadas();
				break;
			case 27:
				return $this->getCoeficiente();
				break;
			case 28:
				return $this->getFlagProjeto();
				break;
			case 29:
				return $this->getTipo();
				break;
			case 30:
				return $this->getCodigoVelhio();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PropostaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCodigoProposta(),
			$keys[1] => $this->getCodigoSgws(),
			$keys[2] => $this->getCodigoProjeto(),
			$keys[3] => $this->getCodigoSgwsProjeto(),
			$keys[4] => $this->getCodigoCentro(),
			$keys[5] => $this->getIdNegociacao(),
			$keys[6] => $this->getCodigoTipo(),
			$keys[7] => $this->getDataInicio(),
			$keys[8] => $this->getDataFinal(),
			$keys[9] => $this->getDataIrProjeto(),
			$keys[10] => $this->getDataFrProjeto(),
			$keys[11] => $this->getNomeProposta(),
			$keys[12] => $this->getCliente(),
			$keys[13] => $this->getSatisfacaoCliente(),
			$keys[14] => $this->getNaoConformidade(),
			$keys[15] => $this->getGerente(),
			$keys[16] => $this->getStatus(),
			$keys[17] => $this->getIdStatusProposta(),
			$keys[18] => $this->getStatusAnalisis(),
			$keys[19] => $this->getVisualizacion(),
			$keys[20] => $this->getApr(),
			$keys[21] => $this->getProposta(),
			$keys[22] => $this->getValor(),
			$keys[23] => $this->getValorPrevHh(),
			$keys[24] => $this->getIdPrioridade(),
			$keys[25] => $this->getHorasVendidas(),
			$keys[26] => $this->getHorasTrabajadas(),
			$keys[27] => $this->getCoeficiente(),
			$keys[28] => $this->getFlagProjeto(),
			$keys[29] => $this->getTipo(),
			$keys[30] => $this->getCodigoVelhio(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PropostaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCodigoProposta($value);
				break;
			case 1:
				$this->setCodigoSgws($value);
				break;
			case 2:
				$this->setCodigoProjeto($value);
				break;
			case 3:
				$this->setCodigoSgwsProjeto($value);
				break;
			case 4:
				$this->setCodigoCentro($value);
				break;
			case 5:
				$this->setIdNegociacao($value);
				break;
			case 6:
				$this->setCodigoTipo($value);
				break;
			case 7:
				$this->setDataInicio($value);
				break;
			case 8:
				$this->setDataFinal($value);
				break;
			case 9:
				$this->setDataIrProjeto($value);
				break;
			case 10:
				$this->setDataFrProjeto($value);
				break;
			case 11:
				$this->setNomeProposta($value);
				break;
			case 12:
				$this->setCliente($value);
				break;
			case 13:
				$this->setSatisfacaoCliente($value);
				break;
			case 14:
				$this->setNaoConformidade($value);
				break;
			case 15:
				$this->setGerente($value);
				break;
			case 16:
				$this->setStatus($value);
				break;
			case 17:
				$this->setIdStatusProposta($value);
				break;
			case 18:
				$this->setStatusAnalisis($value);
				break;
			case 19:
				$this->setVisualizacion($value);
				break;
			case 20:
				$this->setApr($value);
				break;
			case 21:
				$this->setProposta($value);
				break;
			case 22:
				$this->setValor($value);
				break;
			case 23:
				$this->setValorPrevHh($value);
				break;
			case 24:
				$this->setIdPrioridade($value);
				break;
			case 25:
				$this->setHorasVendidas($value);
				break;
			case 26:
				$this->setHorasTrabajadas($value);
				break;
			case 27:
				$this->setCoeficiente($value);
				break;
			case 28:
				$this->setFlagProjeto($value);
				break;
			case 29:
				$this->setTipo($value);
				break;
			case 30:
				$this->setCodigoVelhio($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PropostaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCodigoProposta($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCodigoSgws($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCodigoProjeto($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCodigoSgwsProjeto($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCodigoCentro($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIdNegociacao($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCodigoTipo($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDataInicio($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDataFinal($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDataIrProjeto($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDataFrProjeto($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setNomeProposta($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCliente($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setSatisfacaoCliente($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setNaoConformidade($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setGerente($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setStatus($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setIdStatusProposta($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setStatusAnalisis($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setVisualizacion($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setApr($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setProposta($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setValor($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setValorPrevHh($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setIdPrioridade($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setHorasVendidas($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setHorasTrabajadas($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCoeficiente($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setFlagProjeto($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setTipo($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setCodigoVelhio($arr[$keys[30]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PropostaPeer::DATABASE_NAME);

		if ($this->isColumnModified(PropostaPeer::CODIGO_PROPOSTA)) $criteria->add(PropostaPeer::CODIGO_PROPOSTA, $this->codigo_proposta);
		if ($this->isColumnModified(PropostaPeer::CODIGO_SGWS)) $criteria->add(PropostaPeer::CODIGO_SGWS, $this->codigo_sgws);
		if ($this->isColumnModified(PropostaPeer::CODIGO_PROJETO)) $criteria->add(PropostaPeer::CODIGO_PROJETO, $this->codigo_projeto);
		if ($this->isColumnModified(PropostaPeer::CODIGO_SGWS_PROJETO)) $criteria->add(PropostaPeer::CODIGO_SGWS_PROJETO, $this->codigo_sgws_projeto);
		if ($this->isColumnModified(PropostaPeer::CODIGO_CENTRO)) $criteria->add(PropostaPeer::CODIGO_CENTRO, $this->codigo_centro);
		if ($this->isColumnModified(PropostaPeer::ID_NEGOCIACAO)) $criteria->add(PropostaPeer::ID_NEGOCIACAO, $this->id_negociacao);
		if ($this->isColumnModified(PropostaPeer::CODIGO_TIPO)) $criteria->add(PropostaPeer::CODIGO_TIPO, $this->codigo_tipo);
		if ($this->isColumnModified(PropostaPeer::DATA_INICIO)) $criteria->add(PropostaPeer::DATA_INICIO, $this->data_inicio);
		if ($this->isColumnModified(PropostaPeer::DATA_FINAL)) $criteria->add(PropostaPeer::DATA_FINAL, $this->data_final);
		if ($this->isColumnModified(PropostaPeer::DATA_IR_PROJETO)) $criteria->add(PropostaPeer::DATA_IR_PROJETO, $this->data_ir_projeto);
		if ($this->isColumnModified(PropostaPeer::DATA_FR_PROJETO)) $criteria->add(PropostaPeer::DATA_FR_PROJETO, $this->data_fr_projeto);
		if ($this->isColumnModified(PropostaPeer::NOME_PROPOSTA)) $criteria->add(PropostaPeer::NOME_PROPOSTA, $this->nome_proposta);
		if ($this->isColumnModified(PropostaPeer::CLIENTE)) $criteria->add(PropostaPeer::CLIENTE, $this->cliente);
		if ($this->isColumnModified(PropostaPeer::SATISFACAO_CLIENTE)) $criteria->add(PropostaPeer::SATISFACAO_CLIENTE, $this->satisfacao_cliente);
		if ($this->isColumnModified(PropostaPeer::NAO_CONFORMIDADE)) $criteria->add(PropostaPeer::NAO_CONFORMIDADE, $this->nao_conformidade);
		if ($this->isColumnModified(PropostaPeer::GERENTE)) $criteria->add(PropostaPeer::GERENTE, $this->gerente);
		if ($this->isColumnModified(PropostaPeer::STATUS)) $criteria->add(PropostaPeer::STATUS, $this->status);
		if ($this->isColumnModified(PropostaPeer::ID_STATUS_PROPOSTA)) $criteria->add(PropostaPeer::ID_STATUS_PROPOSTA, $this->id_status_proposta);
		if ($this->isColumnModified(PropostaPeer::STATUS_ANALISIS)) $criteria->add(PropostaPeer::STATUS_ANALISIS, $this->status_analisis);
		if ($this->isColumnModified(PropostaPeer::VISUALIZACION)) $criteria->add(PropostaPeer::VISUALIZACION, $this->visualizacion);
		if ($this->isColumnModified(PropostaPeer::APR)) $criteria->add(PropostaPeer::APR, $this->apr);
		if ($this->isColumnModified(PropostaPeer::PROPOSTA)) $criteria->add(PropostaPeer::PROPOSTA, $this->proposta);
		if ($this->isColumnModified(PropostaPeer::VALOR)) $criteria->add(PropostaPeer::VALOR, $this->valor);
		if ($this->isColumnModified(PropostaPeer::VALOR_PREV_HH)) $criteria->add(PropostaPeer::VALOR_PREV_HH, $this->valor_prev_hh);
		if ($this->isColumnModified(PropostaPeer::ID_PRIORIDADE)) $criteria->add(PropostaPeer::ID_PRIORIDADE, $this->id_prioridade);
		if ($this->isColumnModified(PropostaPeer::HORAS_VENDIDAS)) $criteria->add(PropostaPeer::HORAS_VENDIDAS, $this->horas_vendidas);
		if ($this->isColumnModified(PropostaPeer::HORAS_TRABAJADAS)) $criteria->add(PropostaPeer::HORAS_TRABAJADAS, $this->horas_trabajadas);
		if ($this->isColumnModified(PropostaPeer::COEFICIENTE)) $criteria->add(PropostaPeer::COEFICIENTE, $this->coeficiente);
		if ($this->isColumnModified(PropostaPeer::FLAG_PROJETO)) $criteria->add(PropostaPeer::FLAG_PROJETO, $this->flag_projeto);
		if ($this->isColumnModified(PropostaPeer::TIPO)) $criteria->add(PropostaPeer::TIPO, $this->tipo);
		if ($this->isColumnModified(PropostaPeer::CODIGO_VELHIO)) $criteria->add(PropostaPeer::CODIGO_VELHIO, $this->codigo_velhio);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PropostaPeer::DATABASE_NAME);

		$criteria->add(PropostaPeer::CODIGO_PROPOSTA, $this->codigo_proposta);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getCodigoProposta();
	}

	/**
	 * Generic method to set the primary key (codigo_proposta column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCodigoProposta($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Proposta (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCodigoSgws($this->codigo_sgws);

		$copyObj->setCodigoProjeto($this->codigo_projeto);

		$copyObj->setCodigoSgwsProjeto($this->codigo_sgws_projeto);

		$copyObj->setCodigoCentro($this->codigo_centro);

		$copyObj->setIdNegociacao($this->id_negociacao);

		$copyObj->setCodigoTipo($this->codigo_tipo);

		$copyObj->setDataInicio($this->data_inicio);

		$copyObj->setDataFinal($this->data_final);

		$copyObj->setDataIrProjeto($this->data_ir_projeto);

		$copyObj->setDataFrProjeto($this->data_fr_projeto);

		$copyObj->setNomeProposta($this->nome_proposta);

		$copyObj->setCliente($this->cliente);

		$copyObj->setSatisfacaoCliente($this->satisfacao_cliente);

		$copyObj->setNaoConformidade($this->nao_conformidade);

		$copyObj->setGerente($this->gerente);

		$copyObj->setStatus($this->status);

		$copyObj->setIdStatusProposta($this->id_status_proposta);

		$copyObj->setStatusAnalisis($this->status_analisis);

		$copyObj->setVisualizacion($this->visualizacion);

		$copyObj->setApr($this->apr);

		$copyObj->setProposta($this->proposta);

		$copyObj->setValor($this->valor);

		$copyObj->setValorPrevHh($this->valor_prev_hh);

		$copyObj->setIdPrioridade($this->id_prioridade);

		$copyObj->setHorasVendidas($this->horas_vendidas);

		$copyObj->setHorasTrabajadas($this->horas_trabajadas);

		$copyObj->setCoeficiente($this->coeficiente);

		$copyObj->setFlagProjeto($this->flag_projeto);

		$copyObj->setTipo($this->tipo);

		$copyObj->setCodigoVelhio($this->codigo_velhio);


		$copyObj->setNew(true);

		$copyObj->setCodigoProposta(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Proposta Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PropostaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PropostaPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseProposta:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseProposta::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseProposta
