<?php

/**
 * Base class that represents a row from the 'funcionario' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 03/04/2014 12:04:42
 *
 * @package    lib.model.sgws.om
 */
abstract class BaseFuncionario extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        FuncionarioPeer
	 */
	protected static $peer;

	/**
	 * The value for the codigofuncionario field.
	 * @var        int
	 */
	protected $codigofuncionario;

	/**
	 * The value for the nomefuncionario field.
	 * @var        string
	 */
	protected $nomefuncionario;

	/**
	 * The value for the datanascimento field.
	 * @var        string
	 */
	protected $datanascimento;

	/**
	 * The value for the sexo field.
	 * @var        string
	 */
	protected $sexo;

	/**
	 * The value for the celular field.
	 * @var        string
	 */
	protected $celular;

	/**
	 * The value for the telefone field.
	 * @var        string
	 */
	protected $telefone;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the endereco field.
	 * @var        string
	 */
	protected $endereco;

	/**
	 * The value for the numero field.
	 * @var        string
	 */
	protected $numero;

	/**
	 * The value for the complemento field.
	 * @var        string
	 */
	protected $complemento;

	/**
	 * The value for the bairro field.
	 * @var        string
	 */
	protected $bairro;

	/**
	 * The value for the cidade field.
	 * @var        string
	 */
	protected $cidade;

	/**
	 * The value for the estado field.
	 * @var        string
	 */
	protected $estado;

	/**
	 * The value for the pais field.
	 * @var        string
	 */
	protected $pais;

	/**
	 * The value for the cep field.
	 * @var        string
	 */
	protected $cep;

	/**
	 * The value for the numerodependentes field.
	 * @var        string
	 */
	protected $numerodependentes;

	/**
	 * The value for the codigoferias field.
	 * @var        string
	 */
	protected $codigoferias;

	/**
	 * The value for the registro field.
	 * @var        string
	 */
	protected $registro;

	/**
	 * The value for the rg field.
	 * @var        string
	 */
	protected $rg;

	/**
	 * The value for the cpf field.
	 * @var        string
	 */
	protected $cpf;

	/**
	 * The value for the cargo field.
	 * @var        string
	 */
	protected $cargo;

	/**
	 * The value for the nomeusuario field.
	 * @var        string
	 */
	protected $nomeusuario;

	/**
	 * The value for the senha field.
	 * @var        string
	 */
	protected $senha;

	/**
	 * The value for the nivel field.
	 * @var        int
	 */
	protected $nivel;

	/**
	 * The value for the formacontratacao field.
	 * @var        string
	 */
	protected $formacontratacao;

	/**
	 * The value for the dataadmissao field.
	 * @var        string
	 */
	protected $dataadmissao;

	/**
	 * The value for the datademissao field.
	 * @var        string
	 */
	protected $datademissao;

	/**
	 * The value for the salario field.
	 * @var        int
	 */
	protected $salario;

	/**
	 * The value for the folha field.
	 * @var        string
	 */
	protected $folha;

	/**
	 * The value for the documento field.
	 * @var        string
	 */
	protected $documento;

	/**
	 * The value for the status field.
	 * @var        string
	 */
	protected $status;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'FuncionarioPeer';

	/**
	 * Get the [codigofuncionario] column value.
	 * 
	 * @return     int
	 */
	public function getCodigofuncionario()
	{
		return $this->codigofuncionario;
	}

	/**
	 * Get the [nomefuncionario] column value.
	 * 
	 * @return     string
	 */
	public function getNomefuncionario()
	{
		return $this->nomefuncionario;
	}

	/**
	 * Get the [optionally formatted] temporal [datanascimento] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatanascimento($format = 'Y-m-d')
	{
		if ($this->datanascimento === null) {
			return null;
		}


		if ($this->datanascimento === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datanascimento);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datanascimento, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [sexo] column value.
	 * 
	 * @return     string
	 */
	public function getSexo()
	{
		return $this->sexo;
	}

	/**
	 * Get the [celular] column value.
	 * 
	 * @return     string
	 */
	public function getCelular()
	{
		return $this->celular;
	}

	/**
	 * Get the [telefone] column value.
	 * 
	 * @return     string
	 */
	public function getTelefone()
	{
		return $this->telefone;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [endereco] column value.
	 * 
	 * @return     string
	 */
	public function getEndereco()
	{
		return $this->endereco;
	}

	/**
	 * Get the [numero] column value.
	 * 
	 * @return     string
	 */
	public function getNumero()
	{
		return $this->numero;
	}

	/**
	 * Get the [complemento] column value.
	 * 
	 * @return     string
	 */
	public function getComplemento()
	{
		return $this->complemento;
	}

	/**
	 * Get the [bairro] column value.
	 * 
	 * @return     string
	 */
	public function getBairro()
	{
		return $this->bairro;
	}

	/**
	 * Get the [cidade] column value.
	 * 
	 * @return     string
	 */
	public function getCidade()
	{
		return $this->cidade;
	}

	/**
	 * Get the [estado] column value.
	 * 
	 * @return     string
	 */
	public function getEstado()
	{
		return $this->estado;
	}

	/**
	 * Get the [pais] column value.
	 * 
	 * @return     string
	 */
	public function getPais()
	{
		return $this->pais;
	}

	/**
	 * Get the [cep] column value.
	 * 
	 * @return     string
	 */
	public function getCep()
	{
		return $this->cep;
	}

	/**
	 * Get the [numerodependentes] column value.
	 * 
	 * @return     string
	 */
	public function getNumerodependentes()
	{
		return $this->numerodependentes;
	}

	/**
	 * Get the [codigoferias] column value.
	 * 
	 * @return     string
	 */
	public function getCodigoferias()
	{
		return $this->codigoferias;
	}

	/**
	 * Get the [registro] column value.
	 * 
	 * @return     string
	 */
	public function getRegistro()
	{
		return $this->registro;
	}

	/**
	 * Get the [rg] column value.
	 * 
	 * @return     string
	 */
	public function getRg()
	{
		return $this->rg;
	}

	/**
	 * Get the [cpf] column value.
	 * 
	 * @return     string
	 */
	public function getCpf()
	{
		return $this->cpf;
	}

	/**
	 * Get the [cargo] column value.
	 * 
	 * @return     string
	 */
	public function getCargo()
	{
		return $this->cargo;
	}

	/**
	 * Get the [nomeusuario] column value.
	 * 
	 * @return     string
	 */
	public function getNomeusuario()
	{
		return $this->nomeusuario;
	}

	/**
	 * Get the [senha] column value.
	 * 
	 * @return     string
	 */
	public function getSenha()
	{
		return $this->senha;
	}

	/**
	 * Get the [nivel] column value.
	 * 
	 * @return     int
	 */
	public function getNivel()
	{
		return $this->nivel;
	}

	/**
	 * Get the [formacontratacao] column value.
	 * 
	 * @return     string
	 */
	public function getFormacontratacao()
	{
		return $this->formacontratacao;
	}

	/**
	 * Get the [optionally formatted] temporal [dataadmissao] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataadmissao($format = 'Y-m-d')
	{
		if ($this->dataadmissao === null) {
			return null;
		}


		if ($this->dataadmissao === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dataadmissao);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dataadmissao, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [datademissao] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatademissao($format = 'Y-m-d')
	{
		if ($this->datademissao === null) {
			return null;
		}


		if ($this->datademissao === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datademissao);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datademissao, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [salario] column value.
	 * 
	 * @return     int
	 */
	public function getSalario()
	{
		return $this->salario;
	}

	/**
	 * Get the [folha] column value.
	 * 
	 * @return     string
	 */
	public function getFolha()
	{
		return $this->folha;
	}

	/**
	 * Get the [documento] column value.
	 * 
	 * @return     string
	 */
	public function getDocumento()
	{
		return $this->documento;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     string
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Set the value of [codigofuncionario] column.
	 * 
	 * @param      int $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setCodigofuncionario($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codigofuncionario !== $v) {
			$this->codigofuncionario = $v;
			$this->modifiedColumns[] = FuncionarioPeer::CODIGOFUNCIONARIO;
		}

		return $this;
	} // setCodigofuncionario()

	/**
	 * Set the value of [nomefuncionario] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setNomefuncionario($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nomefuncionario !== $v) {
			$this->nomefuncionario = $v;
			$this->modifiedColumns[] = FuncionarioPeer::NOMEFUNCIONARIO;
		}

		return $this;
	} // setNomefuncionario()

	/**
	 * Sets the value of [datanascimento] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setDatanascimento($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datanascimento !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datanascimento !== null && $tmpDt = new DateTime($this->datanascimento)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datanascimento = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = FuncionarioPeer::DATANASCIMENTO;
			}
		} // if either are not null

		return $this;
	} // setDatanascimento()

	/**
	 * Set the value of [sexo] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setSexo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sexo !== $v) {
			$this->sexo = $v;
			$this->modifiedColumns[] = FuncionarioPeer::SEXO;
		}

		return $this;
	} // setSexo()

	/**
	 * Set the value of [celular] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celular !== $v) {
			$this->celular = $v;
			$this->modifiedColumns[] = FuncionarioPeer::CELULAR;
		}

		return $this;
	} // setCelular()

	/**
	 * Set the value of [telefone] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setTelefone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefone !== $v) {
			$this->telefone = $v;
			$this->modifiedColumns[] = FuncionarioPeer::TELEFONE;
		}

		return $this;
	} // setTelefone()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = FuncionarioPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [endereco] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setEndereco($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->endereco !== $v) {
			$this->endereco = $v;
			$this->modifiedColumns[] = FuncionarioPeer::ENDERECO;
		}

		return $this;
	} // setEndereco()

	/**
	 * Set the value of [numero] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setNumero($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numero !== $v) {
			$this->numero = $v;
			$this->modifiedColumns[] = FuncionarioPeer::NUMERO;
		}

		return $this;
	} // setNumero()

	/**
	 * Set the value of [complemento] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setComplemento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->complemento !== $v) {
			$this->complemento = $v;
			$this->modifiedColumns[] = FuncionarioPeer::COMPLEMENTO;
		}

		return $this;
	} // setComplemento()

	/**
	 * Set the value of [bairro] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setBairro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bairro !== $v) {
			$this->bairro = $v;
			$this->modifiedColumns[] = FuncionarioPeer::BAIRRO;
		}

		return $this;
	} // setBairro()

	/**
	 * Set the value of [cidade] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setCidade($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cidade !== $v) {
			$this->cidade = $v;
			$this->modifiedColumns[] = FuncionarioPeer::CIDADE;
		}

		return $this;
	} // setCidade()

	/**
	 * Set the value of [estado] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setEstado($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->estado !== $v) {
			$this->estado = $v;
			$this->modifiedColumns[] = FuncionarioPeer::ESTADO;
		}

		return $this;
	} // setEstado()

	/**
	 * Set the value of [pais] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setPais($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pais !== $v) {
			$this->pais = $v;
			$this->modifiedColumns[] = FuncionarioPeer::PAIS;
		}

		return $this;
	} // setPais()

	/**
	 * Set the value of [cep] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setCep($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cep !== $v) {
			$this->cep = $v;
			$this->modifiedColumns[] = FuncionarioPeer::CEP;
		}

		return $this;
	} // setCep()

	/**
	 * Set the value of [numerodependentes] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setNumerodependentes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numerodependentes !== $v) {
			$this->numerodependentes = $v;
			$this->modifiedColumns[] = FuncionarioPeer::NUMERODEPENDENTES;
		}

		return $this;
	} // setNumerodependentes()

	/**
	 * Set the value of [codigoferias] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setCodigoferias($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigoferias !== $v) {
			$this->codigoferias = $v;
			$this->modifiedColumns[] = FuncionarioPeer::CODIGOFERIAS;
		}

		return $this;
	} // setCodigoferias()

	/**
	 * Set the value of [registro] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setRegistro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->registro !== $v) {
			$this->registro = $v;
			$this->modifiedColumns[] = FuncionarioPeer::REGISTRO;
		}

		return $this;
	} // setRegistro()

	/**
	 * Set the value of [rg] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setRg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rg !== $v) {
			$this->rg = $v;
			$this->modifiedColumns[] = FuncionarioPeer::RG;
		}

		return $this;
	} // setRg()

	/**
	 * Set the value of [cpf] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setCpf($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cpf !== $v) {
			$this->cpf = $v;
			$this->modifiedColumns[] = FuncionarioPeer::CPF;
		}

		return $this;
	} // setCpf()

	/**
	 * Set the value of [cargo] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setCargo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cargo !== $v) {
			$this->cargo = $v;
			$this->modifiedColumns[] = FuncionarioPeer::CARGO;
		}

		return $this;
	} // setCargo()

	/**
	 * Set the value of [nomeusuario] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setNomeusuario($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nomeusuario !== $v) {
			$this->nomeusuario = $v;
			$this->modifiedColumns[] = FuncionarioPeer::NOMEUSUARIO;
		}

		return $this;
	} // setNomeusuario()

	/**
	 * Set the value of [senha] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setSenha($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->senha !== $v) {
			$this->senha = $v;
			$this->modifiedColumns[] = FuncionarioPeer::SENHA;
		}

		return $this;
	} // setSenha()

	/**
	 * Set the value of [nivel] column.
	 * 
	 * @param      int $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setNivel($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nivel !== $v) {
			$this->nivel = $v;
			$this->modifiedColumns[] = FuncionarioPeer::NIVEL;
		}

		return $this;
	} // setNivel()

	/**
	 * Set the value of [formacontratacao] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setFormacontratacao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->formacontratacao !== $v) {
			$this->formacontratacao = $v;
			$this->modifiedColumns[] = FuncionarioPeer::FORMACONTRATACAO;
		}

		return $this;
	} // setFormacontratacao()

	/**
	 * Sets the value of [dataadmissao] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setDataadmissao($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dataadmissao !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dataadmissao !== null && $tmpDt = new DateTime($this->dataadmissao)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dataadmissao = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = FuncionarioPeer::DATAADMISSAO;
			}
		} // if either are not null

		return $this;
	} // setDataadmissao()

	/**
	 * Sets the value of [datademissao] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setDatademissao($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datademissao !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datademissao !== null && $tmpDt = new DateTime($this->datademissao)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datademissao = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = FuncionarioPeer::DATADEMISSAO;
			}
		} // if either are not null

		return $this;
	} // setDatademissao()

	/**
	 * Set the value of [salario] column.
	 * 
	 * @param      int $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setSalario($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->salario !== $v) {
			$this->salario = $v;
			$this->modifiedColumns[] = FuncionarioPeer::SALARIO;
		}

		return $this;
	} // setSalario()

	/**
	 * Set the value of [folha] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setFolha($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->folha !== $v) {
			$this->folha = $v;
			$this->modifiedColumns[] = FuncionarioPeer::FOLHA;
		}

		return $this;
	} // setFolha()

	/**
	 * Set the value of [documento] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setDocumento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->documento !== $v) {
			$this->documento = $v;
			$this->modifiedColumns[] = FuncionarioPeer::DOCUMENTO;
		}

		return $this;
	} // setDocumento()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      string $v new value
	 * @return     Funcionario The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = FuncionarioPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->codigofuncionario = (isset($row[$startcol + 0]) && $row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->nomefuncionario = (isset($row[$startcol + 1]) && $row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->datanascimento = (isset($row[$startcol + 2]) && $row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->sexo = (isset($row[$startcol + 3]) && $row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->celular = (isset($row[$startcol + 4]) && $row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->telefone = (isset($row[$startcol + 5]) && $row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->email = (isset($row[$startcol + 6]) && $row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->endereco = (isset($row[$startcol + 7]) && $row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->numero = (isset($row[$startcol + 8]) && $row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->complemento = (isset($row[$startcol + 9]) && $row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->bairro = (isset($row[$startcol + 10]) && $row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->cidade = (isset($row[$startcol + 11]) && $row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->estado = (isset($row[$startcol + 12]) && $row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->pais = (isset($row[$startcol + 13]) && $row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->cep = (isset($row[$startcol + 14]) && $row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->numerodependentes = (isset($row[$startcol + 15]) && $row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->codigoferias = (isset($row[$startcol + 16]) && $row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->registro = (isset($row[$startcol + 17]) && $row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->rg = (isset($row[$startcol + 18]) && $row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->cpf = (isset($row[$startcol + 19]) && $row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->cargo = (isset($row[$startcol + 20]) && $row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->nomeusuario = (isset($row[$startcol + 21]) && $row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->senha = (isset($row[$startcol + 22]) && $row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->nivel = (isset($row[$startcol + 23]) && $row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->formacontratacao = (isset($row[$startcol + 24]) && $row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->dataadmissao = (isset($row[$startcol + 25]) && $row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->datademissao = (isset($row[$startcol + 26]) && $row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->salario = (isset($row[$startcol + 27]) && $row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->folha = (isset($row[$startcol + 28]) && $row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->documento = (isset($row[$startcol + 29]) && $row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->status = (isset($row[$startcol + 30]) && $row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 31; // 31 = FuncionarioPeer::NUM_COLUMNS - FuncionarioPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Funcionario object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FuncionarioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = FuncionarioPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FuncionarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseFuncionario:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				FuncionarioPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseFuncionario:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FuncionarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseFuncionario:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseFuncionario:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				FuncionarioPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = FuncionarioPeer::CODIGOFUNCIONARIO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = FuncionarioPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCodigofuncionario($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += FuncionarioPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = FuncionarioPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FuncionarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCodigofuncionario();
				break;
			case 1:
				return $this->getNomefuncionario();
				break;
			case 2:
				return $this->getDatanascimento();
				break;
			case 3:
				return $this->getSexo();
				break;
			case 4:
				return $this->getCelular();
				break;
			case 5:
				return $this->getTelefone();
				break;
			case 6:
				return $this->getEmail();
				break;
			case 7:
				return $this->getEndereco();
				break;
			case 8:
				return $this->getNumero();
				break;
			case 9:
				return $this->getComplemento();
				break;
			case 10:
				return $this->getBairro();
				break;
			case 11:
				return $this->getCidade();
				break;
			case 12:
				return $this->getEstado();
				break;
			case 13:
				return $this->getPais();
				break;
			case 14:
				return $this->getCep();
				break;
			case 15:
				return $this->getNumerodependentes();
				break;
			case 16:
				return $this->getCodigoferias();
				break;
			case 17:
				return $this->getRegistro();
				break;
			case 18:
				return $this->getRg();
				break;
			case 19:
				return $this->getCpf();
				break;
			case 20:
				return $this->getCargo();
				break;
			case 21:
				return $this->getNomeusuario();
				break;
			case 22:
				return $this->getSenha();
				break;
			case 23:
				return $this->getNivel();
				break;
			case 24:
				return $this->getFormacontratacao();
				break;
			case 25:
				return $this->getDataadmissao();
				break;
			case 26:
				return $this->getDatademissao();
				break;
			case 27:
				return $this->getSalario();
				break;
			case 28:
				return $this->getFolha();
				break;
			case 29:
				return $this->getDocumento();
				break;
			case 30:
				return $this->getStatus();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = FuncionarioPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCodigofuncionario(),
			$keys[1] => $this->getNomefuncionario(),
			$keys[2] => $this->getDatanascimento(),
			$keys[3] => $this->getSexo(),
			$keys[4] => $this->getCelular(),
			$keys[5] => $this->getTelefone(),
			$keys[6] => $this->getEmail(),
			$keys[7] => $this->getEndereco(),
			$keys[8] => $this->getNumero(),
			$keys[9] => $this->getComplemento(),
			$keys[10] => $this->getBairro(),
			$keys[11] => $this->getCidade(),
			$keys[12] => $this->getEstado(),
			$keys[13] => $this->getPais(),
			$keys[14] => $this->getCep(),
			$keys[15] => $this->getNumerodependentes(),
			$keys[16] => $this->getCodigoferias(),
			$keys[17] => $this->getRegistro(),
			$keys[18] => $this->getRg(),
			$keys[19] => $this->getCpf(),
			$keys[20] => $this->getCargo(),
			$keys[21] => $this->getNomeusuario(),
			$keys[22] => $this->getSenha(),
			$keys[23] => $this->getNivel(),
			$keys[24] => $this->getFormacontratacao(),
			$keys[25] => $this->getDataadmissao(),
			$keys[26] => $this->getDatademissao(),
			$keys[27] => $this->getSalario(),
			$keys[28] => $this->getFolha(),
			$keys[29] => $this->getDocumento(),
			$keys[30] => $this->getStatus(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FuncionarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCodigofuncionario($value);
				break;
			case 1:
				$this->setNomefuncionario($value);
				break;
			case 2:
				$this->setDatanascimento($value);
				break;
			case 3:
				$this->setSexo($value);
				break;
			case 4:
				$this->setCelular($value);
				break;
			case 5:
				$this->setTelefone($value);
				break;
			case 6:
				$this->setEmail($value);
				break;
			case 7:
				$this->setEndereco($value);
				break;
			case 8:
				$this->setNumero($value);
				break;
			case 9:
				$this->setComplemento($value);
				break;
			case 10:
				$this->setBairro($value);
				break;
			case 11:
				$this->setCidade($value);
				break;
			case 12:
				$this->setEstado($value);
				break;
			case 13:
				$this->setPais($value);
				break;
			case 14:
				$this->setCep($value);
				break;
			case 15:
				$this->setNumerodependentes($value);
				break;
			case 16:
				$this->setCodigoferias($value);
				break;
			case 17:
				$this->setRegistro($value);
				break;
			case 18:
				$this->setRg($value);
				break;
			case 19:
				$this->setCpf($value);
				break;
			case 20:
				$this->setCargo($value);
				break;
			case 21:
				$this->setNomeusuario($value);
				break;
			case 22:
				$this->setSenha($value);
				break;
			case 23:
				$this->setNivel($value);
				break;
			case 24:
				$this->setFormacontratacao($value);
				break;
			case 25:
				$this->setDataadmissao($value);
				break;
			case 26:
				$this->setDatademissao($value);
				break;
			case 27:
				$this->setSalario($value);
				break;
			case 28:
				$this->setFolha($value);
				break;
			case 29:
				$this->setDocumento($value);
				break;
			case 30:
				$this->setStatus($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = FuncionarioPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCodigofuncionario($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNomefuncionario($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDatanascimento($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSexo($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCelular($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTelefone($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setEmail($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEndereco($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNumero($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setComplemento($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setBairro($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCidade($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setEstado($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPais($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCep($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setNumerodependentes($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCodigoferias($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setRegistro($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setRg($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCpf($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCargo($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setNomeusuario($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setSenha($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setNivel($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setFormacontratacao($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setDataadmissao($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setDatademissao($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setSalario($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setFolha($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setDocumento($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setStatus($arr[$keys[30]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(FuncionarioPeer::DATABASE_NAME);

		if ($this->isColumnModified(FuncionarioPeer::CODIGOFUNCIONARIO)) $criteria->add(FuncionarioPeer::CODIGOFUNCIONARIO, $this->codigofuncionario);
		if ($this->isColumnModified(FuncionarioPeer::NOMEFUNCIONARIO)) $criteria->add(FuncionarioPeer::NOMEFUNCIONARIO, $this->nomefuncionario);
		if ($this->isColumnModified(FuncionarioPeer::DATANASCIMENTO)) $criteria->add(FuncionarioPeer::DATANASCIMENTO, $this->datanascimento);
		if ($this->isColumnModified(FuncionarioPeer::SEXO)) $criteria->add(FuncionarioPeer::SEXO, $this->sexo);
		if ($this->isColumnModified(FuncionarioPeer::CELULAR)) $criteria->add(FuncionarioPeer::CELULAR, $this->celular);
		if ($this->isColumnModified(FuncionarioPeer::TELEFONE)) $criteria->add(FuncionarioPeer::TELEFONE, $this->telefone);
		if ($this->isColumnModified(FuncionarioPeer::EMAIL)) $criteria->add(FuncionarioPeer::EMAIL, $this->email);
		if ($this->isColumnModified(FuncionarioPeer::ENDERECO)) $criteria->add(FuncionarioPeer::ENDERECO, $this->endereco);
		if ($this->isColumnModified(FuncionarioPeer::NUMERO)) $criteria->add(FuncionarioPeer::NUMERO, $this->numero);
		if ($this->isColumnModified(FuncionarioPeer::COMPLEMENTO)) $criteria->add(FuncionarioPeer::COMPLEMENTO, $this->complemento);
		if ($this->isColumnModified(FuncionarioPeer::BAIRRO)) $criteria->add(FuncionarioPeer::BAIRRO, $this->bairro);
		if ($this->isColumnModified(FuncionarioPeer::CIDADE)) $criteria->add(FuncionarioPeer::CIDADE, $this->cidade);
		if ($this->isColumnModified(FuncionarioPeer::ESTADO)) $criteria->add(FuncionarioPeer::ESTADO, $this->estado);
		if ($this->isColumnModified(FuncionarioPeer::PAIS)) $criteria->add(FuncionarioPeer::PAIS, $this->pais);
		if ($this->isColumnModified(FuncionarioPeer::CEP)) $criteria->add(FuncionarioPeer::CEP, $this->cep);
		if ($this->isColumnModified(FuncionarioPeer::NUMERODEPENDENTES)) $criteria->add(FuncionarioPeer::NUMERODEPENDENTES, $this->numerodependentes);
		if ($this->isColumnModified(FuncionarioPeer::CODIGOFERIAS)) $criteria->add(FuncionarioPeer::CODIGOFERIAS, $this->codigoferias);
		if ($this->isColumnModified(FuncionarioPeer::REGISTRO)) $criteria->add(FuncionarioPeer::REGISTRO, $this->registro);
		if ($this->isColumnModified(FuncionarioPeer::RG)) $criteria->add(FuncionarioPeer::RG, $this->rg);
		if ($this->isColumnModified(FuncionarioPeer::CPF)) $criteria->add(FuncionarioPeer::CPF, $this->cpf);
		if ($this->isColumnModified(FuncionarioPeer::CARGO)) $criteria->add(FuncionarioPeer::CARGO, $this->cargo);
		if ($this->isColumnModified(FuncionarioPeer::NOMEUSUARIO)) $criteria->add(FuncionarioPeer::NOMEUSUARIO, $this->nomeusuario);
		if ($this->isColumnModified(FuncionarioPeer::SENHA)) $criteria->add(FuncionarioPeer::SENHA, $this->senha);
		if ($this->isColumnModified(FuncionarioPeer::NIVEL)) $criteria->add(FuncionarioPeer::NIVEL, $this->nivel);
		if ($this->isColumnModified(FuncionarioPeer::FORMACONTRATACAO)) $criteria->add(FuncionarioPeer::FORMACONTRATACAO, $this->formacontratacao);
		if ($this->isColumnModified(FuncionarioPeer::DATAADMISSAO)) $criteria->add(FuncionarioPeer::DATAADMISSAO, $this->dataadmissao);
		if ($this->isColumnModified(FuncionarioPeer::DATADEMISSAO)) $criteria->add(FuncionarioPeer::DATADEMISSAO, $this->datademissao);
		if ($this->isColumnModified(FuncionarioPeer::SALARIO)) $criteria->add(FuncionarioPeer::SALARIO, $this->salario);
		if ($this->isColumnModified(FuncionarioPeer::FOLHA)) $criteria->add(FuncionarioPeer::FOLHA, $this->folha);
		if ($this->isColumnModified(FuncionarioPeer::DOCUMENTO)) $criteria->add(FuncionarioPeer::DOCUMENTO, $this->documento);
		if ($this->isColumnModified(FuncionarioPeer::STATUS)) $criteria->add(FuncionarioPeer::STATUS, $this->status);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(FuncionarioPeer::DATABASE_NAME);

		$criteria->add(FuncionarioPeer::CODIGOFUNCIONARIO, $this->codigofuncionario);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getCodigofuncionario();
	}

	/**
	 * Generic method to set the primary key (codigofuncionario column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCodigofuncionario($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Funcionario (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setNomefuncionario($this->nomefuncionario);

		$copyObj->setDatanascimento($this->datanascimento);

		$copyObj->setSexo($this->sexo);

		$copyObj->setCelular($this->celular);

		$copyObj->setTelefone($this->telefone);

		$copyObj->setEmail($this->email);

		$copyObj->setEndereco($this->endereco);

		$copyObj->setNumero($this->numero);

		$copyObj->setComplemento($this->complemento);

		$copyObj->setBairro($this->bairro);

		$copyObj->setCidade($this->cidade);

		$copyObj->setEstado($this->estado);

		$copyObj->setPais($this->pais);

		$copyObj->setCep($this->cep);

		$copyObj->setNumerodependentes($this->numerodependentes);

		$copyObj->setCodigoferias($this->codigoferias);

		$copyObj->setRegistro($this->registro);

		$copyObj->setRg($this->rg);

		$copyObj->setCpf($this->cpf);

		$copyObj->setCargo($this->cargo);

		$copyObj->setNomeusuario($this->nomeusuario);

		$copyObj->setSenha($this->senha);

		$copyObj->setNivel($this->nivel);

		$copyObj->setFormacontratacao($this->formacontratacao);

		$copyObj->setDataadmissao($this->dataadmissao);

		$copyObj->setDatademissao($this->datademissao);

		$copyObj->setSalario($this->salario);

		$copyObj->setFolha($this->folha);

		$copyObj->setDocumento($this->documento);

		$copyObj->setStatus($this->status);


		$copyObj->setNew(true);

		$copyObj->setCodigofuncionario(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Funcionario Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     FuncionarioPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new FuncionarioPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseFuncionario:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseFuncionario::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseFuncionario
