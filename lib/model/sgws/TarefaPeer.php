<?php


/**
 * Skeleton subclass for performing query and update operations on the 'tarefa' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 24/09/2013 16:43:53
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.sgws
 */
class TarefaPeer extends BaseTarefaPeer {
    
    public static function actualizaResponsable($cod_velhio, $nvo)
    {
  	$con = Propel::getConnection();

	// select from...
	$c1 = new Criteria();
	$c1->add(self::RESPONSAVEL,$cod_velhio, Criteria::EQUAL);

	// update set
	$c2 = new Criteria();
	$c2->add(self::RESPONSAVEL, $nvo);

	BasePeer::doUpdate($c1, $c2, $con);
    }
    
    
    public static function getProjetosDeFuncionarioPorTarefa($id_user, $fecha)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::CODIGOPROJETO);
        $c->addSelectColumn(PropostaPeer::NOME_PROPOSTA);
        $c->addSelectColumn(PropostaPeer::CODIGO_SGWS_PROJETO);
        //Condicion
        //$c->add(self::RESPONSAVEL, $id_user, Criteria::EQUAL);
        $c->addJoin(self::CODIGOPROJETO, PropostaPeer::CODIGO_PROJETO, Criteria::INNER_JOIN);
        //$cFecha = $c->getNewCriterion(PropostaPeer::DATA_IR_PROJETO, $fecha,Criteria::GREATER_EQUAL);
        //$cFecha->addAnd($c->getNewCriterion(PropostaPeer::DATA_FR_PROJETO, $fecha, Criteria::LESS_EQUAL));
        //$c->add($cFecha);
        $c->add(PropostaPeer::ID_STATUS_PROPOSTA, 2, Criteria::EQUAL);
        $c->addGroupByColumn(self::CODIGOPROJETO);
        //Ejecucion de consulta
        $sortTemp = PropostaPeer::getFieldNames(BasePeer::TYPE_FIELDNAME);
        //PERSONALIZAR SEGUN LA NECESIDAD DEL MODULO
        $sort = $sortTemp[3];      // Nombre del campo que por defecto se ordenara
 
        $c->addDescendingOrderByColumn($sort);
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['id_projeto'] = $res['CODIGOPROJETO'];            
            $dato['codigo_projeto'] = $res['CODIGO_SGWS_PROJETO']; 
            $dato['nombre_projeto'] = substr($res['NOME_PROPOSTA'], 0, 100);
            $datos[] = $dato;
        }        
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
    
    public static function getProjetosDeFuncionario($id_user)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::CODIGOPROJETO);
        $c->addSelectColumn(PropostaPeer::CODIGO_SGWS_PROJETO);
        //Condicion
        $c->add(self::RESPONSAVEL, $id_user, Criteria::EQUAL);
        $c->addJoin(self::CODIGOPROJETO, PropostaPeer::CODIGO_PROJETO, Criteria::INNER_JOIN);
        $c->addGroupByColumn(self::CODIGOPROJETO);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['id_projeto'] = $res['CODIGOPROJETO'];            
            $dato['codigo_projeto'] = $res['CODIGO_SGWS_PROJETO'];            
            $datos[] = $dato;
        }        
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
    
    public static function getMinhasTarefas($id_user)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::CODIGOTAREFA);
        $c->addSelectColumn(TarefadescricaoPeer::TAREFA);
        $c->addSelectColumn(PropostaPeer::CODIGO_SGWS_PROJETO);
        $c->addSelectColumn(self::DATAIRTAREFA);
        $c->addSelectColumn(self::DATAFRTAREFA);
        $c->addSelectColumn(self::HORASPREVISTAS);
        //Condicion
        $c->add(self::RESPONSAVEL, $id_user, Criteria::EQUAL);
        $c->addJoin(self::CODIGOPROJETO, PropostaPeer::CODIGO_PROJETO, Criteria::INNER_JOIN);
        $c->addJoin(self::DESCRICAO, TarefadescricaoPeer::DESCRICAO, Criteria::INNER_JOIN);
        $sortTemp = TarefaPeer::getFieldNames(BasePeer::TYPE_FIELDNAME);
        //PERSONALIZAR SEGUN LA NECESIDAD DEL MODULO
        $sort = $sortTemp[3];      // Nombre del campo que por defecto se ordenara
        $c->addDescendingOrderByColumn($sort);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['id_tarefa'] = $res['CODIGOTAREFA'];            
            $dato['tarefa'] = $res['TAREFA'];            
            $dato['codigo_projeto'] = $res['CODIGO_SGWS_PROJETO'];            
            $dato['data_inicio'] = $res['DATAIRTAREFA'];            
            $dato['data_fim'] = $res['DATAFRTAREFA'];            
            $dato['horas'] = $res['HORASPREVISTAS'];            
            $datos[] = $dato;
        }        
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
    
    public static function getTarefasProjetoHidrat($id_projeto)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::CODIGOTAREFA);
        $c->addSelectColumn(self::VISUALIZACAO);
        $c->addSelectColumn(TarefadescricaoPeer::TAREFA);
        //Condicion
        $c->add(self::CODIGOPROJETO, $id_projeto, Criteria::EQUAL);
        $c->addJoin(self::DESCRICAO, TarefadescricaoPeer::DESCRICAO, Criteria::INNER_JOIN);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['id']      = $res['CODIGOTAREFA'];            
            $dato['visual']      = $res['VISUALIZACAO'];            
            $dato['tarefa']  = $res['TAREFA'];            
            $datos[] = $dato;
        }        
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
    
    
    public static function getCodProjetoByCodTarefa($idTarefa)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::CODIGOPROJETO);
        //Condicion
        $c->add(self::CODIGOTAREFA, $idTarefa, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['cod_projeto']      = $res['CODIGOPROJETO'];            
        }        
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
    public static function getInfoTarefa($idTarefa)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::CODIGOTAREFA);
        $c->addSelectColumn(TarefadescricaoPeer::TAREFA);
        //Condicion
        $c->add(self::CODIGOTAREFA, $idTarefa, Criteria::EQUAL);
        $c->addJoin(self::DESCRICAO, TarefadescricaoPeer::DESCRICAO, Criteria::INNER_JOIN);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['id']      = $res['CODIGOTAREFA'];            
            $dato['tarefa']      = $res['TAREFA'];            
        }        
        if (!empty($dato)) {
            return $dato;
        }else {
            return false;
        }
    }
    
    public static function getSelectTarefasByProjeto($idProjeto)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::CODIGOTAREFA);
        $c->addSelectColumn(TarefadescricaoPeer::TAREFA);
        //Condicion
        $c->add(self::CODIGOPROJETO, $idProjeto, Criteria::EQUAL);
        $c->addJoin(self::DESCRICAO, TarefadescricaoPeer::DESCRICAO, Criteria::INNER_JOIN);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $tarefas[''] = 'Selecione';
        while($res = $rs->fetch()) {
            $tarefas[$res['CODIGOTAREFA']]  = $res['TAREFA'];            
        }        
        if (!empty($tarefas)) {
            return $tarefas;
        }else {
            return false;
        }
    }
    
    public static function getTarefasParentByProjeto($idProjeto, $tarefaActual)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(self::CODIGOTAREFA);
        $c->addSelectColumn(TarefadescricaoPeer::TAREFA);
        //Condicion
        $c->add(self::CODIGOPROJETO, $idProjeto, Criteria::EQUAL);
        if($tarefaActual)
        {
            $c->add(self::CODIGOTAREFA, $tarefaActual, Criteria::NOT_EQUAL);
        }
        $c->add(self::TAREFA_PARENT, 0, Criteria::EQUAL);
        $c->addJoin(self::DESCRICAO, TarefadescricaoPeer::DESCRICAO, Criteria::INNER_JOIN);
        $c->addAscendingOrderByColumn(TarefadescricaoPeer::TAREFA);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $tarefas[''] = 'Selecione';
        while($res = $rs->fetch()) {
            $tarefas[$res['CODIGOTAREFA']]  = $res['TAREFA'];            
        }        
        if (!empty($tarefas)) {
            return $tarefas;
        }else {
            return false;
        }
    }
    
    public static function getTarefasByProjeto($cod_projeto)
    {
        $c = new Criteria();
        $c->add(self::CODIGOPROJETO, $cod_projeto, Criteria::EQUAL);
        $c->add(self::TAREFA_PARENT,0, Criteria::EQUAL);
        return self::doSelect($c);
    }
    
    public static function getTarefasHijas($id_parent)
    {
        $c = new Criteria();
        $c->add(self::TAREFA_PARENT,$id_parent, Criteria::EQUAL);
        return self::doSelect($c);
    }
    
    
    
    
    
    public static function getHorasTrabajadasAprobadasByProjeto($cod_projeto)
    {
        $c = new Criteria();
        $c->add(self::CODIGOPROJETO, $cod_projeto, Criteria::EQUAL);
        $rs = self::doSelect($c);
        $sum = 0;
        if($rs)
        {
            foreach ($rs as $val)
            {
                $horas = TempotarefaPeer::getHorasTrabajadas($val->getCodigotarefa());
                $sum += $horas;
            }
        }
        return $sum;
    }

    public static function getAllFuncionarios()
    {
        $c = new Criteria();
        $c->addAscendingOrderByColumn(self::CODIGOTAREFA);
        $c->addGroupByColumn(self::RESPONSAVEL);
        return self::doSelect($c);
    }
    
    public static function getTodosLosFuncionarios()
    {
        $c = new Criteria();
        $c->addAscendingOrderByColumn(self::CODIGOTAREFA);
        
        return self::doSelect($c);
    }
    
    public static function getAllProjetos()
    {
        $c = new Criteria();
        $c->addAscendingOrderByColumn(self::CODIGOTAREFA);
        $c->addGroupByColumn(self::CODIGOPROJETO);
        return self::doSelect($c);
    }
    
    public static function actualizaFuncionario($cod_velhio, $nvo)
    {
  	$con = Propel::getConnection();

	// select from...
	$c1 = new Criteria();
	$c1->add(self::RESPONSAVEL,$cod_velhio, Criteria::EQUAL);
	// update set
	$c2 = new Criteria();
	$c2->add(self::RESPONSAVEL, $nvo, Criteria::EQUAL);

	BasePeer::doUpdate($c1, $c2, $con);
    }
    
    
        public static function getVerifieProjecto($codigo)
    {
	// select from...
	$c = new Criteria();
	$c->add(self::CODIGOPROJETO,$codigo, Criteria::EQUAL);
        return self::doSelect($c);
    }
} // TarefaPeer
