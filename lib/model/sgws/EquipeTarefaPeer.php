<?php


/**
 * Skeleton subclass for performing query and update operations on the 'equipe_tarefa' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 28/09/2013 11:20:53
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.sgws
 */
class EquipeTarefaPeer extends BaseEquipeTarefaPeer {
    
    public static function getAllFuncionarios()
    {
        $c = new Criteria();
        $c->addAscendingOrderByColumn(self::CODIGOFUNCIONARIO);
        //$c->addGroupByColumn(self::CODIGOFUNCIONARIO);
        return self::doSelect($c);
    }
    
    public static function getEquipeTarefa($id_tarefa)
    {
        $c = new Criteria();
        $c->add(self::CODIGOTAREFA, $id_tarefa, Criteria::EQUAL);        
        return self::doSelect($c);
    }
    
    public static function getCheck($tarefa, $func)
    {
        $c = new Criteria();
        $c->add(self::CODIGOTAREFA, $tarefa, Criteria::EQUAL);
        $c->add(self::CODIGOFUNCIONARIO, $func, Criteria::EQUAL);
        return self::doSelectOne($c);
    }
    
    public static function getCheckProjeto($projeto, $func)
    {
        $c = new Criteria();
        $c->add(TarefaPeer::CODIGOPROJETO, $projeto, Criteria::EQUAL);
        $c->add(self::CODIGOFUNCIONARIO, $func, Criteria::EQUAL);
        $c->addJoin(self::CODIGOTAREFA, TarefaPeer::CODIGOTAREFA, Criteria::INNER_JOIN);
        return self::doSelectOne($c);
    }
    
    
    public static function deleitaEquipe($id)
    {
        $con = Propel::getConnection();
	// select from...
	$c1 = new Criteria();
        $c1->add(self::CODIGOTAREFA, $id, Criteria::EQUAL);
	// delete
        BasePeer::doDelete($c1, $con);
    }
    
    public static function getComboEquipoTarefa($id)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::CODIGOFUNCIONARIO);
        $c->addSelectColumn(LxUserPeer::NAME);        
        
        $c->addJoin(self::CODIGOFUNCIONARIO, LxUserPeer::ID_USER, Criteria::INNER_JOIN);
        
        $c->add(LxUserPeer::STATUS, 1, Criteria::EQUAL);
        $c->add(self::CODIGOTAREFA, $id, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $sections[$res['CODIGOFUNCIONARIO']] = $res['NAME'];            
        }
        $sections[aplication_system::getUser()] = aplication_system::getNameUser();            
        if(!empty($sections)){
            return $sections;
        }else{
            return false;
        }
    }
    
    public static function getProjetosDeFuncionario($id_user)
    {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(PropostaPeer::CODIGO_PROJETO);
        $c->addSelectColumn(PropostaPeer::CODIGO_SGWS_PROJETO);
        //Condicion
        $c->add(self::CODIGOFUNCIONARIO, $id_user, Criteria::EQUAL);
        
        $c->add(PropostaPeer::ID_STATUS_PROPOSTA, 2, Criteria::EQUAL);
        $c->add(PropostaPeer::STATUS, 4, Criteria::EQUAL); // En andamento
        $c->addJoin(self::CODIGOTAREFA, TarefaPeer::CODIGOTAREFA, Criteria::INNER_JOIN);
        $c->addJoin(TarefaPeer::CODIGOPROJETO, PropostaPeer::CODIGO_PROJETO, Criteria::INNER_JOIN);
        $c->addGroupByColumn(PropostaPeer::CODIGO_PROJETO);
        
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch()) {
            $dato['id_projeto'] = $res['CODIGO_PROJETO'];            
            $dato['codigo_projeto'] = $res['CODIGO_SGWS_PROJETO'];            
            $datos[] = $dato;
        }        
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
    public static function getTotalProjetosDeFuncionario($id_user)
    {
        $c =  new Criteria();
        //Condicion
        $c->add(self::CODIGOFUNCIONARIO, $id_user, Criteria::EQUAL);
        
        $c->addJoin(self::CODIGOTAREFA, TarefaPeer::CODIGOTAREFA, Criteria::INNER_JOIN);
        $c->addJoin(TarefaPeer::CODIGOPROJETO, PropostaPeer::CODIGO_PROJETO, Criteria::INNER_JOIN);
        $c->add(PropostaPeer::STATUS, '4', Criteria::EQUAL);
        $c->addGroupByColumn(PropostaPeer::CODIGO_PROJETO);
        return self::doCount($c);
        
    }
    
    public static function getComboProjetosUsuario($id_user) {
        $c =  new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Selecciona las columnas
        $c->addSelectColumn(PropostaPeer::CODIGO_PROJETO);
        $c->addSelectColumn(PropostaPeer::CODIGO_SGWS_PROJETO);
        $c->addSelectColumn(PropostaPeer::NOME_PROPOSTA);
        //Condicion
        $c->add(self::CODIGOFUNCIONARIO, $id_user, Criteria::EQUAL);
        $c->addJoin(self::CODIGOTAREFA, TarefaPeer::CODIGOTAREFA, Criteria::INNER_JOIN);
        $c->addJoin(TarefaPeer::CODIGOPROJETO, PropostaPeer::CODIGO_PROJETO, Criteria::INNER_JOIN);
        $c->addGroupByColumn(PropostaPeer::CODIGO_PROJETO);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $dato[] = '';
        while($res = $rs->fetch()) {
            $dato[$res['CODIGO_PROJETO']] = $res['CODIGO_SGWS_PROJETO'].' - '.$res['NOME_PROPOSTA'];
        }
        return $dato;
    }
    
    

    public static function getFuncionariosProyecto($id_projeto)
    {
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::CODIGOFUNCIONARIO);
        $c->addSelectColumn(LxUserPeer::NAME);
        $c->addJoin(self::CODIGOTAREFA , TarefaPeer::CODIGOTAREFA, Criteria::INNER_JOIN);
        $c->addJoin(TarefaPeer::CODIGOPROJETO, PropostaPeer::CODIGO_PROJETO, Criteria::INNER_JOIN );
        $c->addJoin(self::CODIGOFUNCIONARIO, LxUserPeer::ID_USER, Criteria::INNER_JOIN );
        $c->add(PropostaPeer::CODIGO_PROJETO, $id_projeto, Criteria::EQUAL);
        $c->add(LxUserPeer::STATUS, 1, Criteria::EQUAL);
        $c->add(LxUserPeer::ID_PROFILE, 1, Criteria::GREATER_THAN);
        $c->addAscendingOrderByColumn(LxUserPeer::NAME);
        $rs = self::doSelectStmt($c);
        
        while ($res =  $rs->fetch())
        {
            $dato[$res['CODIGOFUNCIONARIO']] = $res['NAME'];
        }
        
        // Ahora cargo los administradores
        $administradores = LxUserPeer::getAdministradores();
        if($administradores)
        {
            foreach ($administradores as $admin) {
                $dato[$admin['id']] = $admin['nome'];
            }
        }
        $dato[aplication_system::getUser()] = aplication_system::getNameUser();
        return $dato;
    }
    
    
    
    
    public static function getFuncionariosProyectoEntrada($id_projeto)
    {
        //die("chao");
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::CODIGOFUNCIONARIO);
        $c->addSelectColumn(LxUserPeer::NAME);
        $c->addJoin(self::CODIGOTAREFA , TarefaPeer::CODIGOTAREFA, Criteria::INNER_JOIN);
        $c->addJoin(TarefaPeer::CODIGOPROJETO, PropostaPeer::CODIGO_PROJETO, Criteria::INNER_JOIN );
        $c->addJoin(self::CODIGOFUNCIONARIO, LxUserPeer::ID_USER, Criteria::INNER_JOIN );
        $c->add(PropostaPeer::CODIGO_PROJETO, $id_projeto, Criteria::EQUAL);
        $c->add(LxUserPeer::STATUS, 1, Criteria::EQUAL);
        $c->add(LxUserPeer::ID_PROFILE, 1, Criteria::GREATER_THAN);
        $c->addAscendingOrderByColumn(LxUserPeer::NAME);
        $rs = self::doSelectStmt($c);
        
        $res =  $rs->fetch();

            $dato[$res['CODIGOFUNCIONARIO']] = $res['NAME'];

        
        // Ahora cargo los administradores
        $administradores = LxUserPeer::getAdministradores();
        if($administradores)
        {
            foreach ($administradores as $admin) {
                $dato[$admin['id']] = $admin['nome'];
            }
        }
        $dato[aplication_system::getUser()] = aplication_system::getNameUser();
        return $dato;
    }

} // EquipeTarefaPeer
